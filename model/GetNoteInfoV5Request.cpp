/**
 * TikHub.io - Your Ultimate Social Media Data & API Marketplace
 * High-performance asynchronous Douyin(抖音) TikTok Xiaohongshu(小红书) Kuaishou(快手) Weibo(微博) Instagram YouTube(油管) Twitter(X) Captcha Solver(验证码解决器) Temp Mail(临时邮箱) API(接口).
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "GetNoteInfoV5Request.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




GetNoteInfoV5Request::GetNoteInfoV5Request()
{
    m_Note_id = utility::conversions::to_string_t("");
    m_Note_idIsSet = false;
    m_Xsec_token = utility::conversions::to_string_t("");
    m_Xsec_tokenIsSet = false;
    m_Cookie = utility::conversions::to_string_t("");
    m_CookieIsSet = false;
    m_Proxy = utility::conversions::to_string_t("");
    m_ProxyIsSet = false;
}

GetNoteInfoV5Request::~GetNoteInfoV5Request()
{
}

void GetNoteInfoV5Request::validate()
{
    // TODO: implement validation
}

web::json::value GetNoteInfoV5Request::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Note_idIsSet)
    {
        val[utility::conversions::to_string_t("note_id")] = ModelBase::toJson(m_Note_id);
    }
    if(m_Xsec_tokenIsSet)
    {
        val[utility::conversions::to_string_t("xsec_token")] = ModelBase::toJson(m_Xsec_token);
    }
    if(m_CookieIsSet)
    {
        val[utility::conversions::to_string_t("cookie")] = ModelBase::toJson(m_Cookie);
    }
    if(m_ProxyIsSet)
    {
        val[utility::conversions::to_string_t("proxy")] = ModelBase::toJson(m_Proxy);
    }

    return val;
}

bool GetNoteInfoV5Request::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("note_id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("note_id"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_note_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_note_id);
            setNoteId(refVal_note_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("xsec_token")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("xsec_token"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_xsec_token;
            ok &= ModelBase::fromJson(fieldValue, refVal_xsec_token);
            setXsecToken(refVal_xsec_token);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cookie")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("cookie"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_cookie;
            ok &= ModelBase::fromJson(fieldValue, refVal_cookie);
            setCookie(refVal_cookie);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("proxy")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("proxy"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_proxy;
            ok &= ModelBase::fromJson(fieldValue, refVal_proxy);
            setProxy(refVal_proxy);
        }
    }
    return ok;
}

void GetNoteInfoV5Request::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_Note_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("note_id"), m_Note_id));
    }
    if(m_Xsec_tokenIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("xsec_token"), m_Xsec_token));
    }
    if(m_CookieIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("cookie"), m_Cookie));
    }
    if(m_ProxyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("proxy"), m_Proxy));
    }
}

bool GetNoteInfoV5Request::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("note_id")))
    {
        utility::string_t refVal_note_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("note_id")), refVal_note_id );
        setNoteId(refVal_note_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("xsec_token")))
    {
        utility::string_t refVal_xsec_token;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("xsec_token")), refVal_xsec_token );
        setXsecToken(refVal_xsec_token);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cookie")))
    {
        utility::string_t refVal_cookie;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("cookie")), refVal_cookie );
        setCookie(refVal_cookie);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("proxy")))
    {
        utility::string_t refVal_proxy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("proxy")), refVal_proxy );
        setProxy(refVal_proxy);
    }
    return ok;
}

utility::string_t GetNoteInfoV5Request::getNoteId() const
{
    return m_Note_id;
}

void GetNoteInfoV5Request::setNoteId(const utility::string_t& value)
{
    m_Note_id = value;
    m_Note_idIsSet = true;
}

bool GetNoteInfoV5Request::noteIdIsSet() const
{
    return m_Note_idIsSet;
}

void GetNoteInfoV5Request::unsetNote_id()
{
    m_Note_idIsSet = false;
}
utility::string_t GetNoteInfoV5Request::getXsecToken() const
{
    return m_Xsec_token;
}

void GetNoteInfoV5Request::setXsecToken(const utility::string_t& value)
{
    m_Xsec_token = value;
    m_Xsec_tokenIsSet = true;
}

bool GetNoteInfoV5Request::xsecTokenIsSet() const
{
    return m_Xsec_tokenIsSet;
}

void GetNoteInfoV5Request::unsetXsec_token()
{
    m_Xsec_tokenIsSet = false;
}
utility::string_t GetNoteInfoV5Request::getCookie() const
{
    return m_Cookie;
}

void GetNoteInfoV5Request::setCookie(const utility::string_t& value)
{
    m_Cookie = value;
    m_CookieIsSet = true;
}

bool GetNoteInfoV5Request::cookieIsSet() const
{
    return m_CookieIsSet;
}

void GetNoteInfoV5Request::unsetCookie()
{
    m_CookieIsSet = false;
}
utility::string_t GetNoteInfoV5Request::getProxy() const
{
    return m_Proxy;
}

void GetNoteInfoV5Request::setProxy(const utility::string_t& value)
{
    m_Proxy = value;
    m_ProxyIsSet = true;
}

bool GetNoteInfoV5Request::proxyIsSet() const
{
    return m_ProxyIsSet;
}

void GetNoteInfoV5Request::unsetProxy()
{
    m_ProxyIsSet = false;
}
}
}
}
}


