/**
 * TikHub.io - Your Ultimate Social Media Data & API Marketplace
 * High-performance asynchronous Douyin(抖音) TikTok Xiaohongshu(小红书) Kuaishou(快手) Weibo(微博) Instagram YouTube(油管) Twitter(X) Captcha Solver(验证码解决器) Temp Mail(临时邮箱) API(接口).
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ABogusModel.h
 *
 * ABogusModel
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_ABogusModel_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_ABogusModel_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// ABogusModel
/// </summary>
class  ABogusModel
    : public ModelBase
{
public:
    ABogusModel();
    virtual ~ABogusModel();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ABogusModel members

    /// <summary>
    /// Url，请求的API URL，需要使用urlencode(url, safe&#x3D;&#39;*&#39;)进行编码 | The requested API URL, needs to be encoded using urlencode(url, safe&#x3D;&#39;*&#39;)
    /// </summary>
    utility::string_t getUrl() const;
    bool urlIsSet() const;
    void unsetUrl();

    void setUrl(const utility::string_t& value);

    /// <summary>
    /// Data，POST请求API时的载荷数据，需要使用urlencode(data, safe&#x3D;&#39;*&#39;)进行编码 | The payload data when requesting the API with POST, needs to be encoded using urlencode(data, safe&#x3D;&#39;*&#39;)
    /// </summary>
    utility::string_t getData() const;
    bool dataIsSet() const;
    void unsetData();

    void setData(const utility::string_t& value);

    /// <summary>
    /// User Agent，请求API时的User-Agent | User-Agent when requesting the API
    /// </summary>
    utility::string_t getUserAgent() const;
    bool userAgentIsSet() const;
    void unsetUser_agent();

    void setUserAgent(const utility::string_t& value);

    /// <summary>
    /// Index 0，加密明文列表的第一个值，无特殊要求，默认为0
    /// </summary>
    int32_t getIndex0() const;
    bool index0IsSet() const;
    void unsetIndex_0();

    void setIndex0(int32_t value);

    /// <summary>
    /// Index 1，加密明文列表的第一个值，无特殊要求，默认为1
    /// </summary>
    int32_t getIndex1() const;
    bool index1IsSet() const;
    void unsetIndex_1();

    void setIndex1(int32_t value);

    /// <summary>
    /// Index 2，加密明文列表的第一个值，无特殊要求，默认为14
    /// </summary>
    int32_t getIndex2() const;
    bool index2IsSet() const;
    void unsetIndex_2();

    void setIndex2(int32_t value);


protected:
    utility::string_t m_Url;
    bool m_UrlIsSet;
    utility::string_t m_Data;
    bool m_DataIsSet;
    utility::string_t m_User_agent;
    bool m_User_agentIsSet;
    int32_t m_Index_0;
    bool m_Index_0IsSet;
    int32_t m_Index_1;
    bool m_Index_1IsSet;
    int32_t m_Index_2;
    bool m_Index_2IsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_ABogusModel_H_ */
