/**
 * TikHub.io - Your Ultimate Social Media Data & API Marketplace
 * High-performance asynchronous Douyin(抖音) TikTok Xiaohongshu(小红书) Kuaishou(快手) Weibo(微博) Instagram YouTube(油管) Twitter(X) Captcha Solver(验证码解决器) Temp Mail(临时邮箱) API(接口).
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ValidationError.h
 *
 * ValidationError
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_ValidationError_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_ValidationError_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>
#include "AnyOfstringinteger.h"
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// ValidationError
/// </summary>
class  ValidationError
    : public ModelBase
{
public:
    ValidationError();
    virtual ~ValidationError();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ValidationError members

    /// <summary>
    /// Location
    /// </summary>
    std::vector<std::shared_ptr<AnyOfstringinteger>>& getLoc();
    bool locIsSet() const;
    void unsetLoc();

    void setLoc(const std::vector<std::shared_ptr<AnyOfstringinteger>>& value);

    /// <summary>
    /// Message
    /// </summary>
    utility::string_t getMsg() const;
    bool msgIsSet() const;
    void unsetMsg();

    void setMsg(const utility::string_t& value);

    /// <summary>
    /// Error Type
    /// </summary>
    utility::string_t getType() const;
    bool typeIsSet() const;
    void unsetType();

    void setType(const utility::string_t& value);


protected:
    std::vector<std::shared_ptr<AnyOfstringinteger>> m_Loc;
    bool m_LocIsSet;
    utility::string_t m_Msg;
    bool m_MsgIsSet;
    utility::string_t m_Type;
    bool m_TypeIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_ValidationError_H_ */
