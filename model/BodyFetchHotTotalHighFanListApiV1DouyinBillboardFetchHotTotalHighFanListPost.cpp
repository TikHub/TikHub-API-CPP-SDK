/**
 * TikHub.io - Your Ultimate Social Media Data & API Marketplace
 * High-performance asynchronous Douyin(抖音) TikTok Xiaohongshu(小红书) Kuaishou(快手) Weibo(微博) Instagram YouTube(油管) Twitter(X) Captcha Solver(验证码解决器) Temp Mail(临时邮箱) API(接口).
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BodyFetchHotTotalHighFanListApiV1DouyinBillboardFetchHotTotalHighFanListPost.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BodyFetchHotTotalHighFanListApiV1DouyinBillboardFetchHotTotalHighFanListPost::BodyFetchHotTotalHighFanListApiV1DouyinBillboardFetchHotTotalHighFanListPost()
{
    m_Page = 0;
    m_PageIsSet = false;
    m_Page_size = 0;
    m_Page_sizeIsSet = false;
    m_Date_window = 0;
    m_Date_windowIsSet = false;
    m_TagsIsSet = false;
}

BodyFetchHotTotalHighFanListApiV1DouyinBillboardFetchHotTotalHighFanListPost::~BodyFetchHotTotalHighFanListApiV1DouyinBillboardFetchHotTotalHighFanListPost()
{
}

void BodyFetchHotTotalHighFanListApiV1DouyinBillboardFetchHotTotalHighFanListPost::validate()
{
    // TODO: implement validation
}

web::json::value BodyFetchHotTotalHighFanListApiV1DouyinBillboardFetchHotTotalHighFanListPost::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_PageIsSet)
    {
        val[utility::conversions::to_string_t("page")] = ModelBase::toJson(m_Page);
    }
    if(m_Page_sizeIsSet)
    {
        val[utility::conversions::to_string_t("page_size")] = ModelBase::toJson(m_Page_size);
    }
    if(m_Date_windowIsSet)
    {
        val[utility::conversions::to_string_t("date_window")] = ModelBase::toJson(m_Date_window);
    }
    if(m_TagsIsSet)
    {
        val[utility::conversions::to_string_t("tags")] = ModelBase::toJson(m_Tags);
    }

    return val;
}

bool BodyFetchHotTotalHighFanListApiV1DouyinBillboardFetchHotTotalHighFanListPost::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("page")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("page"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_page;
            ok &= ModelBase::fromJson(fieldValue, refVal_page);
            setPage(refVal_page);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("page_size")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("page_size"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_page_size;
            ok &= ModelBase::fromJson(fieldValue, refVal_page_size);
            setPageSize(refVal_page_size);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("date_window")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("date_window"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_date_window;
            ok &= ModelBase::fromJson(fieldValue, refVal_date_window);
            setDateWindow(refVal_date_window);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("tags")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("tags"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<Object>> refVal_tags;
            ok &= ModelBase::fromJson(fieldValue, refVal_tags);
            setTags(refVal_tags);
        }
    }
    return ok;
}

void BodyFetchHotTotalHighFanListApiV1DouyinBillboardFetchHotTotalHighFanListPost::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_PageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("page"), m_Page));
    }
    if(m_Page_sizeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("page_size"), m_Page_size));
    }
    if(m_Date_windowIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("date_window"), m_Date_window));
    }
    if(m_TagsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("tags"), m_Tags));
    }
}

bool BodyFetchHotTotalHighFanListApiV1DouyinBillboardFetchHotTotalHighFanListPost::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("page")))
    {
        int32_t refVal_page;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("page")), refVal_page );
        setPage(refVal_page);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("page_size")))
    {
        int32_t refVal_page_size;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("page_size")), refVal_page_size );
        setPageSize(refVal_page_size);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("date_window")))
    {
        int32_t refVal_date_window;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("date_window")), refVal_date_window );
        setDateWindow(refVal_date_window);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("tags")))
    {
        std::vector<std::shared_ptr<Object>> refVal_tags;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("tags")), refVal_tags );
        setTags(refVal_tags);
    }
    return ok;
}

int32_t BodyFetchHotTotalHighFanListApiV1DouyinBillboardFetchHotTotalHighFanListPost::getPage() const
{
    return m_Page;
}

void BodyFetchHotTotalHighFanListApiV1DouyinBillboardFetchHotTotalHighFanListPost::setPage(int32_t value)
{
    m_Page = value;
    m_PageIsSet = true;
}

bool BodyFetchHotTotalHighFanListApiV1DouyinBillboardFetchHotTotalHighFanListPost::pageIsSet() const
{
    return m_PageIsSet;
}

void BodyFetchHotTotalHighFanListApiV1DouyinBillboardFetchHotTotalHighFanListPost::unsetPage()
{
    m_PageIsSet = false;
}
int32_t BodyFetchHotTotalHighFanListApiV1DouyinBillboardFetchHotTotalHighFanListPost::getPageSize() const
{
    return m_Page_size;
}

void BodyFetchHotTotalHighFanListApiV1DouyinBillboardFetchHotTotalHighFanListPost::setPageSize(int32_t value)
{
    m_Page_size = value;
    m_Page_sizeIsSet = true;
}

bool BodyFetchHotTotalHighFanListApiV1DouyinBillboardFetchHotTotalHighFanListPost::pageSizeIsSet() const
{
    return m_Page_sizeIsSet;
}

void BodyFetchHotTotalHighFanListApiV1DouyinBillboardFetchHotTotalHighFanListPost::unsetPage_size()
{
    m_Page_sizeIsSet = false;
}
int32_t BodyFetchHotTotalHighFanListApiV1DouyinBillboardFetchHotTotalHighFanListPost::getDateWindow() const
{
    return m_Date_window;
}

void BodyFetchHotTotalHighFanListApiV1DouyinBillboardFetchHotTotalHighFanListPost::setDateWindow(int32_t value)
{
    m_Date_window = value;
    m_Date_windowIsSet = true;
}

bool BodyFetchHotTotalHighFanListApiV1DouyinBillboardFetchHotTotalHighFanListPost::dateWindowIsSet() const
{
    return m_Date_windowIsSet;
}

void BodyFetchHotTotalHighFanListApiV1DouyinBillboardFetchHotTotalHighFanListPost::unsetDate_window()
{
    m_Date_windowIsSet = false;
}
std::vector<std::shared_ptr<Object>>& BodyFetchHotTotalHighFanListApiV1DouyinBillboardFetchHotTotalHighFanListPost::getTags()
{
    return m_Tags;
}

void BodyFetchHotTotalHighFanListApiV1DouyinBillboardFetchHotTotalHighFanListPost::setTags(const std::vector<std::shared_ptr<Object>>& value)
{
    m_Tags = value;
    m_TagsIsSet = true;
}

bool BodyFetchHotTotalHighFanListApiV1DouyinBillboardFetchHotTotalHighFanListPost::tagsIsSet() const
{
    return m_TagsIsSet;
}

void BodyFetchHotTotalHighFanListApiV1DouyinBillboardFetchHotTotalHighFanListPost::unsetTags()
{
    m_TagsIsSet = false;
}
}
}
}
}


