/**
 * TikHub.io - Your Ultimate Social Media Data & API Marketplace
 * High-performance asynchronous Douyin(抖音) TikTok Xiaohongshu(小红书) Kuaishou(快手) Weibo(微博) Instagram YouTube(油管) Twitter(X) Captcha Solver(验证码解决器) Temp Mail(临时邮箱) API(接口).
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ModeEnum.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



ModeEnum::ModeEnum()
{
}

ModeEnum::~ModeEnum()
{
}

void ModeEnum::validate()
{
    // TODO: implement validation
}

web::json::value ModeEnum::toJson() const
{
    web::json::value val = web::json::value::object();

    
    if (m_value == eModeEnum::ModeEnum_ENCRYPT) val = web::json::value::string(U("encrypt"));
    if (m_value == eModeEnum::ModeEnum_DECRYPT) val = web::json::value::string(U("decrypt"));

    return val;
}

bool ModeEnum::fromJson(const web::json::value& val)
{
    auto s = val.as_string();

    
    if (s == utility::conversions::to_string_t("encrypt")) m_value = eModeEnum::ModeEnum_ENCRYPT;
    if (s == utility::conversions::to_string_t("decrypt")) m_value = eModeEnum::ModeEnum_DECRYPT;
    return true;
}

void ModeEnum::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    utility::string_t s;

    
    if (m_value == eModeEnum::ModeEnum_ENCRYPT) s = utility::conversions::to_string_t("encrypt");
    if (m_value == eModeEnum::ModeEnum_DECRYPT) s = utility::conversions::to_string_t("decrypt");

    multipart->add(ModelBase::toHttpContent(namePrefix, s));
}

bool ModeEnum::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    {
        utility::string_t s;
        ok = ModelBase::fromHttpContent(multipart->getContent(namePrefix), s);
        eModeEnum v;

        
        if (s == utility::conversions::to_string_t("encrypt")) v = eModeEnum::ModeEnum_ENCRYPT;
        if (s == utility::conversions::to_string_t("decrypt")) v = eModeEnum::ModeEnum_DECRYPT;

        setValue(v);
    }
    return ok;
}

ModeEnum::eModeEnum ModeEnum::getValue() const
{
   return m_value;
}

void ModeEnum::setValue(ModeEnum::eModeEnum const value)
{
   m_value = value;
}


}
}
}
}


