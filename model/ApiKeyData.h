/**
 * TikHub.io - Your Ultimate Social Media Data & API Marketplace
 * High-performance asynchronous Douyin(抖音) TikTok Xiaohongshu(小红书) Kuaishou(快手) Weibo(微博) Instagram YouTube(油管) Twitter(X) Captcha Solver(验证码解决器) Temp Mail(临时邮箱) API(接口).
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ApiKeyData.h
 *
 * APIKeyData
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_ApiKeyData_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_ApiKeyData_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>
#include "AnyOfDateTimenull.h"
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// APIKeyData
/// </summary>
class  ApiKeyData
    : public ModelBase
{
public:
    ApiKeyData();
    virtual ~ApiKeyData();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ApiKeyData members

    /// <summary>
    /// Api Key Name
    /// </summary>
    utility::string_t getApiKeyName() const;
    bool apiKeyNameIsSet() const;
    void unsetApi_key_name();

    void setApiKeyName(const utility::string_t& value);

    /// <summary>
    /// Api Key Scopes
    /// </summary>
    std::vector<utility::string_t>& getApiKeyScopes();
    bool apiKeyScopesIsSet() const;
    void unsetApi_key_scopes();

    void setApiKeyScopes(const std::vector<utility::string_t>& value);

    /// <summary>
    /// Created At
    /// </summary>
    utility::datetime getCreatedAt() const;
    bool createdAtIsSet() const;
    void unsetCreated_at();

    void setCreatedAt(const utility::datetime& value);

    /// <summary>
    /// Expires At
    /// </summary>
    std::shared_ptr<AnyOfDateTimenull> getExpiresAt() const;
    bool expiresAtIsSet() const;
    void unsetExpires_at();

    void setExpiresAt(const std::shared_ptr<AnyOfDateTimenull>& value);

    /// <summary>
    /// Api Key Status
    /// </summary>
    int32_t getApiKeyStatus() const;
    bool apiKeyStatusIsSet() const;
    void unsetApi_key_status();

    void setApiKeyStatus(int32_t value);


protected:
    utility::string_t m_Api_key_name;
    bool m_Api_key_nameIsSet;
    std::vector<utility::string_t> m_Api_key_scopes;
    bool m_Api_key_scopesIsSet;
    utility::datetime m_Created_at;
    bool m_Created_atIsSet;
    std::shared_ptr<AnyOfDateTimenull> m_Expires_at;
    bool m_Expires_atIsSet;
    int32_t m_Api_key_status;
    bool m_Api_key_statusIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_ApiKeyData_H_ */
