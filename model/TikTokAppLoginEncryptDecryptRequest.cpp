/**
 * TikHub.io - Your Ultimate Social Media Data & API Marketplace
 * High-performance asynchronous Douyin(抖音) TikTok Xiaohongshu(小红书) Kuaishou(快手) Weibo(微博) Instagram YouTube(油管) Twitter(X) Captcha Solver(验证码解决器) Temp Mail(临时邮箱) API(接口).
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "TikTokAppLoginEncryptDecryptRequest.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




TikTokAppLoginEncryptDecryptRequest::TikTokAppLoginEncryptDecryptRequest()
{
    m_Username = utility::conversions::to_string_t("");
    m_UsernameIsSet = false;
    m_Password = utility::conversions::to_string_t("");
    m_PasswordIsSet = false;
    m_ModeIsSet = false;
}

TikTokAppLoginEncryptDecryptRequest::~TikTokAppLoginEncryptDecryptRequest()
{
}

void TikTokAppLoginEncryptDecryptRequest::validate()
{
    // TODO: implement validation
}

web::json::value TikTokAppLoginEncryptDecryptRequest::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_UsernameIsSet)
    {
        val[utility::conversions::to_string_t("username")] = ModelBase::toJson(m_Username);
    }
    if(m_PasswordIsSet)
    {
        val[utility::conversions::to_string_t("password")] = ModelBase::toJson(m_Password);
    }
    if(m_ModeIsSet)
    {
        val[utility::conversions::to_string_t("mode")] = ModelBase::toJson(m_Mode);
    }

    return val;
}

bool TikTokAppLoginEncryptDecryptRequest::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("username")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("username"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_username;
            ok &= ModelBase::fromJson(fieldValue, refVal_username);
            setUsername(refVal_username);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("password")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("password"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_password;
            ok &= ModelBase::fromJson(fieldValue, refVal_password);
            setPassword(refVal_password);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("mode")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("mode"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ModeEnum> refVal_mode;
            ok &= ModelBase::fromJson(fieldValue, refVal_mode);
            setMode(refVal_mode);
        }
    }
    return ok;
}

void TikTokAppLoginEncryptDecryptRequest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_UsernameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("username"), m_Username));
    }
    if(m_PasswordIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("password"), m_Password));
    }
    if(m_ModeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("mode"), m_Mode));
    }
}

bool TikTokAppLoginEncryptDecryptRequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("username")))
    {
        utility::string_t refVal_username;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("username")), refVal_username );
        setUsername(refVal_username);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("password")))
    {
        utility::string_t refVal_password;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("password")), refVal_password );
        setPassword(refVal_password);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("mode")))
    {
        std::shared_ptr<ModeEnum> refVal_mode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("mode")), refVal_mode );
        setMode(refVal_mode);
    }
    return ok;
}

utility::string_t TikTokAppLoginEncryptDecryptRequest::getUsername() const
{
    return m_Username;
}

void TikTokAppLoginEncryptDecryptRequest::setUsername(const utility::string_t& value)
{
    m_Username = value;
    m_UsernameIsSet = true;
}

bool TikTokAppLoginEncryptDecryptRequest::usernameIsSet() const
{
    return m_UsernameIsSet;
}

void TikTokAppLoginEncryptDecryptRequest::unsetUsername()
{
    m_UsernameIsSet = false;
}
utility::string_t TikTokAppLoginEncryptDecryptRequest::getPassword() const
{
    return m_Password;
}

void TikTokAppLoginEncryptDecryptRequest::setPassword(const utility::string_t& value)
{
    m_Password = value;
    m_PasswordIsSet = true;
}

bool TikTokAppLoginEncryptDecryptRequest::passwordIsSet() const
{
    return m_PasswordIsSet;
}

void TikTokAppLoginEncryptDecryptRequest::unsetPassword()
{
    m_PasswordIsSet = false;
}
std::shared_ptr<ModeEnum> TikTokAppLoginEncryptDecryptRequest::getMode() const
{
    return m_Mode;
}

void TikTokAppLoginEncryptDecryptRequest::setMode(const std::shared_ptr<ModeEnum>& value)
{
    m_Mode = value;
    m_ModeIsSet = true;
}

bool TikTokAppLoginEncryptDecryptRequest::modeIsSet() const
{
    return m_ModeIsSet;
}

void TikTokAppLoginEncryptDecryptRequest::unsetMode()
{
    m_ModeIsSet = false;
}
}
}
}
}


