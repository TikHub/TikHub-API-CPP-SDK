/**
 * TikHub.io - Your Ultimate Social Media Data & API Marketplace
 * High-performance asynchronous Douyin(抖音) TikTok Xiaohongshu(小红书) Kuaishou(快手) Weibo(微博) Instagram YouTube(油管) Twitter(X) Captcha Solver(验证码解决器) Temp Mail(临时邮箱) API(接口).
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ValidationError.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




ValidationError::ValidationError()
{
    m_LocIsSet = false;
    m_Msg = utility::conversions::to_string_t("");
    m_MsgIsSet = false;
    m_Type = utility::conversions::to_string_t("");
    m_TypeIsSet = false;
}

ValidationError::~ValidationError()
{
}

void ValidationError::validate()
{
    // TODO: implement validation
}

web::json::value ValidationError::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_LocIsSet)
    {
        val[utility::conversions::to_string_t("loc")] = ModelBase::toJson(m_Loc);
    }
    if(m_MsgIsSet)
    {
        val[utility::conversions::to_string_t("msg")] = ModelBase::toJson(m_Msg);
    }
    if(m_TypeIsSet)
    {
        val[utility::conversions::to_string_t("type")] = ModelBase::toJson(m_Type);
    }

    return val;
}

bool ValidationError::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("loc")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("loc"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<AnyOfstringinteger>> refVal_loc;
            ok &= ModelBase::fromJson(fieldValue, refVal_loc);
            setLoc(refVal_loc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("msg")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("msg"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_msg;
            ok &= ModelBase::fromJson(fieldValue, refVal_msg);
            setMsg(refVal_msg);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("type")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("type"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_type;
            ok &= ModelBase::fromJson(fieldValue, refVal_type);
            setType(refVal_type);
        }
    }
    return ok;
}

void ValidationError::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_LocIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("loc"), m_Loc));
    }
    if(m_MsgIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("msg"), m_Msg));
    }
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("type"), m_Type));
    }
}

bool ValidationError::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("loc")))
    {
        std::vector<std::shared_ptr<AnyOfstringinteger>> refVal_loc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("loc")), refVal_loc );
        setLoc(refVal_loc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("msg")))
    {
        utility::string_t refVal_msg;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("msg")), refVal_msg );
        setMsg(refVal_msg);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("type")))
    {
        utility::string_t refVal_type;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("type")), refVal_type );
        setType(refVal_type);
    }
    return ok;
}

std::vector<std::shared_ptr<AnyOfstringinteger>>& ValidationError::getLoc()
{
    return m_Loc;
}

void ValidationError::setLoc(const std::vector<std::shared_ptr<AnyOfstringinteger>>& value)
{
    m_Loc = value;
    m_LocIsSet = true;
}

bool ValidationError::locIsSet() const
{
    return m_LocIsSet;
}

void ValidationError::unsetLoc()
{
    m_LocIsSet = false;
}
utility::string_t ValidationError::getMsg() const
{
    return m_Msg;
}

void ValidationError::setMsg(const utility::string_t& value)
{
    m_Msg = value;
    m_MsgIsSet = true;
}

bool ValidationError::msgIsSet() const
{
    return m_MsgIsSet;
}

void ValidationError::unsetMsg()
{
    m_MsgIsSet = false;
}
utility::string_t ValidationError::getType() const
{
    return m_Type;
}

void ValidationError::setType(const utility::string_t& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}

bool ValidationError::typeIsSet() const
{
    return m_TypeIsSet;
}

void ValidationError::unsetType()
{
    m_TypeIsSet = false;
}
}
}
}
}


