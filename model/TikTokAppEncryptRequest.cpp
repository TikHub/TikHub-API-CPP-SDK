/**
 * TikHub.io - Your Ultimate Social Media Data & API Marketplace
 * High-performance asynchronous Douyin(抖音) TikTok Xiaohongshu(小红书) Kuaishou(快手) Weibo(微博) Instagram YouTube(油管) Twitter(X) Captcha Solver(验证码解决器) Temp Mail(临时邮箱) API(接口).
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "TikTokAppEncryptRequest.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




TikTokAppEncryptRequest::TikTokAppEncryptRequest()
{
    m_Url = utility::conversions::to_string_t("");
    m_UrlIsSet = false;
    m_Data = utility::conversions::to_string_t("");
    m_DataIsSet = false;
    m_Device_infoIsSet = false;
}

TikTokAppEncryptRequest::~TikTokAppEncryptRequest()
{
}

void TikTokAppEncryptRequest::validate()
{
    // TODO: implement validation
}

web::json::value TikTokAppEncryptRequest::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_UrlIsSet)
    {
        val[utility::conversions::to_string_t("url")] = ModelBase::toJson(m_Url);
    }
    if(m_DataIsSet)
    {
        val[utility::conversions::to_string_t("data")] = ModelBase::toJson(m_Data);
    }
    if(m_Device_infoIsSet)
    {
        val[utility::conversions::to_string_t("device_info")] = ModelBase::toJson(m_Device_info);
    }

    return val;
}

bool TikTokAppEncryptRequest::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("url")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("url"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_url;
            ok &= ModelBase::fromJson(fieldValue, refVal_url);
            setUrl(refVal_url);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("data")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("data"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_data;
            ok &= ModelBase::fromJson(fieldValue, refVal_data);
            setData(refVal_data);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("device_info")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("device_info"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Object> refVal_device_info;
            ok &= ModelBase::fromJson(fieldValue, refVal_device_info);
            setDeviceInfo(refVal_device_info);
        }
    }
    return ok;
}

void TikTokAppEncryptRequest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_UrlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("url"), m_Url));
    }
    if(m_DataIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("data"), m_Data));
    }
    if(m_Device_infoIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("device_info"), m_Device_info));
    }
}

bool TikTokAppEncryptRequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("url")))
    {
        utility::string_t refVal_url;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("url")), refVal_url );
        setUrl(refVal_url);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("data")))
    {
        utility::string_t refVal_data;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("data")), refVal_data );
        setData(refVal_data);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("device_info")))
    {
        std::shared_ptr<Object> refVal_device_info;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("device_info")), refVal_device_info );
        setDeviceInfo(refVal_device_info);
    }
    return ok;
}

utility::string_t TikTokAppEncryptRequest::getUrl() const
{
    return m_Url;
}

void TikTokAppEncryptRequest::setUrl(const utility::string_t& value)
{
    m_Url = value;
    m_UrlIsSet = true;
}

bool TikTokAppEncryptRequest::urlIsSet() const
{
    return m_UrlIsSet;
}

void TikTokAppEncryptRequest::unsetUrl()
{
    m_UrlIsSet = false;
}
utility::string_t TikTokAppEncryptRequest::getData() const
{
    return m_Data;
}

void TikTokAppEncryptRequest::setData(const utility::string_t& value)
{
    m_Data = value;
    m_DataIsSet = true;
}

bool TikTokAppEncryptRequest::dataIsSet() const
{
    return m_DataIsSet;
}

void TikTokAppEncryptRequest::unsetData()
{
    m_DataIsSet = false;
}
std::shared_ptr<Object> TikTokAppEncryptRequest::getDeviceInfo() const
{
    return m_Device_info;
}

void TikTokAppEncryptRequest::setDeviceInfo(const std::shared_ptr<Object>& value)
{
    m_Device_info = value;
    m_Device_infoIsSet = true;
}

bool TikTokAppEncryptRequest::deviceInfoIsSet() const
{
    return m_Device_infoIsSet;
}

void TikTokAppEncryptRequest::unsetDevice_info()
{
    m_Device_infoIsSet = false;
}
}
}
}
}


