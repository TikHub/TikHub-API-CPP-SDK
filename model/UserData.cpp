/**
 * TikHub.io - Your Ultimate Social Media Data & API Marketplace
 * High-performance asynchronous Douyin(抖音) TikTok Xiaohongshu(小红书) Kuaishou(快手) Weibo(微博) Instagram YouTube(油管) Twitter(X) Captcha Solver(验证码解决器) Temp Mail(临时邮箱) API(接口).
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "UserData.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




UserData::UserData()
{
    m_Email = utility::conversions::to_string_t("");
    m_EmailIsSet = false;
    m_Balance = 0.0;
    m_BalanceIsSet = false;
    m_Free_credit = 0.0;
    m_Free_creditIsSet = false;
    m_Email_verified = false;
    m_Email_verifiedIsSet = false;
    m_Account_disabled = false;
    m_Account_disabledIsSet = false;
    m_Is_active = false;
    m_Is_activeIsSet = false;
}

UserData::~UserData()
{
}

void UserData::validate()
{
    // TODO: implement validation
}

web::json::value UserData::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_EmailIsSet)
    {
        val[utility::conversions::to_string_t("email")] = ModelBase::toJson(m_Email);
    }
    if(m_BalanceIsSet)
    {
        val[utility::conversions::to_string_t("balance")] = ModelBase::toJson(m_Balance);
    }
    if(m_Free_creditIsSet)
    {
        val[utility::conversions::to_string_t("free_credit")] = ModelBase::toJson(m_Free_credit);
    }
    if(m_Email_verifiedIsSet)
    {
        val[utility::conversions::to_string_t("email_verified")] = ModelBase::toJson(m_Email_verified);
    }
    if(m_Account_disabledIsSet)
    {
        val[utility::conversions::to_string_t("account_disabled")] = ModelBase::toJson(m_Account_disabled);
    }
    if(m_Is_activeIsSet)
    {
        val[utility::conversions::to_string_t("is_active")] = ModelBase::toJson(m_Is_active);
    }

    return val;
}

bool UserData::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("email")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("email"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_email;
            ok &= ModelBase::fromJson(fieldValue, refVal_email);
            setEmail(refVal_email);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("balance")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("balance"));
        if(!fieldValue.is_null())
        {
            double refVal_balance;
            ok &= ModelBase::fromJson(fieldValue, refVal_balance);
            setBalance(refVal_balance);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("free_credit")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("free_credit"));
        if(!fieldValue.is_null())
        {
            double refVal_free_credit;
            ok &= ModelBase::fromJson(fieldValue, refVal_free_credit);
            setFreeCredit(refVal_free_credit);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("email_verified")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("email_verified"));
        if(!fieldValue.is_null())
        {
            bool refVal_email_verified;
            ok &= ModelBase::fromJson(fieldValue, refVal_email_verified);
            setEmailVerified(refVal_email_verified);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("account_disabled")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("account_disabled"));
        if(!fieldValue.is_null())
        {
            bool refVal_account_disabled;
            ok &= ModelBase::fromJson(fieldValue, refVal_account_disabled);
            setAccountDisabled(refVal_account_disabled);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("is_active")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("is_active"));
        if(!fieldValue.is_null())
        {
            bool refVal_is_active;
            ok &= ModelBase::fromJson(fieldValue, refVal_is_active);
            setIsActive(refVal_is_active);
        }
    }
    return ok;
}

void UserData::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_EmailIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("email"), m_Email));
    }
    if(m_BalanceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("balance"), m_Balance));
    }
    if(m_Free_creditIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("free_credit"), m_Free_credit));
    }
    if(m_Email_verifiedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("email_verified"), m_Email_verified));
    }
    if(m_Account_disabledIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("account_disabled"), m_Account_disabled));
    }
    if(m_Is_activeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("is_active"), m_Is_active));
    }
}

bool UserData::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("email")))
    {
        utility::string_t refVal_email;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("email")), refVal_email );
        setEmail(refVal_email);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("balance")))
    {
        double refVal_balance;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("balance")), refVal_balance );
        setBalance(refVal_balance);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("free_credit")))
    {
        double refVal_free_credit;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("free_credit")), refVal_free_credit );
        setFreeCredit(refVal_free_credit);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("email_verified")))
    {
        bool refVal_email_verified;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("email_verified")), refVal_email_verified );
        setEmailVerified(refVal_email_verified);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("account_disabled")))
    {
        bool refVal_account_disabled;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("account_disabled")), refVal_account_disabled );
        setAccountDisabled(refVal_account_disabled);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("is_active")))
    {
        bool refVal_is_active;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("is_active")), refVal_is_active );
        setIsActive(refVal_is_active);
    }
    return ok;
}

utility::string_t UserData::getEmail() const
{
    return m_Email;
}

void UserData::setEmail(const utility::string_t& value)
{
    m_Email = value;
    m_EmailIsSet = true;
}

bool UserData::emailIsSet() const
{
    return m_EmailIsSet;
}

void UserData::unsetEmail()
{
    m_EmailIsSet = false;
}
double UserData::getBalance() const
{
    return m_Balance;
}

void UserData::setBalance(double value)
{
    m_Balance = value;
    m_BalanceIsSet = true;
}

bool UserData::balanceIsSet() const
{
    return m_BalanceIsSet;
}

void UserData::unsetBalance()
{
    m_BalanceIsSet = false;
}
double UserData::getFreeCredit() const
{
    return m_Free_credit;
}

void UserData::setFreeCredit(double value)
{
    m_Free_credit = value;
    m_Free_creditIsSet = true;
}

bool UserData::freeCreditIsSet() const
{
    return m_Free_creditIsSet;
}

void UserData::unsetFree_credit()
{
    m_Free_creditIsSet = false;
}
bool UserData::isEmailVerified() const
{
    return m_Email_verified;
}

void UserData::setEmailVerified(bool value)
{
    m_Email_verified = value;
    m_Email_verifiedIsSet = true;
}

bool UserData::emailVerifiedIsSet() const
{
    return m_Email_verifiedIsSet;
}

void UserData::unsetEmail_verified()
{
    m_Email_verifiedIsSet = false;
}
bool UserData::isAccountDisabled() const
{
    return m_Account_disabled;
}

void UserData::setAccountDisabled(bool value)
{
    m_Account_disabled = value;
    m_Account_disabledIsSet = true;
}

bool UserData::accountDisabledIsSet() const
{
    return m_Account_disabledIsSet;
}

void UserData::unsetAccount_disabled()
{
    m_Account_disabledIsSet = false;
}
bool UserData::isIsActive() const
{
    return m_Is_active;
}

void UserData::setIsActive(bool value)
{
    m_Is_active = value;
    m_Is_activeIsSet = true;
}

bool UserData::isActiveIsSet() const
{
    return m_Is_activeIsSet;
}

void UserData::unsetIs_active()
{
    m_Is_activeIsSet = false;
}
}
}
}
}


