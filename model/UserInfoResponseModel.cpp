/**
 * TikHub.io - Your Ultimate Social Media Data & API Marketplace
 * High-performance asynchronous Douyin(抖音) TikTok Xiaohongshu(小红书) Kuaishou(快手) Weibo(微博) Instagram YouTube(油管) Twitter(X) Captcha Solver(验证码解决器) Temp Mail(临时邮箱) API(接口).
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "UserInfoResponseModel.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




UserInfoResponseModel::UserInfoResponseModel()
{
    m_Code = 0;
    m_CodeIsSet = false;
    m_Router = utility::conversions::to_string_t("");
    m_RouterIsSet = false;
    m_Api_key_dataIsSet = false;
    m_User_dataIsSet = false;
}

UserInfoResponseModel::~UserInfoResponseModel()
{
}

void UserInfoResponseModel::validate()
{
    // TODO: implement validation
}

web::json::value UserInfoResponseModel::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_CodeIsSet)
    {
        val[utility::conversions::to_string_t("code")] = ModelBase::toJson(m_Code);
    }
    if(m_RouterIsSet)
    {
        val[utility::conversions::to_string_t("router")] = ModelBase::toJson(m_Router);
    }
    if(m_Api_key_dataIsSet)
    {
        val[utility::conversions::to_string_t("api_key_data")] = ModelBase::toJson(m_Api_key_data);
    }
    if(m_User_dataIsSet)
    {
        val[utility::conversions::to_string_t("user_data")] = ModelBase::toJson(m_User_data);
    }

    return val;
}

bool UserInfoResponseModel::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("code")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("code"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_code;
            ok &= ModelBase::fromJson(fieldValue, refVal_code);
            setCode(refVal_code);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("router")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("router"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_router;
            ok &= ModelBase::fromJson(fieldValue, refVal_router);
            setRouter(refVal_router);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("api_key_data")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("api_key_data"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ApiKeyData> refVal_api_key_data;
            ok &= ModelBase::fromJson(fieldValue, refVal_api_key_data);
            setApiKeyData(refVal_api_key_data);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("user_data")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("user_data"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<UserData> refVal_user_data;
            ok &= ModelBase::fromJson(fieldValue, refVal_user_data);
            setUserData(refVal_user_data);
        }
    }
    return ok;
}

void UserInfoResponseModel::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_CodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("code"), m_Code));
    }
    if(m_RouterIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("router"), m_Router));
    }
    if(m_Api_key_dataIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("api_key_data"), m_Api_key_data));
    }
    if(m_User_dataIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("user_data"), m_User_data));
    }
}

bool UserInfoResponseModel::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("code")))
    {
        int32_t refVal_code;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("code")), refVal_code );
        setCode(refVal_code);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("router")))
    {
        utility::string_t refVal_router;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("router")), refVal_router );
        setRouter(refVal_router);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("api_key_data")))
    {
        std::shared_ptr<ApiKeyData> refVal_api_key_data;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("api_key_data")), refVal_api_key_data );
        setApiKeyData(refVal_api_key_data);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("user_data")))
    {
        std::shared_ptr<UserData> refVal_user_data;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("user_data")), refVal_user_data );
        setUserData(refVal_user_data);
    }
    return ok;
}

int32_t UserInfoResponseModel::getCode() const
{
    return m_Code;
}

void UserInfoResponseModel::setCode(int32_t value)
{
    m_Code = value;
    m_CodeIsSet = true;
}

bool UserInfoResponseModel::codeIsSet() const
{
    return m_CodeIsSet;
}

void UserInfoResponseModel::unsetCode()
{
    m_CodeIsSet = false;
}
utility::string_t UserInfoResponseModel::getRouter() const
{
    return m_Router;
}

void UserInfoResponseModel::setRouter(const utility::string_t& value)
{
    m_Router = value;
    m_RouterIsSet = true;
}

bool UserInfoResponseModel::routerIsSet() const
{
    return m_RouterIsSet;
}

void UserInfoResponseModel::unsetRouter()
{
    m_RouterIsSet = false;
}
std::shared_ptr<ApiKeyData> UserInfoResponseModel::getApiKeyData() const
{
    return m_Api_key_data;
}

void UserInfoResponseModel::setApiKeyData(const std::shared_ptr<ApiKeyData>& value)
{
    m_Api_key_data = value;
    m_Api_key_dataIsSet = true;
}

bool UserInfoResponseModel::apiKeyDataIsSet() const
{
    return m_Api_key_dataIsSet;
}

void UserInfoResponseModel::unsetApi_key_data()
{
    m_Api_key_dataIsSet = false;
}
std::shared_ptr<UserData> UserInfoResponseModel::getUserData() const
{
    return m_User_data;
}

void UserInfoResponseModel::setUserData(const std::shared_ptr<UserData>& value)
{
    m_User_data = value;
    m_User_dataIsSet = true;
}

bool UserInfoResponseModel::userDataIsSet() const
{
    return m_User_dataIsSet;
}

void UserInfoResponseModel::unsetUser_data()
{
    m_User_dataIsSet = false;
}
}
}
}
}


