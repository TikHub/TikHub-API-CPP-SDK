/**
 * TikHub.io - Your Ultimate Social Media Data & API Marketplace
 * High-performance asynchronous Douyin(抖音) TikTok Xiaohongshu(小红书) Kuaishou(快手) Weibo(微博) Instagram YouTube(油管) Twitter(X) Captcha Solver(验证码解决器) Temp Mail(临时邮箱) API(接口).
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "FollowRequest.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




FollowRequest::FollowRequest()
{
    m_User_id = utility::conversions::to_string_t("");
    m_User_idIsSet = false;
    m_Sec_user_id = utility::conversions::to_string_t("");
    m_Sec_user_idIsSet = false;
    m_Cookie = utility::conversions::to_string_t("");
    m_CookieIsSet = false;
    m_Device_id = utility::conversions::to_string_t("");
    m_Device_idIsSet = false;
    m_Iid = utility::conversions::to_string_t("");
    m_IidIsSet = false;
    m_Proxy = utility::conversions::to_string_t("");
    m_ProxyIsSet = false;
}

FollowRequest::~FollowRequest()
{
}

void FollowRequest::validate()
{
    // TODO: implement validation
}

web::json::value FollowRequest::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_User_idIsSet)
    {
        val[utility::conversions::to_string_t("user_id")] = ModelBase::toJson(m_User_id);
    }
    if(m_Sec_user_idIsSet)
    {
        val[utility::conversions::to_string_t("sec_user_id")] = ModelBase::toJson(m_Sec_user_id);
    }
    if(m_CookieIsSet)
    {
        val[utility::conversions::to_string_t("cookie")] = ModelBase::toJson(m_Cookie);
    }
    if(m_Device_idIsSet)
    {
        val[utility::conversions::to_string_t("device_id")] = ModelBase::toJson(m_Device_id);
    }
    if(m_IidIsSet)
    {
        val[utility::conversions::to_string_t("iid")] = ModelBase::toJson(m_Iid);
    }
    if(m_ProxyIsSet)
    {
        val[utility::conversions::to_string_t("proxy")] = ModelBase::toJson(m_Proxy);
    }

    return val;
}

bool FollowRequest::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("user_id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("user_id"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_user_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_user_id);
            setUserId(refVal_user_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sec_user_id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("sec_user_id"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_sec_user_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_sec_user_id);
            setSecUserId(refVal_sec_user_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cookie")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("cookie"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_cookie;
            ok &= ModelBase::fromJson(fieldValue, refVal_cookie);
            setCookie(refVal_cookie);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("device_id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("device_id"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_device_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_device_id);
            setDeviceId(refVal_device_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("iid")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("iid"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_iid;
            ok &= ModelBase::fromJson(fieldValue, refVal_iid);
            setIid(refVal_iid);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("proxy")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("proxy"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_proxy;
            ok &= ModelBase::fromJson(fieldValue, refVal_proxy);
            setProxy(refVal_proxy);
        }
    }
    return ok;
}

void FollowRequest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_User_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("user_id"), m_User_id));
    }
    if(m_Sec_user_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sec_user_id"), m_Sec_user_id));
    }
    if(m_CookieIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("cookie"), m_Cookie));
    }
    if(m_Device_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("device_id"), m_Device_id));
    }
    if(m_IidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("iid"), m_Iid));
    }
    if(m_ProxyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("proxy"), m_Proxy));
    }
}

bool FollowRequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("user_id")))
    {
        utility::string_t refVal_user_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("user_id")), refVal_user_id );
        setUserId(refVal_user_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sec_user_id")))
    {
        utility::string_t refVal_sec_user_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("sec_user_id")), refVal_sec_user_id );
        setSecUserId(refVal_sec_user_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cookie")))
    {
        utility::string_t refVal_cookie;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("cookie")), refVal_cookie );
        setCookie(refVal_cookie);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("device_id")))
    {
        utility::string_t refVal_device_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("device_id")), refVal_device_id );
        setDeviceId(refVal_device_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("iid")))
    {
        utility::string_t refVal_iid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("iid")), refVal_iid );
        setIid(refVal_iid);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("proxy")))
    {
        utility::string_t refVal_proxy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("proxy")), refVal_proxy );
        setProxy(refVal_proxy);
    }
    return ok;
}

utility::string_t FollowRequest::getUserId() const
{
    return m_User_id;
}

void FollowRequest::setUserId(const utility::string_t& value)
{
    m_User_id = value;
    m_User_idIsSet = true;
}

bool FollowRequest::userIdIsSet() const
{
    return m_User_idIsSet;
}

void FollowRequest::unsetUser_id()
{
    m_User_idIsSet = false;
}
utility::string_t FollowRequest::getSecUserId() const
{
    return m_Sec_user_id;
}

void FollowRequest::setSecUserId(const utility::string_t& value)
{
    m_Sec_user_id = value;
    m_Sec_user_idIsSet = true;
}

bool FollowRequest::secUserIdIsSet() const
{
    return m_Sec_user_idIsSet;
}

void FollowRequest::unsetSec_user_id()
{
    m_Sec_user_idIsSet = false;
}
utility::string_t FollowRequest::getCookie() const
{
    return m_Cookie;
}

void FollowRequest::setCookie(const utility::string_t& value)
{
    m_Cookie = value;
    m_CookieIsSet = true;
}

bool FollowRequest::cookieIsSet() const
{
    return m_CookieIsSet;
}

void FollowRequest::unsetCookie()
{
    m_CookieIsSet = false;
}
utility::string_t FollowRequest::getDeviceId() const
{
    return m_Device_id;
}

void FollowRequest::setDeviceId(const utility::string_t& value)
{
    m_Device_id = value;
    m_Device_idIsSet = true;
}

bool FollowRequest::deviceIdIsSet() const
{
    return m_Device_idIsSet;
}

void FollowRequest::unsetDevice_id()
{
    m_Device_idIsSet = false;
}
utility::string_t FollowRequest::getIid() const
{
    return m_Iid;
}

void FollowRequest::setIid(const utility::string_t& value)
{
    m_Iid = value;
    m_IidIsSet = true;
}

bool FollowRequest::iidIsSet() const
{
    return m_IidIsSet;
}

void FollowRequest::unsetIid()
{
    m_IidIsSet = false;
}
utility::string_t FollowRequest::getProxy() const
{
    return m_Proxy;
}

void FollowRequest::setProxy(const utility::string_t& value)
{
    m_Proxy = value;
    m_ProxyIsSet = true;
}

bool FollowRequest::proxyIsSet() const
{
    return m_ProxyIsSet;
}

void FollowRequest::unsetProxy()
{
    m_ProxyIsSet = false;
}
}
}
}
}


