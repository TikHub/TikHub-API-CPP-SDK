/**
 * TikHub.io - Your Ultimate Social Media Data & API Marketplace
 * High-performance asynchronous Douyin(抖音) TikTok Xiaohongshu(小红书) Kuaishou(快手) Weibo(微博) Instagram YouTube(油管) Twitter(X) Captcha Solver(验证码解决器) Temp Mail(临时邮箱) API(接口).
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BodyHcaptchaApiV1CaptchaHcaptchaPost.h
 *
 * Body_hcaptcha_api_v1_captcha_hcaptcha_post
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_BodyHcaptchaApiV1CaptchaHcaptchaPost_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_BodyHcaptchaApiV1CaptchaHcaptchaPost_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>
#include "Object.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// Body_hcaptcha_api_v1_captcha_hcaptcha_post
/// </summary>
class  BodyHcaptchaApiV1CaptchaHcaptchaPost
    : public ModelBase
{
public:
    BodyHcaptchaApiV1CaptchaHcaptchaPost();
    virtual ~BodyHcaptchaApiV1CaptchaHcaptchaPost();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// BodyHcaptchaApiV1CaptchaHcaptchaPost members

    /// <summary>
    /// Sitekey，Sitekey
    /// </summary>
    utility::string_t getSitekey() const;
    bool sitekeyIsSet() const;
    void unsetSitekey();

    void setSitekey(const utility::string_t& value);

    /// <summary>
    /// Url，URL
    /// </summary>
    utility::string_t getUrl() const;
    bool urlIsSet() const;
    void unsetUrl();

    void setUrl(const utility::string_t& value);

    /// <summary>
    /// Proxy，Proxy
    /// </summary>
    std::shared_ptr<Object> getProxy() const;
    bool proxyIsSet() const;
    void unsetProxy();

    void setProxy(const std::shared_ptr<Object>& value);


protected:
    utility::string_t m_Sitekey;
    bool m_SitekeyIsSet;
    utility::string_t m_Url;
    bool m_UrlIsSet;
    std::shared_ptr<Object> m_Proxy;
    bool m_ProxyIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_BodyHcaptchaApiV1CaptchaHcaptchaPost_H_ */
