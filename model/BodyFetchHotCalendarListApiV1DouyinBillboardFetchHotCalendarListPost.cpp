/**
 * TikHub.io - Your Ultimate Social Media Data & API Marketplace
 * High-performance asynchronous Douyin(抖音) TikTok Xiaohongshu(小红书) Kuaishou(快手) Weibo(微博) Instagram YouTube(油管) Twitter(X) Captcha Solver(验证码解决器) Temp Mail(临时邮箱) API(接口).
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BodyFetchHotCalendarListApiV1DouyinBillboardFetchHotCalendarListPost.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BodyFetchHotCalendarListApiV1DouyinBillboardFetchHotCalendarListPost::BodyFetchHotCalendarListApiV1DouyinBillboardFetchHotCalendarListPost()
{
    m_City_code = utility::conversions::to_string_t("");
    m_City_codeIsSet = false;
    m_Category_code = utility::conversions::to_string_t("");
    m_Category_codeIsSet = false;
    m_End_date = 0;
    m_End_dateIsSet = false;
    m_Start_date = 0;
    m_Start_dateIsSet = false;
}

BodyFetchHotCalendarListApiV1DouyinBillboardFetchHotCalendarListPost::~BodyFetchHotCalendarListApiV1DouyinBillboardFetchHotCalendarListPost()
{
}

void BodyFetchHotCalendarListApiV1DouyinBillboardFetchHotCalendarListPost::validate()
{
    // TODO: implement validation
}

web::json::value BodyFetchHotCalendarListApiV1DouyinBillboardFetchHotCalendarListPost::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_City_codeIsSet)
    {
        val[utility::conversions::to_string_t("city_code")] = ModelBase::toJson(m_City_code);
    }
    if(m_Category_codeIsSet)
    {
        val[utility::conversions::to_string_t("category_code")] = ModelBase::toJson(m_Category_code);
    }
    if(m_End_dateIsSet)
    {
        val[utility::conversions::to_string_t("end_date")] = ModelBase::toJson(m_End_date);
    }
    if(m_Start_dateIsSet)
    {
        val[utility::conversions::to_string_t("start_date")] = ModelBase::toJson(m_Start_date);
    }

    return val;
}

bool BodyFetchHotCalendarListApiV1DouyinBillboardFetchHotCalendarListPost::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("city_code")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("city_code"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_city_code;
            ok &= ModelBase::fromJson(fieldValue, refVal_city_code);
            setCityCode(refVal_city_code);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("category_code")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("category_code"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_category_code;
            ok &= ModelBase::fromJson(fieldValue, refVal_category_code);
            setCategoryCode(refVal_category_code);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("end_date")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("end_date"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_end_date;
            ok &= ModelBase::fromJson(fieldValue, refVal_end_date);
            setEndDate(refVal_end_date);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("start_date")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("start_date"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_start_date;
            ok &= ModelBase::fromJson(fieldValue, refVal_start_date);
            setStartDate(refVal_start_date);
        }
    }
    return ok;
}

void BodyFetchHotCalendarListApiV1DouyinBillboardFetchHotCalendarListPost::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_City_codeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("city_code"), m_City_code));
    }
    if(m_Category_codeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("category_code"), m_Category_code));
    }
    if(m_End_dateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("end_date"), m_End_date));
    }
    if(m_Start_dateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("start_date"), m_Start_date));
    }
}

bool BodyFetchHotCalendarListApiV1DouyinBillboardFetchHotCalendarListPost::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("city_code")))
    {
        utility::string_t refVal_city_code;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("city_code")), refVal_city_code );
        setCityCode(refVal_city_code);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("category_code")))
    {
        utility::string_t refVal_category_code;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("category_code")), refVal_category_code );
        setCategoryCode(refVal_category_code);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("end_date")))
    {
        int32_t refVal_end_date;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("end_date")), refVal_end_date );
        setEndDate(refVal_end_date);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("start_date")))
    {
        int32_t refVal_start_date;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("start_date")), refVal_start_date );
        setStartDate(refVal_start_date);
    }
    return ok;
}

utility::string_t BodyFetchHotCalendarListApiV1DouyinBillboardFetchHotCalendarListPost::getCityCode() const
{
    return m_City_code;
}

void BodyFetchHotCalendarListApiV1DouyinBillboardFetchHotCalendarListPost::setCityCode(const utility::string_t& value)
{
    m_City_code = value;
    m_City_codeIsSet = true;
}

bool BodyFetchHotCalendarListApiV1DouyinBillboardFetchHotCalendarListPost::cityCodeIsSet() const
{
    return m_City_codeIsSet;
}

void BodyFetchHotCalendarListApiV1DouyinBillboardFetchHotCalendarListPost::unsetCity_code()
{
    m_City_codeIsSet = false;
}
utility::string_t BodyFetchHotCalendarListApiV1DouyinBillboardFetchHotCalendarListPost::getCategoryCode() const
{
    return m_Category_code;
}

void BodyFetchHotCalendarListApiV1DouyinBillboardFetchHotCalendarListPost::setCategoryCode(const utility::string_t& value)
{
    m_Category_code = value;
    m_Category_codeIsSet = true;
}

bool BodyFetchHotCalendarListApiV1DouyinBillboardFetchHotCalendarListPost::categoryCodeIsSet() const
{
    return m_Category_codeIsSet;
}

void BodyFetchHotCalendarListApiV1DouyinBillboardFetchHotCalendarListPost::unsetCategory_code()
{
    m_Category_codeIsSet = false;
}
int32_t BodyFetchHotCalendarListApiV1DouyinBillboardFetchHotCalendarListPost::getEndDate() const
{
    return m_End_date;
}

void BodyFetchHotCalendarListApiV1DouyinBillboardFetchHotCalendarListPost::setEndDate(int32_t value)
{
    m_End_date = value;
    m_End_dateIsSet = true;
}

bool BodyFetchHotCalendarListApiV1DouyinBillboardFetchHotCalendarListPost::endDateIsSet() const
{
    return m_End_dateIsSet;
}

void BodyFetchHotCalendarListApiV1DouyinBillboardFetchHotCalendarListPost::unsetEnd_date()
{
    m_End_dateIsSet = false;
}
int32_t BodyFetchHotCalendarListApiV1DouyinBillboardFetchHotCalendarListPost::getStartDate() const
{
    return m_Start_date;
}

void BodyFetchHotCalendarListApiV1DouyinBillboardFetchHotCalendarListPost::setStartDate(int32_t value)
{
    m_Start_date = value;
    m_Start_dateIsSet = true;
}

bool BodyFetchHotCalendarListApiV1DouyinBillboardFetchHotCalendarListPost::startDateIsSet() const
{
    return m_Start_dateIsSet;
}

void BodyFetchHotCalendarListApiV1DouyinBillboardFetchHotCalendarListPost::unsetStart_date()
{
    m_Start_dateIsSet = false;
}
}
}
}
}


