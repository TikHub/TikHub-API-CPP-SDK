/**
 * TikHub.io - Your Ultimate Social Media Data & API Marketplace
 * High-performance asynchronous Douyin(抖音) TikTok Xiaohongshu(小红书) Kuaishou(快手) Weibo(微博) Instagram YouTube(油管) Twitter(X) Captcha Solver(验证码解决器) Temp Mail(临时邮箱) API(接口).
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ChallengePostRequest.h
 *
 * ChallengePostRequest
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_ChallengePostRequest_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_ChallengePostRequest_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// ChallengePostRequest
/// </summary>
class  ChallengePostRequest
    : public ModelBase
{
public:
    ChallengePostRequest();
    virtual ~ChallengePostRequest();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ChallengePostRequest members

    /// <summary>
    /// Challenge Id，话题ID/Challenge ID
    /// </summary>
    utility::string_t getChallengeId() const;
    bool challengeIdIsSet() const;
    void unsetChallenge_id();

    void setChallengeId(const utility::string_t& value);

    /// <summary>
    /// Sort Type，排序类型/Sort type
    /// </summary>
    int32_t getSortType() const;
    bool sortTypeIsSet() const;
    void unsetSort_type();

    void setSortType(int32_t value);

    /// <summary>
    /// Cursor，游标/Cursor
    /// </summary>
    int32_t getCursor() const;
    bool cursorIsSet() const;
    void unsetCursor();

    void setCursor(int32_t value);

    /// <summary>
    /// Count，数量/Count
    /// </summary>
    int32_t getCount() const;
    bool countIsSet() const;
    void unsetCount();

    void setCount(int32_t value);

    /// <summary>
    /// Cookie，用户自行提供的Cookie/User provided Cookie
    /// </summary>
    utility::string_t getCookie() const;
    bool cookieIsSet() const;
    void unsetCookie();

    void setCookie(const utility::string_t& value);


protected:
    utility::string_t m_Challenge_id;
    bool m_Challenge_idIsSet;
    int32_t m_Sort_type;
    bool m_Sort_typeIsSet;
    int32_t m_Cursor;
    bool m_CursorIsSet;
    int32_t m_Count;
    bool m_CountIsSet;
    utility::string_t m_Cookie;
    bool m_CookieIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_ChallengePostRequest_H_ */
