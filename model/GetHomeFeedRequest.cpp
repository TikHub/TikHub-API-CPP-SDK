/**
 * TikHub.io - Your Ultimate Social Media Data & API Marketplace
 * High-performance asynchronous Douyin(抖音) TikTok Xiaohongshu(小红书) Kuaishou(快手) Weibo(微博) Instagram YouTube(油管) Twitter(X) Captcha Solver(验证码解决器) Temp Mail(临时邮箱) API(接口).
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "GetHomeFeedRequest.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




GetHomeFeedRequest::GetHomeFeedRequest()
{
    m_Feed_type = utility::conversions::to_string_t("");
    m_Feed_typeIsSet = false;
    m_Need_filter_image = false;
    m_Need_filter_imageIsSet = false;
    m_Cookie = utility::conversions::to_string_t("");
    m_CookieIsSet = false;
    m_Proxy = utility::conversions::to_string_t("");
    m_ProxyIsSet = false;
}

GetHomeFeedRequest::~GetHomeFeedRequest()
{
}

void GetHomeFeedRequest::validate()
{
    // TODO: implement validation
}

web::json::value GetHomeFeedRequest::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Feed_typeIsSet)
    {
        val[utility::conversions::to_string_t("feed_type")] = ModelBase::toJson(m_Feed_type);
    }
    if(m_Need_filter_imageIsSet)
    {
        val[utility::conversions::to_string_t("need_filter_image")] = ModelBase::toJson(m_Need_filter_image);
    }
    if(m_CookieIsSet)
    {
        val[utility::conversions::to_string_t("cookie")] = ModelBase::toJson(m_Cookie);
    }
    if(m_ProxyIsSet)
    {
        val[utility::conversions::to_string_t("proxy")] = ModelBase::toJson(m_Proxy);
    }

    return val;
}

bool GetHomeFeedRequest::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("feed_type")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("feed_type"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_feed_type;
            ok &= ModelBase::fromJson(fieldValue, refVal_feed_type);
            setFeedType(refVal_feed_type);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("need_filter_image")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("need_filter_image"));
        if(!fieldValue.is_null())
        {
            bool refVal_need_filter_image;
            ok &= ModelBase::fromJson(fieldValue, refVal_need_filter_image);
            setNeedFilterImage(refVal_need_filter_image);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cookie")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("cookie"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_cookie;
            ok &= ModelBase::fromJson(fieldValue, refVal_cookie);
            setCookie(refVal_cookie);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("proxy")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("proxy"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_proxy;
            ok &= ModelBase::fromJson(fieldValue, refVal_proxy);
            setProxy(refVal_proxy);
        }
    }
    return ok;
}

void GetHomeFeedRequest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_Feed_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("feed_type"), m_Feed_type));
    }
    if(m_Need_filter_imageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("need_filter_image"), m_Need_filter_image));
    }
    if(m_CookieIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("cookie"), m_Cookie));
    }
    if(m_ProxyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("proxy"), m_Proxy));
    }
}

bool GetHomeFeedRequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("feed_type")))
    {
        utility::string_t refVal_feed_type;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("feed_type")), refVal_feed_type );
        setFeedType(refVal_feed_type);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("need_filter_image")))
    {
        bool refVal_need_filter_image;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("need_filter_image")), refVal_need_filter_image );
        setNeedFilterImage(refVal_need_filter_image);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cookie")))
    {
        utility::string_t refVal_cookie;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("cookie")), refVal_cookie );
        setCookie(refVal_cookie);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("proxy")))
    {
        utility::string_t refVal_proxy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("proxy")), refVal_proxy );
        setProxy(refVal_proxy);
    }
    return ok;
}

utility::string_t GetHomeFeedRequest::getFeedType() const
{
    return m_Feed_type;
}

void GetHomeFeedRequest::setFeedType(const utility::string_t& value)
{
    m_Feed_type = value;
    m_Feed_typeIsSet = true;
}

bool GetHomeFeedRequest::feedTypeIsSet() const
{
    return m_Feed_typeIsSet;
}

void GetHomeFeedRequest::unsetFeed_type()
{
    m_Feed_typeIsSet = false;
}
bool GetHomeFeedRequest::isNeedFilterImage() const
{
    return m_Need_filter_image;
}

void GetHomeFeedRequest::setNeedFilterImage(bool value)
{
    m_Need_filter_image = value;
    m_Need_filter_imageIsSet = true;
}

bool GetHomeFeedRequest::needFilterImageIsSet() const
{
    return m_Need_filter_imageIsSet;
}

void GetHomeFeedRequest::unsetNeed_filter_image()
{
    m_Need_filter_imageIsSet = false;
}
utility::string_t GetHomeFeedRequest::getCookie() const
{
    return m_Cookie;
}

void GetHomeFeedRequest::setCookie(const utility::string_t& value)
{
    m_Cookie = value;
    m_CookieIsSet = true;
}

bool GetHomeFeedRequest::cookieIsSet() const
{
    return m_CookieIsSet;
}

void GetHomeFeedRequest::unsetCookie()
{
    m_CookieIsSet = false;
}
utility::string_t GetHomeFeedRequest::getProxy() const
{
    return m_Proxy;
}

void GetHomeFeedRequest::setProxy(const utility::string_t& value)
{
    m_Proxy = value;
    m_ProxyIsSet = true;
}

bool GetHomeFeedRequest::proxyIsSet() const
{
    return m_ProxyIsSet;
}

void GetHomeFeedRequest::unsetProxy()
{
    m_ProxyIsSet = false;
}
}
}
}
}


