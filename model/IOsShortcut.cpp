/**
 * TikHub.io - Your Ultimate Social Media Data & API Marketplace
 * High-performance asynchronous Douyin(抖音) TikTok Xiaohongshu(小红书) Kuaishou(快手) Weibo(微博) Instagram YouTube(油管) Twitter(X) Captcha Solver(验证码解决器) Temp Mail(临时邮箱) API(接口).
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "IOsShortcut.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




IOsShortcut::IOsShortcut()
{
    m_Version = utility::conversions::to_string_t("");
    m_VersionIsSet = false;
    m_Update = utility::conversions::to_string_t("");
    m_UpdateIsSet = false;
    m_Link = utility::conversions::to_string_t("");
    m_LinkIsSet = false;
    m_Link_en = utility::conversions::to_string_t("");
    m_Link_enIsSet = false;
    m_Note = utility::conversions::to_string_t("");
    m_NoteIsSet = false;
    m_Note_en = utility::conversions::to_string_t("");
    m_Note_enIsSet = false;
}

IOsShortcut::~IOsShortcut()
{
}

void IOsShortcut::validate()
{
    // TODO: implement validation
}

web::json::value IOsShortcut::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_VersionIsSet)
    {
        val[utility::conversions::to_string_t("version")] = ModelBase::toJson(m_Version);
    }
    if(m_UpdateIsSet)
    {
        val[utility::conversions::to_string_t("update")] = ModelBase::toJson(m_Update);
    }
    if(m_LinkIsSet)
    {
        val[utility::conversions::to_string_t("link")] = ModelBase::toJson(m_Link);
    }
    if(m_Link_enIsSet)
    {
        val[utility::conversions::to_string_t("link_en")] = ModelBase::toJson(m_Link_en);
    }
    if(m_NoteIsSet)
    {
        val[utility::conversions::to_string_t("note")] = ModelBase::toJson(m_Note);
    }
    if(m_Note_enIsSet)
    {
        val[utility::conversions::to_string_t("note_en")] = ModelBase::toJson(m_Note_en);
    }

    return val;
}

bool IOsShortcut::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("version")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("version"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_version;
            ok &= ModelBase::fromJson(fieldValue, refVal_version);
            setVersion(refVal_version);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("update")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("update"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_update;
            ok &= ModelBase::fromJson(fieldValue, refVal_update);
            setUpdate(refVal_update);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("link")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("link"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_link;
            ok &= ModelBase::fromJson(fieldValue, refVal_link);
            setLink(refVal_link);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("link_en")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("link_en"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_link_en;
            ok &= ModelBase::fromJson(fieldValue, refVal_link_en);
            setLinkEn(refVal_link_en);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("note")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("note"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_note;
            ok &= ModelBase::fromJson(fieldValue, refVal_note);
            setNote(refVal_note);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("note_en")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("note_en"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_note_en;
            ok &= ModelBase::fromJson(fieldValue, refVal_note_en);
            setNoteEn(refVal_note_en);
        }
    }
    return ok;
}

void IOsShortcut::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_VersionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("version"), m_Version));
    }
    if(m_UpdateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("update"), m_Update));
    }
    if(m_LinkIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("link"), m_Link));
    }
    if(m_Link_enIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("link_en"), m_Link_en));
    }
    if(m_NoteIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("note"), m_Note));
    }
    if(m_Note_enIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("note_en"), m_Note_en));
    }
}

bool IOsShortcut::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("version")))
    {
        utility::string_t refVal_version;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("version")), refVal_version );
        setVersion(refVal_version);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("update")))
    {
        utility::string_t refVal_update;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("update")), refVal_update );
        setUpdate(refVal_update);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("link")))
    {
        utility::string_t refVal_link;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("link")), refVal_link );
        setLink(refVal_link);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("link_en")))
    {
        utility::string_t refVal_link_en;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("link_en")), refVal_link_en );
        setLinkEn(refVal_link_en);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("note")))
    {
        utility::string_t refVal_note;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("note")), refVal_note );
        setNote(refVal_note);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("note_en")))
    {
        utility::string_t refVal_note_en;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("note_en")), refVal_note_en );
        setNoteEn(refVal_note_en);
    }
    return ok;
}

utility::string_t IOsShortcut::getVersion() const
{
    return m_Version;
}

void IOsShortcut::setVersion(const utility::string_t& value)
{
    m_Version = value;
    m_VersionIsSet = true;
}

bool IOsShortcut::versionIsSet() const
{
    return m_VersionIsSet;
}

void IOsShortcut::unsetVersion()
{
    m_VersionIsSet = false;
}
utility::string_t IOsShortcut::getUpdate() const
{
    return m_Update;
}

void IOsShortcut::setUpdate(const utility::string_t& value)
{
    m_Update = value;
    m_UpdateIsSet = true;
}

bool IOsShortcut::updateIsSet() const
{
    return m_UpdateIsSet;
}

void IOsShortcut::unsetUpdate()
{
    m_UpdateIsSet = false;
}
utility::string_t IOsShortcut::getLink() const
{
    return m_Link;
}

void IOsShortcut::setLink(const utility::string_t& value)
{
    m_Link = value;
    m_LinkIsSet = true;
}

bool IOsShortcut::linkIsSet() const
{
    return m_LinkIsSet;
}

void IOsShortcut::unsetLink()
{
    m_LinkIsSet = false;
}
utility::string_t IOsShortcut::getLinkEn() const
{
    return m_Link_en;
}

void IOsShortcut::setLinkEn(const utility::string_t& value)
{
    m_Link_en = value;
    m_Link_enIsSet = true;
}

bool IOsShortcut::linkEnIsSet() const
{
    return m_Link_enIsSet;
}

void IOsShortcut::unsetLink_en()
{
    m_Link_enIsSet = false;
}
utility::string_t IOsShortcut::getNote() const
{
    return m_Note;
}

void IOsShortcut::setNote(const utility::string_t& value)
{
    m_Note = value;
    m_NoteIsSet = true;
}

bool IOsShortcut::noteIsSet() const
{
    return m_NoteIsSet;
}

void IOsShortcut::unsetNote()
{
    m_NoteIsSet = false;
}
utility::string_t IOsShortcut::getNoteEn() const
{
    return m_Note_en;
}

void IOsShortcut::setNoteEn(const utility::string_t& value)
{
    m_Note_en = value;
    m_Note_enIsSet = true;
}

bool IOsShortcut::noteEnIsSet() const
{
    return m_Note_enIsSet;
}

void IOsShortcut::unsetNote_en()
{
    m_Note_enIsSet = false;
}
}
}
}
}


