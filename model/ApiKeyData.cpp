/**
 * TikHub.io - Your Ultimate Social Media Data & API Marketplace
 * High-performance asynchronous Douyin(抖音) TikTok Xiaohongshu(小红书) Kuaishou(快手) Weibo(微博) Instagram YouTube(油管) Twitter(X) Captcha Solver(验证码解决器) Temp Mail(临时邮箱) API(接口).
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ApiKeyData.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




ApiKeyData::ApiKeyData()
{
    m_Api_key_name = utility::conversions::to_string_t("");
    m_Api_key_nameIsSet = false;
    m_Api_key_scopesIsSet = false;
    m_Created_at = utility::datetime();
    m_Created_atIsSet = false;
    m_Expires_atIsSet = false;
    m_Api_key_status = 0;
    m_Api_key_statusIsSet = false;
}

ApiKeyData::~ApiKeyData()
{
}

void ApiKeyData::validate()
{
    // TODO: implement validation
}

web::json::value ApiKeyData::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Api_key_nameIsSet)
    {
        val[utility::conversions::to_string_t("api_key_name")] = ModelBase::toJson(m_Api_key_name);
    }
    if(m_Api_key_scopesIsSet)
    {
        val[utility::conversions::to_string_t("api_key_scopes")] = ModelBase::toJson(m_Api_key_scopes);
    }
    if(m_Created_atIsSet)
    {
        val[utility::conversions::to_string_t("created_at")] = ModelBase::toJson(m_Created_at);
    }
    if(m_Expires_atIsSet)
    {
        val[utility::conversions::to_string_t("expires_at")] = ModelBase::toJson(m_Expires_at);
    }
    if(m_Api_key_statusIsSet)
    {
        val[utility::conversions::to_string_t("api_key_status")] = ModelBase::toJson(m_Api_key_status);
    }

    return val;
}

bool ApiKeyData::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("api_key_name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("api_key_name"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_api_key_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_api_key_name);
            setApiKeyName(refVal_api_key_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("api_key_scopes")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("api_key_scopes"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_api_key_scopes;
            ok &= ModelBase::fromJson(fieldValue, refVal_api_key_scopes);
            setApiKeyScopes(refVal_api_key_scopes);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("created_at")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("created_at"));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_created_at;
            ok &= ModelBase::fromJson(fieldValue, refVal_created_at);
            setCreatedAt(refVal_created_at);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("expires_at")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("expires_at"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AnyOfDateTimenull> refVal_expires_at;
            ok &= ModelBase::fromJson(fieldValue, refVal_expires_at);
            setExpiresAt(refVal_expires_at);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("api_key_status")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("api_key_status"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_api_key_status;
            ok &= ModelBase::fromJson(fieldValue, refVal_api_key_status);
            setApiKeyStatus(refVal_api_key_status);
        }
    }
    return ok;
}

void ApiKeyData::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_Api_key_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("api_key_name"), m_Api_key_name));
    }
    if(m_Api_key_scopesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("api_key_scopes"), m_Api_key_scopes));
    }
    if(m_Created_atIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("created_at"), m_Created_at));
    }
    if(m_Expires_atIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("expires_at"), m_Expires_at));
    }
    if(m_Api_key_statusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("api_key_status"), m_Api_key_status));
    }
}

bool ApiKeyData::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("api_key_name")))
    {
        utility::string_t refVal_api_key_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("api_key_name")), refVal_api_key_name );
        setApiKeyName(refVal_api_key_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("api_key_scopes")))
    {
        std::vector<utility::string_t> refVal_api_key_scopes;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("api_key_scopes")), refVal_api_key_scopes );
        setApiKeyScopes(refVal_api_key_scopes);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("created_at")))
    {
        utility::datetime refVal_created_at;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("created_at")), refVal_created_at );
        setCreatedAt(refVal_created_at);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("expires_at")))
    {
        std::shared_ptr<AnyOfDateTimenull> refVal_expires_at;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("expires_at")), refVal_expires_at );
        setExpiresAt(refVal_expires_at);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("api_key_status")))
    {
        int32_t refVal_api_key_status;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("api_key_status")), refVal_api_key_status );
        setApiKeyStatus(refVal_api_key_status);
    }
    return ok;
}

utility::string_t ApiKeyData::getApiKeyName() const
{
    return m_Api_key_name;
}

void ApiKeyData::setApiKeyName(const utility::string_t& value)
{
    m_Api_key_name = value;
    m_Api_key_nameIsSet = true;
}

bool ApiKeyData::apiKeyNameIsSet() const
{
    return m_Api_key_nameIsSet;
}

void ApiKeyData::unsetApi_key_name()
{
    m_Api_key_nameIsSet = false;
}
std::vector<utility::string_t>& ApiKeyData::getApiKeyScopes()
{
    return m_Api_key_scopes;
}

void ApiKeyData::setApiKeyScopes(const std::vector<utility::string_t>& value)
{
    m_Api_key_scopes = value;
    m_Api_key_scopesIsSet = true;
}

bool ApiKeyData::apiKeyScopesIsSet() const
{
    return m_Api_key_scopesIsSet;
}

void ApiKeyData::unsetApi_key_scopes()
{
    m_Api_key_scopesIsSet = false;
}
utility::datetime ApiKeyData::getCreatedAt() const
{
    return m_Created_at;
}

void ApiKeyData::setCreatedAt(const utility::datetime& value)
{
    m_Created_at = value;
    m_Created_atIsSet = true;
}

bool ApiKeyData::createdAtIsSet() const
{
    return m_Created_atIsSet;
}

void ApiKeyData::unsetCreated_at()
{
    m_Created_atIsSet = false;
}
std::shared_ptr<AnyOfDateTimenull> ApiKeyData::getExpiresAt() const
{
    return m_Expires_at;
}

void ApiKeyData::setExpiresAt(const std::shared_ptr<AnyOfDateTimenull>& value)
{
    m_Expires_at = value;
    m_Expires_atIsSet = true;
}

bool ApiKeyData::expiresAtIsSet() const
{
    return m_Expires_atIsSet;
}

void ApiKeyData::unsetExpires_at()
{
    m_Expires_atIsSet = false;
}
int32_t ApiKeyData::getApiKeyStatus() const
{
    return m_Api_key_status;
}

void ApiKeyData::setApiKeyStatus(int32_t value)
{
    m_Api_key_status = value;
    m_Api_key_statusIsSet = true;
}

bool ApiKeyData::apiKeyStatusIsSet() const
{
    return m_Api_key_statusIsSet;
}

void ApiKeyData::unsetApi_key_status()
{
    m_Api_key_statusIsSet = false;
}
}
}
}
}


