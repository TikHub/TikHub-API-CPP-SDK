/**
 * TikHub.io - Your Ultimate Social Media Data & API Marketplace
 * High-performance asynchronous Douyin(抖音) TikTok Xiaohongshu(小红书) Kuaishou(快手) Weibo(微博) Instagram YouTube(油管) Twitter(X) Captcha Solver(验证码解决器) Temp Mail(临时邮箱) API(接口).
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ChallengePostRequest.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




ChallengePostRequest::ChallengePostRequest()
{
    m_Challenge_id = utility::conversions::to_string_t("");
    m_Challenge_idIsSet = false;
    m_Sort_type = 0;
    m_Sort_typeIsSet = false;
    m_Cursor = 0;
    m_CursorIsSet = false;
    m_Count = 0;
    m_CountIsSet = false;
    m_Cookie = utility::conversions::to_string_t("");
    m_CookieIsSet = false;
}

ChallengePostRequest::~ChallengePostRequest()
{
}

void ChallengePostRequest::validate()
{
    // TODO: implement validation
}

web::json::value ChallengePostRequest::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Challenge_idIsSet)
    {
        val[utility::conversions::to_string_t("challenge_id")] = ModelBase::toJson(m_Challenge_id);
    }
    if(m_Sort_typeIsSet)
    {
        val[utility::conversions::to_string_t("sort_type")] = ModelBase::toJson(m_Sort_type);
    }
    if(m_CursorIsSet)
    {
        val[utility::conversions::to_string_t("cursor")] = ModelBase::toJson(m_Cursor);
    }
    if(m_CountIsSet)
    {
        val[utility::conversions::to_string_t("count")] = ModelBase::toJson(m_Count);
    }
    if(m_CookieIsSet)
    {
        val[utility::conversions::to_string_t("cookie")] = ModelBase::toJson(m_Cookie);
    }

    return val;
}

bool ChallengePostRequest::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("challenge_id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("challenge_id"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_challenge_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_challenge_id);
            setChallengeId(refVal_challenge_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sort_type")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("sort_type"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_sort_type;
            ok &= ModelBase::fromJson(fieldValue, refVal_sort_type);
            setSortType(refVal_sort_type);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cursor")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("cursor"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_cursor;
            ok &= ModelBase::fromJson(fieldValue, refVal_cursor);
            setCursor(refVal_cursor);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("count")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("count"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_count;
            ok &= ModelBase::fromJson(fieldValue, refVal_count);
            setCount(refVal_count);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cookie")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("cookie"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_cookie;
            ok &= ModelBase::fromJson(fieldValue, refVal_cookie);
            setCookie(refVal_cookie);
        }
    }
    return ok;
}

void ChallengePostRequest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_Challenge_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("challenge_id"), m_Challenge_id));
    }
    if(m_Sort_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sort_type"), m_Sort_type));
    }
    if(m_CursorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("cursor"), m_Cursor));
    }
    if(m_CountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("count"), m_Count));
    }
    if(m_CookieIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("cookie"), m_Cookie));
    }
}

bool ChallengePostRequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("challenge_id")))
    {
        utility::string_t refVal_challenge_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("challenge_id")), refVal_challenge_id );
        setChallengeId(refVal_challenge_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sort_type")))
    {
        int32_t refVal_sort_type;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("sort_type")), refVal_sort_type );
        setSortType(refVal_sort_type);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cursor")))
    {
        int32_t refVal_cursor;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("cursor")), refVal_cursor );
        setCursor(refVal_cursor);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("count")))
    {
        int32_t refVal_count;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("count")), refVal_count );
        setCount(refVal_count);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cookie")))
    {
        utility::string_t refVal_cookie;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("cookie")), refVal_cookie );
        setCookie(refVal_cookie);
    }
    return ok;
}

utility::string_t ChallengePostRequest::getChallengeId() const
{
    return m_Challenge_id;
}

void ChallengePostRequest::setChallengeId(const utility::string_t& value)
{
    m_Challenge_id = value;
    m_Challenge_idIsSet = true;
}

bool ChallengePostRequest::challengeIdIsSet() const
{
    return m_Challenge_idIsSet;
}

void ChallengePostRequest::unsetChallenge_id()
{
    m_Challenge_idIsSet = false;
}
int32_t ChallengePostRequest::getSortType() const
{
    return m_Sort_type;
}

void ChallengePostRequest::setSortType(int32_t value)
{
    m_Sort_type = value;
    m_Sort_typeIsSet = true;
}

bool ChallengePostRequest::sortTypeIsSet() const
{
    return m_Sort_typeIsSet;
}

void ChallengePostRequest::unsetSort_type()
{
    m_Sort_typeIsSet = false;
}
int32_t ChallengePostRequest::getCursor() const
{
    return m_Cursor;
}

void ChallengePostRequest::setCursor(int32_t value)
{
    m_Cursor = value;
    m_CursorIsSet = true;
}

bool ChallengePostRequest::cursorIsSet() const
{
    return m_CursorIsSet;
}

void ChallengePostRequest::unsetCursor()
{
    m_CursorIsSet = false;
}
int32_t ChallengePostRequest::getCount() const
{
    return m_Count;
}

void ChallengePostRequest::setCount(int32_t value)
{
    m_Count = value;
    m_CountIsSet = true;
}

bool ChallengePostRequest::countIsSet() const
{
    return m_CountIsSet;
}

void ChallengePostRequest::unsetCount()
{
    m_CountIsSet = false;
}
utility::string_t ChallengePostRequest::getCookie() const
{
    return m_Cookie;
}

void ChallengePostRequest::setCookie(const utility::string_t& value)
{
    m_Cookie = value;
    m_CookieIsSet = true;
}

bool ChallengePostRequest::cookieIsSet() const
{
    return m_CookieIsSet;
}

void ChallengePostRequest::unsetCookie()
{
    m_CookieIsSet = false;
}
}
}
}
}


