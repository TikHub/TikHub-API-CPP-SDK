/**
 * TikHub.io - Your Ultimate Social Media Data & API Marketplace
 * High-performance asynchronous Douyin(抖音) TikTok Xiaohongshu(小红书) Kuaishou(快手) Weibo(微博) Instagram YouTube(油管) Twitter(X) Captcha Solver(验证码解决器) Temp Mail(临时邮箱) API(接口).
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * TikTokAppEncryptRequest.h
 *
 * TikTok_APP_Encrypt_Request
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_TikTokAppEncryptRequest_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_TikTokAppEncryptRequest_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>
#include "Object.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// TikTok_APP_Encrypt_Request
/// </summary>
class  TikTokAppEncryptRequest
    : public ModelBase
{
public:
    TikTokAppEncryptRequest();
    virtual ~TikTokAppEncryptRequest();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// TikTokAppEncryptRequest members

    /// <summary>
    /// Url，需要加密的URL/URL to be encrypted
    /// </summary>
    utility::string_t getUrl() const;
    bool urlIsSet() const;
    void unsetUrl();

    void setUrl(const utility::string_t& value);

    /// <summary>
    /// Data，如果有POST请求，请填写POST请求的数据参与加密计算/If there is a POST request, please fill in the data of the POST request to participate in the encryption calculation
    /// </summary>
    utility::string_t getData() const;
    bool dataIsSet() const;
    void unsetData();

    void setData(const utility::string_t& value);

    /// <summary>
    /// Device Info，设备信息，可选参数，如果不填写则使用默认设备信息/Device information, optional parameter, if not filled in, the default device information is used
    /// </summary>
    std::shared_ptr<Object> getDeviceInfo() const;
    bool deviceInfoIsSet() const;
    void unsetDevice_info();

    void setDeviceInfo(const std::shared_ptr<Object>& value);


protected:
    utility::string_t m_Url;
    bool m_UrlIsSet;
    utility::string_t m_Data;
    bool m_DataIsSet;
    std::shared_ptr<Object> m_Device_info;
    bool m_Device_infoIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_TikTokAppEncryptRequest_H_ */
