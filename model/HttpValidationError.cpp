/**
 * TikHub.io - Your Ultimate Social Media Data & API Marketplace
 * High-performance asynchronous Douyin(抖音) TikTok Xiaohongshu(小红书) Kuaishou(快手) Weibo(微博) Instagram YouTube(油管) Twitter(X) Captcha Solver(验证码解决器) Temp Mail(临时邮箱) API(接口).
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "HttpValidationError.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




HttpValidationError::HttpValidationError()
{
    m_DetailIsSet = false;
}

HttpValidationError::~HttpValidationError()
{
}

void HttpValidationError::validate()
{
    // TODO: implement validation
}

web::json::value HttpValidationError::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_DetailIsSet)
    {
        val[utility::conversions::to_string_t("detail")] = ModelBase::toJson(m_Detail);
    }

    return val;
}

bool HttpValidationError::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("detail")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("detail"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<ValidationError>> refVal_detail;
            ok &= ModelBase::fromJson(fieldValue, refVal_detail);
            setDetail(refVal_detail);
        }
    }
    return ok;
}

void HttpValidationError::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_DetailIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("detail"), m_Detail));
    }
}

bool HttpValidationError::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("detail")))
    {
        std::vector<std::shared_ptr<ValidationError>> refVal_detail;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("detail")), refVal_detail );
        setDetail(refVal_detail);
    }
    return ok;
}

std::vector<std::shared_ptr<ValidationError>>& HttpValidationError::getDetail()
{
    return m_Detail;
}

void HttpValidationError::setDetail(const std::vector<std::shared_ptr<ValidationError>>& value)
{
    m_Detail = value;
    m_DetailIsSet = true;
}

bool HttpValidationError::detailIsSet() const
{
    return m_DetailIsSet;
}

void HttpValidationError::unsetDetail()
{
    m_DetailIsSet = false;
}
}
}
}
}


