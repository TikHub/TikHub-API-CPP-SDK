/**
 * TikHub.io - Your Ultimate Social Media Data & API Marketplace
 * High-performance asynchronous Douyin(抖音) TikTok Xiaohongshu(小红书) Kuaishou(快手) Weibo(微博) Instagram YouTube(油管) Twitter(X) Captcha Solver(验证码解决器) Temp Mail(临时邮箱) API(接口).
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




BodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost::BodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost()
{
    m_App_id = utility::conversions::to_string_t("");
    m_App_idIsSet = false;
    m_Url = utility::conversions::to_string_t("");
    m_UrlIsSet = false;
    m_ProxyIsSet = false;
}

BodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost::~BodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost()
{
}

void BodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost::validate()
{
    // TODO: implement validation
}

web::json::value BodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_App_idIsSet)
    {
        val[utility::conversions::to_string_t("app_id")] = ModelBase::toJson(m_App_id);
    }
    if(m_UrlIsSet)
    {
        val[utility::conversions::to_string_t("url")] = ModelBase::toJson(m_Url);
    }
    if(m_ProxyIsSet)
    {
        val[utility::conversions::to_string_t("proxy")] = ModelBase::toJson(m_Proxy);
    }

    return val;
}

bool BodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("app_id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("app_id"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_app_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_app_id);
            setAppId(refVal_app_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("url")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("url"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_url;
            ok &= ModelBase::fromJson(fieldValue, refVal_url);
            setUrl(refVal_url);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("proxy")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("proxy"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Object> refVal_proxy;
            ok &= ModelBase::fromJson(fieldValue, refVal_proxy);
            setProxy(refVal_proxy);
        }
    }
    return ok;
}

void BodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_App_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("app_id"), m_App_id));
    }
    if(m_UrlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("url"), m_Url));
    }
    if(m_ProxyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("proxy"), m_Proxy));
    }
}

bool BodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("app_id")))
    {
        utility::string_t refVal_app_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("app_id")), refVal_app_id );
        setAppId(refVal_app_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("url")))
    {
        utility::string_t refVal_url;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("url")), refVal_url );
        setUrl(refVal_url);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("proxy")))
    {
        std::shared_ptr<Object> refVal_proxy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("proxy")), refVal_proxy );
        setProxy(refVal_proxy);
    }
    return ok;
}

utility::string_t BodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost::getAppId() const
{
    return m_App_id;
}

void BodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost::setAppId(const utility::string_t& value)
{
    m_App_id = value;
    m_App_idIsSet = true;
}

bool BodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost::appIdIsSet() const
{
    return m_App_idIsSet;
}

void BodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost::unsetApp_id()
{
    m_App_idIsSet = false;
}
utility::string_t BodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost::getUrl() const
{
    return m_Url;
}

void BodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost::setUrl(const utility::string_t& value)
{
    m_Url = value;
    m_UrlIsSet = true;
}

bool BodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost::urlIsSet() const
{
    return m_UrlIsSet;
}

void BodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost::unsetUrl()
{
    m_UrlIsSet = false;
}
std::shared_ptr<Object> BodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost::getProxy() const
{
    return m_Proxy;
}

void BodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost::setProxy(const std::shared_ptr<Object>& value)
{
    m_Proxy = value;
    m_ProxyIsSet = true;
}

bool BodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost::proxyIsSet() const
{
    return m_ProxyIsSet;
}

void BodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost::unsetProxy()
{
    m_ProxyIsSet = false;
}
}
}
}
}


