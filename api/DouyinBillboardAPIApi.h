/**
 * TikHub.io - Your Ultimate Social Media Data & API Marketplace
 * High-performance asynchronous Douyin(抖音) TikTok Xiaohongshu(小红书) Kuaishou(快手) Weibo(微博) Instagram YouTube(油管) Twitter(X) Captcha Solver(验证码解决器) Temp Mail(临时邮箱) API(接口).
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * DouyinBillboardAPIApi.h
 *
 * 
 */

#ifndef IO_TIKHUB_CLIENT_API_DouyinBillboardAPIApi_H_
#define IO_TIKHUB_CLIENT_API_DouyinBillboardAPIApi_H_


#include "../ApiClient.h"

#include "BodyFetchHotAccountListApiV1DouyinBillboardFetchHotAccountListPost.h"
#include "BodyFetchHotCalendarListApiV1DouyinBillboardFetchHotCalendarListPost.h"
#include "BodyFetchHotTotalHighFanListApiV1DouyinBillboardFetchHotTotalHighFanListPost.h"
#include "BodyFetchHotTotalHighLikeListApiV1DouyinBillboardFetchHotTotalHighLikeListPost.h"
#include "BodyFetchHotTotalHighPlayListApiV1DouyinBillboardFetchHotTotalHighPlayListPost.h"
#include "BodyFetchHotTotalHighSearchListApiV1DouyinBillboardFetchHotTotalHighSearchListPost.h"
#include "BodyFetchHotTotalHighTopicListApiV1DouyinBillboardFetchHotTotalHighTopicListPost.h"
#include "BodyFetchHotTotalHotWordListApiV1DouyinBillboardFetchHotTotalHotWordListPost.h"
#include "BodyFetchHotTotalLowFanListApiV1DouyinBillboardFetchHotTotalLowFanListPost.h"
#include "BodyFetchHotTotalSearchListApiV1DouyinBillboardFetchHotTotalSearchListPost.h"
#include "BodyFetchHotTotalTopicListApiV1DouyinBillboardFetchHotTotalTopicListPost.h"
#include "BodyFetchHotTotalVideoListApiV1DouyinBillboardFetchHotTotalVideoListPost.h"
#include "HttpValidationError.h"
#include "ResponseModel.h"
#include "UNKNOWN_BASE_TYPE.h"
#include <cpprest/details/basic_types.h>


#include <boost/optional.hpp>

namespace io {
namespace tikhub {
namespace client {
namespace api {

using namespace org::openapitools::client::model;



class  DouyinBillboardAPIApi 
{
public:

    explicit DouyinBillboardAPIApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~DouyinBillboardAPIApi();

    /// <summary>
    /// 获取中国城市列表
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取城市列表 ### 参数: - 无 ### 返回: - 中国城市列表  # [English] ### Purpose: - Get city list ### Parameters: - None ### Return: - Chinese city list
    /// </remarks>
    pplx::task<std::shared_ptr<ResponseModel>> fetchCityListApiV1DouyinBillboardFetchCityListGet(
    ) const;
    /// <summary>
    /// 获取中国城市列表
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取城市列表 ### 参数: - 无 ### 返回: - 中国城市列表  # [English] ### Purpose: - Get city list ### Parameters: - None ### Return: - Chinese city list
    /// </remarks>
    pplx::task<std::shared_ptr<ResponseModel>> fetchCityListApiV1DouyinBillboardFetchCityListGet_0(
    ) const;
    /// <summary>
    /// 获取垂类内容标签
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取垂类内容标签 ### 参数: - 无 ### 返回: - 垂类内容标签 ### 注意: - 该接口用于获取垂类内容标签，用于query_tag参数构建 ### 示例: 已知顶级垂类内容标签 &#x60;美食&#x60;，它的顶级垂类id为 &#x60;628&#x60;；&#x60;美食&#x60; 的子垂类标签 &#x60;品酒教学&#x60;，它的子垂类id为 &#x60;62802&#x60;。 那么构建标签查询参数为 &#x60;{\&quot;value\&quot;: 628, \&quot;children\&quot;: [{\&quot;value\&quot;: 62808}]}&#x60;  如果需要多个子垂类标签，所有的美食子垂类标签为 &#x60;{\&quot;value\&quot;:628,\&quot;children\&quot;:[{\&quot;value\&quot;:62808},{\&quot;value\&quot;:62804},{\&quot;value\&quot;:62806},{\&quot;value\&quot;:62803},{\&quot;value\&quot;:62802},{\&quot;value\&quot;:62801},{\&quot;value\&quot;:62811},{\&quot;value\&quot;:62807},{\&quot;value\&quot;:62805},{\&quot;value\&quot;:62810}]}&#x60;  # [English] ### Purpose: - Get vertical content tags ### Parameters: - None ### Return: - Vertical content tags ### Note: - This interface is used to obtain vertical content tags, used to construct the query_tag parameter ### Example: Given the top-level vertical content tag &#x60;Food&#x60;, its top-level vertical id is &#x60;628&#x60;; &#x60;Food&#x60;&#39;s sub-vertical tag &#x60;Wine Tasting&#x60;, its sub-vertical id is &#x60;62802&#x60;. Then the constructed tag query parameter is &#x60;{\&quot;value\&quot;: 628, \&quot;children\&quot;: [{\&quot;value\&quot;: 62808}]}&#x60;  If you need multiple sub-vertical tags, all food sub-vertical tags are &#x60;{\&quot;value\&quot;:628,\&quot;children\&quot;:[{\&quot;value\&quot;:62808},{\&quot;value\&quot;:62804},{\&quot;value\&quot;:62806},{\&quot;value\&quot;:62803},{\&quot;value\&quot;:62802},{\&quot;value\&quot;:62801},{\&quot;value\&quot;:62811},{\&quot;value\&quot;:62807},{\&quot;value\&quot;:62805},{\&quot;value\&quot;:62810}]}&#x60;
    /// </remarks>
    pplx::task<std::shared_ptr<ResponseModel>> fetchContentTagApiV1DouyinBillboardFetchContentTagGet(
    ) const;
    /// <summary>
    /// 获取垂类内容标签
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取垂类内容标签 ### 参数: - 无 ### 返回: - 垂类内容标签 ### 注意: - 该接口用于获取垂类内容标签，用于query_tag参数构建 ### 示例: 已知顶级垂类内容标签 &#x60;美食&#x60;，它的顶级垂类id为 &#x60;628&#x60;；&#x60;美食&#x60; 的子垂类标签 &#x60;品酒教学&#x60;，它的子垂类id为 &#x60;62802&#x60;。 那么构建标签查询参数为 &#x60;{\&quot;value\&quot;: 628, \&quot;children\&quot;: [{\&quot;value\&quot;: 62808}]}&#x60;  如果需要多个子垂类标签，所有的美食子垂类标签为 &#x60;{\&quot;value\&quot;:628,\&quot;children\&quot;:[{\&quot;value\&quot;:62808},{\&quot;value\&quot;:62804},{\&quot;value\&quot;:62806},{\&quot;value\&quot;:62803},{\&quot;value\&quot;:62802},{\&quot;value\&quot;:62801},{\&quot;value\&quot;:62811},{\&quot;value\&quot;:62807},{\&quot;value\&quot;:62805},{\&quot;value\&quot;:62810}]}&#x60;  # [English] ### Purpose: - Get vertical content tags ### Parameters: - None ### Return: - Vertical content tags ### Note: - This interface is used to obtain vertical content tags, used to construct the query_tag parameter ### Example: Given the top-level vertical content tag &#x60;Food&#x60;, its top-level vertical id is &#x60;628&#x60;; &#x60;Food&#x60;&#39;s sub-vertical tag &#x60;Wine Tasting&#x60;, its sub-vertical id is &#x60;62802&#x60;. Then the constructed tag query parameter is &#x60;{\&quot;value\&quot;: 628, \&quot;children\&quot;: [{\&quot;value\&quot;: 62808}]}&#x60;  If you need multiple sub-vertical tags, all food sub-vertical tags are &#x60;{\&quot;value\&quot;:628,\&quot;children\&quot;:[{\&quot;value\&quot;:62808},{\&quot;value\&quot;:62804},{\&quot;value\&quot;:62806},{\&quot;value\&quot;:62803},{\&quot;value\&quot;:62802},{\&quot;value\&quot;:62801},{\&quot;value\&quot;:62811},{\&quot;value\&quot;:62807},{\&quot;value\&quot;:62805},{\&quot;value\&quot;:62810}]}&#x60;
    /// </remarks>
    pplx::task<std::shared_ptr<ResponseModel>> fetchContentTagApiV1DouyinBillboardFetchContentTagGet_0(
    ) const;
    /// <summary>
    /// 获取粉丝兴趣作者 20个用户
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取粉丝兴趣作者 20个用户 ### 参数: - sec_uid: 用户sec_id ### 返回: - 粉丝兴趣作者 20个用户  # [English] ### Purpose: - Get the fan interest author 20 users ### Parameters: - sec_uid: User sec_id ### Return: - Fan interest author 20 users
    /// </remarks>
    /// <param name="secUid">用户sec_id</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchHotAccountFansInterestAccountListApiV1DouyinBillboardFetchHotAccountFansInterestAccountListGet(
        utility::string_t secUid
    ) const;
    /// <summary>
    /// 获取粉丝兴趣作者 20个用户
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取粉丝兴趣作者 20个用户 ### 参数: - sec_uid: 用户sec_id ### 返回: - 粉丝兴趣作者 20个用户  # [English] ### Purpose: - Get the fan interest author 20 users ### Parameters: - sec_uid: User sec_id ### Return: - Fan interest author 20 users
    /// </remarks>
    /// <param name="secUid">用户sec_id</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchHotAccountFansInterestAccountListApiV1DouyinBillboardFetchHotAccountFansInterestAccountListGet_0(
        utility::string_t secUid
    ) const;
    /// <summary>
    /// 获取粉丝近3天搜索词 10个搜索词
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取粉丝近3天搜索词 10个搜索词 ### 参数: - sec_uid: 用户sec_id ### 返回: - 粉丝近3天搜索词 10个搜索词  # [English] ### Purpose: - Get the fan interest search term in the last 3 days 10 search terms ### Parameters: - sec_uid: User sec_id ### Return: - Fan interest search term in the last 3 days 10 search terms
    /// </remarks>
    /// <param name="secUid">用户sec_id</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchHotAccountFansInterestSearchListApiV1DouyinBillboardFetchHotAccountFansInterestSearchListGet(
        utility::string_t secUid
    ) const;
    /// <summary>
    /// 获取粉丝近3天搜索词 10个搜索词
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取粉丝近3天搜索词 10个搜索词 ### 参数: - sec_uid: 用户sec_id ### 返回: - 粉丝近3天搜索词 10个搜索词  # [English] ### Purpose: - Get the fan interest search term in the last 3 days 10 search terms ### Parameters: - sec_uid: User sec_id ### Return: - Fan interest search term in the last 3 days 10 search terms
    /// </remarks>
    /// <param name="secUid">用户sec_id</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchHotAccountFansInterestSearchListApiV1DouyinBillboardFetchHotAccountFansInterestSearchListGet_0(
        utility::string_t secUid
    ) const;
    /// <summary>
    /// 获取粉丝近3天感兴趣的话题 10个话题
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取粉丝近3天感兴趣的话题 10个话题 ### 参数: - sec_uid: 用户sec_id ### 返回: - 粉丝近3天感兴趣的话题 10个话题  # [English] ### Purpose: - Get the fan interest topic in the last 3 days 10 topics ### Parameters: - sec_uid: User sec_id ### Return: - Fan interest topic in the last 3 days 10 topics
    /// </remarks>
    /// <param name="secUid">用户sec_id</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchHotAccountFansInterestTopicListApiV1DouyinBillboardFetchHotAccountFansInterestTopicListGet(
        utility::string_t secUid
    ) const;
    /// <summary>
    /// 获取粉丝近3天感兴趣的话题 10个话题
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取粉丝近3天感兴趣的话题 10个话题 ### 参数: - sec_uid: 用户sec_id ### 返回: - 粉丝近3天感兴趣的话题 10个话题  # [English] ### Purpose: - Get the fan interest topic in the last 3 days 10 topics ### Parameters: - sec_uid: User sec_id ### Return: - Fan interest topic in the last 3 days 10 topics
    /// </remarks>
    /// <param name="secUid">用户sec_id</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchHotAccountFansInterestTopicListApiV1DouyinBillboardFetchHotAccountFansInterestTopicListGet_0(
        utility::string_t secUid
    ) const;
    /// <summary>
    /// 获取粉丝画像
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取粉丝画像 ### 参数: - sec_uid: 用户sec_id - option: 选项，1 手机价格分布 2 性别分布 3 年龄分布 4 地域分布-省份 5 地域分布-城市 6 城市等级 7 手机品牌分布 8 兴趣标签分析 百分比 ### 返回: - 粉丝画像  # [English] ### Purpose: - Get the fan portrait ### Parameters: - sec_uid: User sec_id - option: Option     - 1 Mobile price     - 2 Gender distribution     - 3 Age distribution     - 4 Regional distribution - province     - 5 Regional distribution - city     - 6 City level     - 7 Mobile brand distribution     - 8 Interest tag analysis percentage ### Return: - Fan portrait
    /// </remarks>
    /// <param name="secUid">用户sec_id</param>
    /// <param name="option">选项，1 手机价格分布 2 性别分布 3 年龄分布 4 地域分布-省份 5 地域分布-城市 6 城市等级 7 手机品牌分布 8 兴趣标签分析 百分比</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchHotAccountFansPortraitListApiV1DouyinBillboardFetchHotAccountFansPortraitListGet(
        utility::string_t secUid,
        utility::string_t option
    ) const;
    /// <summary>
    /// 获取粉丝画像
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取粉丝画像 ### 参数: - sec_uid: 用户sec_id - option: 选项，1 手机价格分布 2 性别分布 3 年龄分布 4 地域分布-省份 5 地域分布-城市 6 城市等级 7 手机品牌分布 8 兴趣标签分析 百分比 ### 返回: - 粉丝画像  # [English] ### Purpose: - Get the fan portrait ### Parameters: - sec_uid: User sec_id - option: Option     - 1 Mobile price     - 2 Gender distribution     - 3 Age distribution     - 4 Regional distribution - province     - 5 Regional distribution - city     - 6 City level     - 7 Mobile brand distribution     - 8 Interest tag analysis percentage ### Return: - Fan portrait
    /// </remarks>
    /// <param name="secUid">用户sec_id</param>
    /// <param name="option">选项，1 手机价格分布 2 性别分布 3 年龄分布 4 地域分布-省份 5 地域分布-城市 6 城市等级 7 手机品牌分布 8 兴趣标签分析 百分比</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchHotAccountFansPortraitListApiV1DouyinBillboardFetchHotAccountFansPortraitListGet_0(
        utility::string_t secUid,
        utility::string_t option
    ) const;
    /// <summary>
    /// 获取账号作品分析-上周
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取账号作品分析 ### 参数: - sec_uid: 用户sec_id - day: 天数，默认7天 ### 返回: - 账号作品分析  # [English] ### Purpose: - Get the account work analysis ### Parameters: - sec_uid: User sec_id - day: Number of days, default 7 days ### Return: - Account work analysis
    /// </remarks>
    /// <param name="secUid">用户sec_id</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchHotAccountItemAnalysisListApiV1DouyinBillboardFetchHotAccountItemAnalysisListGet(
        utility::string_t secUid
    ) const;
    /// <summary>
    /// 获取账号作品分析-上周
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取账号作品分析 ### 参数: - sec_uid: 用户sec_id - day: 天数，默认7天 ### 返回: - 账号作品分析  # [English] ### Purpose: - Get the account work analysis ### Parameters: - sec_uid: User sec_id - day: Number of days, default 7 days ### Return: - Account work analysis
    /// </remarks>
    /// <param name="secUid">用户sec_id</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchHotAccountItemAnalysisListApiV1DouyinBillboardFetchHotAccountItemAnalysisListGet_0(
        utility::string_t secUid
    ) const;
    /// <summary>
    /// 获取热门账号
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取热门账号 ### 参数: - date_window: 时间窗口，格式 小时，默认24小时 - page_num: 页码，默认1 - page_size: 每页数量，默认20 - query_tag: 子级垂类标签，空则为全部，多个标签需传入 {\&quot;value\&quot;: \&quot;{顶级垂类标签id}\&quot;, \&quot;children\&quot;: [     {\&quot;value\&quot;: \&quot;{子级垂类标签id}\&quot;},     {\&quot;value\&quot;: \&quot;{子级垂类标签id}\&quot;} ]} ### 返回: - 热门账号  # [English] ### Purpose: - Get the hot account ### Parameters: - date_window: Time window, format hour, default 24 hours - page_num: Page number, default 1 - page_size: Number of items per page, default 20 - query_tag: Sub-level vertical category tag, empty for all, multiple tags need to be passed in {\&quot;value\&quot;: \&quot;{top-level vertical category id}\&quot;, \&quot;children\&quot;: [     {\&quot;value\&quot;: \&quot;{sub-level vertical category id}\&quot;},     {\&quot;value\&quot;: \&quot;{sub-level vertical category id}\&quot;} ]} ### Return: - Hot account
    /// </remarks>
    /// <param name="uNKNOWNBASETYPE"> (optional)</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchHotAccountListApiV1DouyinBillboardFetchHotAccountListPost(
        boost::optional<std::shared_ptr<UNKNOWN_BASE_TYPE>> uNKNOWNBASETYPE
    ) const;
    /// <summary>
    /// 获取热门账号
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取热门账号 ### 参数: - date_window: 时间窗口，格式 小时，默认24小时 - page_num: 页码，默认1 - page_size: 每页数量，默认20 - query_tag: 子级垂类标签，空则为全部，多个标签需传入 {\&quot;value\&quot;: \&quot;{顶级垂类标签id}\&quot;, \&quot;children\&quot;: [     {\&quot;value\&quot;: \&quot;{子级垂类标签id}\&quot;},     {\&quot;value\&quot;: \&quot;{子级垂类标签id}\&quot;} ]} ### 返回: - 热门账号  # [English] ### Purpose: - Get the hot account ### Parameters: - date_window: Time window, format hour, default 24 hours - page_num: Page number, default 1 - page_size: Number of items per page, default 20 - query_tag: Sub-level vertical category tag, empty for all, multiple tags need to be passed in {\&quot;value\&quot;: \&quot;{top-level vertical category id}\&quot;, \&quot;children\&quot;: [     {\&quot;value\&quot;: \&quot;{sub-level vertical category id}\&quot;},     {\&quot;value\&quot;: \&quot;{sub-level vertical category id}\&quot;} ]} ### Return: - Hot account
    /// </remarks>
    /// <param name="uNKNOWNBASETYPE"> (optional)</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchHotAccountListApiV1DouyinBillboardFetchHotAccountListPost_0(
        boost::optional<std::shared_ptr<UNKNOWN_BASE_TYPE>> uNKNOWNBASETYPE
    ) const;
    /// <summary>
    /// 获取搜索用户名或抖音号
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取搜索用户名或抖音号 ### 参数: - keyword: 搜索的用户名或抖音号 - cursor: 游标，默认空 ### 返回: - 搜索结果  # [English] ### Purpose: - Get the search username or Douyin number ### Parameters: - keyword: Search username or Douyin number - cursor: Cursor, default empty ### Return: - Search result
    /// </remarks>
    /// <param name="keyword">搜索的用户名或抖音号</param>
    /// <param name="cursor">游标，默认空</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchHotAccountSearchListApiV1DouyinBillboardFetchHotAccountSearchListGet(
        utility::string_t keyword,
        int32_t cursor
    ) const;
    /// <summary>
    /// 获取搜索用户名或抖音号
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取搜索用户名或抖音号 ### 参数: - keyword: 搜索的用户名或抖音号 - cursor: 游标，默认空 ### 返回: - 搜索结果  # [English] ### Purpose: - Get the search username or Douyin number ### Parameters: - keyword: Search username or Douyin number - cursor: Cursor, default empty ### Return: - Search result
    /// </remarks>
    /// <param name="keyword">搜索的用户名或抖音号</param>
    /// <param name="cursor">游标，默认空</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchHotAccountSearchListApiV1DouyinBillboardFetchHotAccountSearchListGet_0(
        utility::string_t keyword,
        int32_t cursor
    ) const;
    /// <summary>
    /// 获取账号粉丝数据趋势
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取账号粉丝数据趋势 ### 参数: - sec_uid: 用户sec_id - option: 选项，2 新增点赞量 3 新增作品量 4 新增评论量 5 新增分享量 - date_window: 时间窗口，1 按小时 2 按天 ### 返回: - 账号粉丝数据趋势  # [English] ### Purpose: - Get the account fan data trend ### Parameters: - sec_uid: User sec_id - option: Option, 2 New like 3 New work 4 New comment 5 New share - date_window: Time window, 1 by hour 2 by day ### Return: - Account fan data trend
    /// </remarks>
    /// <param name="secUid">用户sec_id</param>
    /// <param name="option">选项，2 新增点赞量 3 新增作品量 4 新增评论量 5 新增分享量</param>
    /// <param name="dateWindow">时间窗口，1 按小时 2 按天</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchHotAccountTrendsListApiV1DouyinBillboardFetchHotAccountTrendsListGet(
        utility::string_t secUid,
        utility::string_t option,
        utility::string_t dateWindow
    ) const;
    /// <summary>
    /// 获取账号粉丝数据趋势
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取账号粉丝数据趋势 ### 参数: - sec_uid: 用户sec_id - option: 选项，2 新增点赞量 3 新增作品量 4 新增评论量 5 新增分享量 - date_window: 时间窗口，1 按小时 2 按天 ### 返回: - 账号粉丝数据趋势  # [English] ### Purpose: - Get the account fan data trend ### Parameters: - sec_uid: User sec_id - option: Option, 2 New like 3 New work 4 New comment 5 New share - date_window: Time window, 1 by hour 2 by day ### Return: - Account fan data trend
    /// </remarks>
    /// <param name="secUid">用户sec_id</param>
    /// <param name="option">选项，2 新增点赞量 3 新增作品量 4 新增评论量 5 新增分享量</param>
    /// <param name="dateWindow">时间窗口，1 按小时 2 按天</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchHotAccountTrendsListApiV1DouyinBillboardFetchHotAccountTrendsListGet_0(
        utility::string_t secUid,
        utility::string_t option,
        utility::string_t dateWindow
    ) const;
    /// <summary>
    /// 获取活动日历详情
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取活动日历详情 ### 参数: - calendar_id: 活动id ### 返回: - 活动日历详情  # [English] ### Purpose: - Get the activity calendar details ### Parameters: - calendar_id: Activity id ### Return: - Activity calendar details
    /// </remarks>
    /// <param name="calendarId">活动id</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchHotCalendarDetailApiV1DouyinBillboardFetchHotCalendarDetailGet(
        utility::string_t calendarId
    ) const;
    /// <summary>
    /// 获取活动日历详情
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取活动日历详情 ### 参数: - calendar_id: 活动id ### 返回: - 活动日历详情  # [English] ### Purpose: - Get the activity calendar details ### Parameters: - calendar_id: Activity id ### Return: - Activity calendar details
    /// </remarks>
    /// <param name="calendarId">活动id</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchHotCalendarDetailApiV1DouyinBillboardFetchHotCalendarDetailGet_0(
        utility::string_t calendarId
    ) const;
    /// <summary>
    /// 获取活动日历
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取活动日历 ### 参数: - city_code: 城市编码，从城市列表获取，空为全部 - category_code: 热点榜分类编码，从热点榜分类获取，空为全部 - end_date: 快照结束时间 格式10位时间戳 - start_date: 快照开始时间 格式10位时间戳 ### 返回: - 活动日历  # [English] ### Purpose: - Get the activity calendar ### Parameters: - city_code: City code, get from city list, empty for all - category_code: Hot list category code, get from hot list category, empty for all - end_date: Snapshot end time format 10 digit timestamp - start_date: Snapshot start time format 10 digit timestamp ### Return: - Activity calendar
    /// </remarks>
    /// <param name="uNKNOWNBASETYPE"> (optional)</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchHotCalendarListApiV1DouyinBillboardFetchHotCalendarListPost(
        boost::optional<std::shared_ptr<UNKNOWN_BASE_TYPE>> uNKNOWNBASETYPE
    ) const;
    /// <summary>
    /// 获取活动日历
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取活动日历 ### 参数: - city_code: 城市编码，从城市列表获取，空为全部 - category_code: 热点榜分类编码，从热点榜分类获取，空为全部 - end_date: 快照结束时间 格式10位时间戳 - start_date: 快照开始时间 格式10位时间戳 ### 返回: - 活动日历  # [English] ### Purpose: - Get the activity calendar ### Parameters: - city_code: City code, get from city list, empty for all - category_code: Hot list category code, get from hot list category, empty for all - end_date: Snapshot end time format 10 digit timestamp - start_date: Snapshot start time format 10 digit timestamp ### Return: - Activity calendar
    /// </remarks>
    /// <param name="uNKNOWNBASETYPE"> (optional)</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchHotCalendarListApiV1DouyinBillboardFetchHotCalendarListPost_0(
        boost::optional<std::shared_ptr<UNKNOWN_BASE_TYPE>> uNKNOWNBASETYPE
    ) const;
    /// <summary>
    /// 获取热点榜分类
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取热点榜分类的id与热度 - 注意：使用start_date和end_date参数需要移除snapshot_time参数才可以生效 ### 参数: - billboard_type: 榜单类型     - rise 上升热点榜     - city 城市热点榜     - total 热点总榜 - snapshot_time: 快照时间 - start_date: 快照开始时间 - end_date: 快照结束时间 - keyword: 热点搜索词 ### 返回: - 热点榜分类  # [English] ### Purpose: - Get the id and popularity of the hot list category - Note: Using start_date and end_date parameters requires removing the snapshot_time parameter - Note: snapshot_time and start_date, end_date parameters cannot be empty at the same time ### Parameters: - billboard_type: Billboard type     - rise Rising hot list     - city City hot list     - total Total hot list - snapshot_time: Snapshot time - start_date: Snapshot start time - end_date: Snapshot end time - keyword: Hot search term ### Return: - Hot category list
    /// </remarks>
    /// <param name="billboardType">榜单类型</param>
    /// <param name="snapshotTime">快照时间 格式yyyyMMddHHmmss (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="startDate">快照开始时间 格式yyyyMMdd (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="endDate">快照结束时间 格式yyyyMMdd (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="keyword">热点搜索词 (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchHotCategoryListApiV1DouyinBillboardFetchHotCategoryListGet(
        utility::string_t billboardType,
        boost::optional<utility::string_t> snapshotTime,
        boost::optional<utility::string_t> startDate,
        boost::optional<utility::string_t> endDate,
        boost::optional<utility::string_t> keyword
    ) const;
    /// <summary>
    /// 获取热点榜分类
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取热点榜分类的id与热度 - 注意：使用start_date和end_date参数需要移除snapshot_time参数才可以生效 ### 参数: - billboard_type: 榜单类型     - rise 上升热点榜     - city 城市热点榜     - total 热点总榜 - snapshot_time: 快照时间 - start_date: 快照开始时间 - end_date: 快照结束时间 - keyword: 热点搜索词 ### 返回: - 热点榜分类  # [English] ### Purpose: - Get the id and popularity of the hot list category - Note: Using start_date and end_date parameters requires removing the snapshot_time parameter - Note: snapshot_time and start_date, end_date parameters cannot be empty at the same time ### Parameters: - billboard_type: Billboard type     - rise Rising hot list     - city City hot list     - total Total hot list - snapshot_time: Snapshot time - start_date: Snapshot start time - end_date: Snapshot end time - keyword: Hot search term ### Return: - Hot category list
    /// </remarks>
    /// <param name="billboardType">榜单类型</param>
    /// <param name="snapshotTime">快照时间 格式yyyyMMddHHmmss (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="startDate">快照开始时间 格式yyyyMMdd (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="endDate">快照结束时间 格式yyyyMMdd (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="keyword">热点搜索词 (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchHotCategoryListApiV1DouyinBillboardFetchHotCategoryListGet_0(
        utility::string_t billboardType,
        boost::optional<utility::string_t> snapshotTime,
        boost::optional<utility::string_t> startDate,
        boost::optional<utility::string_t> endDate,
        boost::optional<utility::string_t> keyword
    ) const;
    /// <summary>
    /// 获取挑战榜
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取挑战榜 ### 参数: - page: 页码 - page_size: 每页数量 - keyword: 热点搜索词 ### 返回: - 挑战榜  # [English] ### Purpose: - Get the challenge list ### Parameters: - page: Page number - page_size: Number of items per page - keyword: Hot search term ### Return: - Challenge list
    /// </remarks>
    /// <param name="page">页码</param>
    /// <param name="pageSize">每页数量</param>
    /// <param name="keyword">热点搜索词 (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchHotChallengeListApiV1DouyinBillboardFetchHotChallengeListGet(
        int32_t page,
        int32_t pageSize,
        boost::optional<utility::string_t> keyword
    ) const;
    /// <summary>
    /// 获取挑战榜
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取挑战榜 ### 参数: - page: 页码 - page_size: 每页数量 - keyword: 热点搜索词 ### 返回: - 挑战榜  # [English] ### Purpose: - Get the challenge list ### Parameters: - page: Page number - page_size: Number of items per page - keyword: Hot search term ### Return: - Challenge list
    /// </remarks>
    /// <param name="page">页码</param>
    /// <param name="pageSize">每页数量</param>
    /// <param name="keyword">热点搜索词 (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchHotChallengeListApiV1DouyinBillboardFetchHotChallengeListGet_0(
        int32_t page,
        int32_t pageSize,
        boost::optional<utility::string_t> keyword
    ) const;
    /// <summary>
    /// 获取同城热点榜
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取同城热点榜 ### 参数: - page: 页码 - page_size: 每页数量 - order: 排序方式     - rank 按热度排序     - rank_diff 按排名变化 - city_code: 城市编码，从城市列表获取，空为全部 - sentence_tag: 热点分类标签，从热点榜分类获取，多个分类用逗号分隔，空为全部 - keyword: 热点搜索词 ### 返回: - 同城热点榜  # [English] ### Purpose: - Get the city hot list ### Parameters: - page: Page number - page_size: Number of items per page - order: Sorting method     - rank Sort by popularity     - rank_diff Sort by ranking change - city_code: City code, get from city list, empty for all - sentence_tag: Hot category tag, get from hot list category, multiple categories separated by commas, empty for all - keyword: Hot search term ### Return: - City hot list
    /// </remarks>
    /// <param name="page">页码</param>
    /// <param name="pageSize">每页数量</param>
    /// <param name="order">排序方式</param>
    /// <param name="cityCode">城市编码，从城市列表获取，空为全部 (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="sentenceTag">热点分类标签，从热点榜分类获取，多个分类用逗号分隔，空为全部 (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="keyword">热点搜索词 (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchHotCityListApiV1DouyinBillboardFetchHotCityListGet(
        int32_t page,
        int32_t pageSize,
        utility::string_t order,
        boost::optional<utility::string_t> cityCode,
        boost::optional<utility::string_t> sentenceTag,
        boost::optional<utility::string_t> keyword
    ) const;
    /// <summary>
    /// 获取同城热点榜
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取同城热点榜 ### 参数: - page: 页码 - page_size: 每页数量 - order: 排序方式     - rank 按热度排序     - rank_diff 按排名变化 - city_code: 城市编码，从城市列表获取，空为全部 - sentence_tag: 热点分类标签，从热点榜分类获取，多个分类用逗号分隔，空为全部 - keyword: 热点搜索词 ### 返回: - 同城热点榜  # [English] ### Purpose: - Get the city hot list ### Parameters: - page: Page number - page_size: Number of items per page - order: Sorting method     - rank Sort by popularity     - rank_diff Sort by ranking change - city_code: City code, get from city list, empty for all - sentence_tag: Hot category tag, get from hot list category, multiple categories separated by commas, empty for all - keyword: Hot search term ### Return: - City hot list
    /// </remarks>
    /// <param name="page">页码</param>
    /// <param name="pageSize">每页数量</param>
    /// <param name="order">排序方式</param>
    /// <param name="cityCode">城市编码，从城市列表获取，空为全部 (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="sentenceTag">热点分类标签，从热点榜分类获取，多个分类用逗号分隔，空为全部 (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="keyword">热点搜索词 (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchHotCityListApiV1DouyinBillboardFetchHotCityListGet_0(
        int32_t page,
        int32_t pageSize,
        utility::string_t order,
        boost::optional<utility::string_t> cityCode,
        boost::optional<utility::string_t> sentenceTag,
        boost::optional<utility::string_t> keyword
    ) const;
    /// <summary>
    /// 获取作品评论分析-词云权重
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取作品评论分析-词云权重 ### 参数: - aweme_id: 作品id ### 返回: - 作品评论分析-词云权重  # [English] ### Purpose: - Get the work comment analysis word cloud weight ### Parameters: - aweme_id: Work id ### Return: - Work comment analysis word cloud weight
    /// </remarks>
    /// <param name="awemeId">作品id</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchHotCommentWordListApiV1DouyinBillboardFetchHotCommentWordListGet(
        utility::string_t awemeId
    ) const;
    /// <summary>
    /// 获取作品评论分析-词云权重
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取作品评论分析-词云权重 ### 参数: - aweme_id: 作品id ### 返回: - 作品评论分析-词云权重  # [English] ### Purpose: - Get the work comment analysis word cloud weight ### Parameters: - aweme_id: Work id ### Return: - Work comment analysis word cloud weight
    /// </remarks>
    /// <param name="awemeId">作品id</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchHotCommentWordListApiV1DouyinBillboardFetchHotCommentWordListGet_0(
        utility::string_t awemeId
    ) const;
    /// <summary>
    /// 获取作品数据趋势
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取作品数据趋势 ### 参数: - aweme_id: 作品id - option: 选项，7 点赞量 8 分享量 9 评论量 - date_window: 时间窗口，1 按小时 2 按天 ### 返回: - 作品数据趋势  # [English] ### Purpose: - Get the work data trend ### Parameters: - aweme_id: Work id - option: Option, 7 Like 8 Share 9 Comment - date_window: Time window, 1 by hour 2 by day ### Return: - Work data trend
    /// </remarks>
    /// <param name="option">选项，7 点赞量 8 分享量 9 评论量</param>
    /// <param name="dateWindow">时间窗口，1 按小时 2 按天</param>
    /// <param name="awemeId">作品id (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchHotItemTrendsListApiV1DouyinBillboardFetchHotItemTrendsListGet(
        utility::string_t option,
        utility::string_t dateWindow,
        boost::optional<utility::string_t> awemeId
    ) const;
    /// <summary>
    /// 获取作品数据趋势
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取作品数据趋势 ### 参数: - aweme_id: 作品id - option: 选项，7 点赞量 8 分享量 9 评论量 - date_window: 时间窗口，1 按小时 2 按天 ### 返回: - 作品数据趋势  # [English] ### Purpose: - Get the work data trend ### Parameters: - aweme_id: Work id - option: Option, 7 Like 8 Share 9 Comment - date_window: Time window, 1 by hour 2 by day ### Return: - Work data trend
    /// </remarks>
    /// <param name="option">选项，7 点赞量 8 分享量 9 评论量</param>
    /// <param name="dateWindow">时间窗口，1 按小时 2 按天</param>
    /// <param name="awemeId">作品id (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchHotItemTrendsListApiV1DouyinBillboardFetchHotItemTrendsListGet_0(
        utility::string_t option,
        utility::string_t dateWindow,
        boost::optional<utility::string_t> awemeId
    ) const;
    /// <summary>
    /// 获取上升热点榜
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取上升热点榜 ### 参数: - page: 页码 - page_size: 每页数量 - order: 排序方式     - rank 按热度排序     - rank_diff 按排名变化 - sentence_tag: 热点分类标签，从热点榜分类获取，多个分类用逗号分隔，空为全部 - keyword: 热点搜索词 ### 返回: - 上升热点榜  # [English] ### Purpose: - Get the rising hot list ### Parameters: - page: Page number - page_size: Number of items per page - order: Sorting method     - rank Sort by popularity     - rank_diff Sort by ranking change - sentence_tag: Hot category tag, get from hot list category, multiple categories separated by commas, empty for all - keyword: Hot search term ### Return: - Rising hot list
    /// </remarks>
    /// <param name="page">页码</param>
    /// <param name="pageSize">每页数量</param>
    /// <param name="order">排序方式</param>
    /// <param name="sentenceTag">热点分类标签，从热点榜分类获取，多个分类用逗号分隔，空为全部 (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="keyword">热点搜索词 (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchHotRiseListApiV1DouyinBillboardFetchHotRiseListGet(
        int32_t page,
        int32_t pageSize,
        utility::string_t order,
        boost::optional<utility::string_t> sentenceTag,
        boost::optional<utility::string_t> keyword
    ) const;
    /// <summary>
    /// 获取上升热点榜
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取上升热点榜 ### 参数: - page: 页码 - page_size: 每页数量 - order: 排序方式     - rank 按热度排序     - rank_diff 按排名变化 - sentence_tag: 热点分类标签，从热点榜分类获取，多个分类用逗号分隔，空为全部 - keyword: 热点搜索词 ### 返回: - 上升热点榜  # [English] ### Purpose: - Get the rising hot list ### Parameters: - page: Page number - page_size: Number of items per page - order: Sorting method     - rank Sort by popularity     - rank_diff Sort by ranking change - sentence_tag: Hot category tag, get from hot list category, multiple categories separated by commas, empty for all - keyword: Hot search term ### Return: - Rising hot list
    /// </remarks>
    /// <param name="page">页码</param>
    /// <param name="pageSize">每页数量</param>
    /// <param name="order">排序方式</param>
    /// <param name="sentenceTag">热点分类标签，从热点榜分类获取，多个分类用逗号分隔，空为全部 (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="keyword">热点搜索词 (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchHotRiseListApiV1DouyinBillboardFetchHotRiseListGet_0(
        int32_t page,
        int32_t pageSize,
        utility::string_t order,
        boost::optional<utility::string_t> sentenceTag,
        boost::optional<utility::string_t> keyword
    ) const;
    /// <summary>
    /// 获取高涨粉率榜
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取高涨粉率榜 ### 参数: - page: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - tags: 子级垂类标签，空则为全部，多个标签需传入     {\&quot;value\&quot;: \&quot;{顶级垂类标签id}\&quot;, \&quot;children\&quot;: [         {\&quot;value\&quot;: \&quot;{子级垂类标签id}\&quot;},         {\&quot;value\&quot;: \&quot;{子级垂类标签id}\&quot;}     ]} ### 返回: - 高涨粉率榜  # [English] ### Purpose: - Get the high fan rate list ### Parameters: - page: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - tags: Sub-level vertical category tag, empty for all, multiple tags need to be passed in     {\&quot;value\&quot;: \&quot;{top-level vertical category id}\&quot;, \&quot;children\&quot;: [         {\&quot;value\&quot;: \&quot;{sub-level vertical category id}\&quot;},         {\&quot;value\&quot;: \&quot;{sub-level vertical category id}\&quot;}     ]} ### Return: - High fan rate list
    /// </remarks>
    /// <param name="uNKNOWNBASETYPE"> (optional)</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchHotTotalHighFanListApiV1DouyinBillboardFetchHotTotalHighFanListPost(
        boost::optional<std::shared_ptr<UNKNOWN_BASE_TYPE>> uNKNOWNBASETYPE
    ) const;
    /// <summary>
    /// 获取高涨粉率榜
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取高涨粉率榜 ### 参数: - page: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - tags: 子级垂类标签，空则为全部，多个标签需传入     {\&quot;value\&quot;: \&quot;{顶级垂类标签id}\&quot;, \&quot;children\&quot;: [         {\&quot;value\&quot;: \&quot;{子级垂类标签id}\&quot;},         {\&quot;value\&quot;: \&quot;{子级垂类标签id}\&quot;}     ]} ### 返回: - 高涨粉率榜  # [English] ### Purpose: - Get the high fan rate list ### Parameters: - page: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - tags: Sub-level vertical category tag, empty for all, multiple tags need to be passed in     {\&quot;value\&quot;: \&quot;{top-level vertical category id}\&quot;, \&quot;children\&quot;: [         {\&quot;value\&quot;: \&quot;{sub-level vertical category id}\&quot;},         {\&quot;value\&quot;: \&quot;{sub-level vertical category id}\&quot;}     ]} ### Return: - High fan rate list
    /// </remarks>
    /// <param name="uNKNOWNBASETYPE"> (optional)</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchHotTotalHighFanListApiV1DouyinBillboardFetchHotTotalHighFanListPost_0(
        boost::optional<std::shared_ptr<UNKNOWN_BASE_TYPE>> uNKNOWNBASETYPE
    ) const;
    /// <summary>
    /// 获取高点赞率榜
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取高点赞率榜 ### 参数: - page: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - tags: 子级垂类标签，空则为全部，多个标签需传入     {\&quot;value\&quot;: \&quot;{顶级垂类标签id}\&quot;, \&quot;children\&quot;: [         {\&quot;value\&quot;: \&quot;{子级垂类标签id}\&quot;},         {\&quot;value\&quot;: \&quot;{子级垂类标签id}\&quot;}     ]} ### 返回: - 高点赞率榜  # [English] ### Purpose: - Get the high like rate list ### Parameters: - page: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - tags: Sub-level vertical category tag, empty for all, multiple tags need to be passed in     {\&quot;value\&quot;: \&quot;{top-level vertical category id}\&quot;, \&quot;children\&quot;: [         {\&quot;value\&quot;: \&quot;{sub-level vertical category id}\&quot;},         {\&quot;value\&quot;: \&quot;{sub-level vertical category id}\&quot;}     ]} ### Return: - High like rate list
    /// </remarks>
    /// <param name="uNKNOWNBASETYPE"> (optional)</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchHotTotalHighLikeListApiV1DouyinBillboardFetchHotTotalHighLikeListPost(
        boost::optional<std::shared_ptr<UNKNOWN_BASE_TYPE>> uNKNOWNBASETYPE
    ) const;
    /// <summary>
    /// 获取高点赞率榜
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取高点赞率榜 ### 参数: - page: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - tags: 子级垂类标签，空则为全部，多个标签需传入     {\&quot;value\&quot;: \&quot;{顶级垂类标签id}\&quot;, \&quot;children\&quot;: [         {\&quot;value\&quot;: \&quot;{子级垂类标签id}\&quot;},         {\&quot;value\&quot;: \&quot;{子级垂类标签id}\&quot;}     ]} ### 返回: - 高点赞率榜  # [English] ### Purpose: - Get the high like rate list ### Parameters: - page: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - tags: Sub-level vertical category tag, empty for all, multiple tags need to be passed in     {\&quot;value\&quot;: \&quot;{top-level vertical category id}\&quot;, \&quot;children\&quot;: [         {\&quot;value\&quot;: \&quot;{sub-level vertical category id}\&quot;},         {\&quot;value\&quot;: \&quot;{sub-level vertical category id}\&quot;}     ]} ### Return: - High like rate list
    /// </remarks>
    /// <param name="uNKNOWNBASETYPE"> (optional)</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchHotTotalHighLikeListApiV1DouyinBillboardFetchHotTotalHighLikeListPost_0(
        boost::optional<std::shared_ptr<UNKNOWN_BASE_TYPE>> uNKNOWNBASETYPE
    ) const;
    /// <summary>
    /// 获取高完播率榜
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取高完播率榜 ### 参数: - page: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - tags: 子级垂类标签，空则为全部，多个标签需传入     {\&quot;value\&quot;: \&quot;{顶级垂类标签id}\&quot;, \&quot;children\&quot;: [         {\&quot;value\&quot;: \&quot;{子级垂类标签id}\&quot;},         {\&quot;value\&quot;: \&quot;{子级垂类标签id}\&quot;}     ]} ### 返回: - 高完播率榜  # [English] ### Purpose: - Get the high completion rate list ### Parameters: - page: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - tags: Sub-level vertical category tag, empty for all, multiple tags need to be passed in     {\&quot;value\&quot;: \&quot;{top-level vertical category id}\&quot;, \&quot;children\&quot;: [         {\&quot;value\&quot;: \&quot;{sub-level vertical category id}\&quot;},         {\&quot;value\&quot;: \&quot;{sub-level vertical category id}\&quot;}     ]} ### Return: - High completion rate list
    /// </remarks>
    /// <param name="uNKNOWNBASETYPE"> (optional)</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchHotTotalHighPlayListApiV1DouyinBillboardFetchHotTotalHighPlayListPost(
        boost::optional<std::shared_ptr<UNKNOWN_BASE_TYPE>> uNKNOWNBASETYPE
    ) const;
    /// <summary>
    /// 获取高完播率榜
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取高完播率榜 ### 参数: - page: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - tags: 子级垂类标签，空则为全部，多个标签需传入     {\&quot;value\&quot;: \&quot;{顶级垂类标签id}\&quot;, \&quot;children\&quot;: [         {\&quot;value\&quot;: \&quot;{子级垂类标签id}\&quot;},         {\&quot;value\&quot;: \&quot;{子级垂类标签id}\&quot;}     ]} ### 返回: - 高完播率榜  # [English] ### Purpose: - Get the high completion rate list ### Parameters: - page: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - tags: Sub-level vertical category tag, empty for all, multiple tags need to be passed in     {\&quot;value\&quot;: \&quot;{top-level vertical category id}\&quot;, \&quot;children\&quot;: [         {\&quot;value\&quot;: \&quot;{sub-level vertical category id}\&quot;},         {\&quot;value\&quot;: \&quot;{sub-level vertical category id}\&quot;}     ]} ### Return: - High completion rate list
    /// </remarks>
    /// <param name="uNKNOWNBASETYPE"> (optional)</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchHotTotalHighPlayListApiV1DouyinBillboardFetchHotTotalHighPlayListPost_0(
        boost::optional<std::shared_ptr<UNKNOWN_BASE_TYPE>> uNKNOWNBASETYPE
    ) const;
    /// <summary>
    /// 获取热度飙升的搜索榜
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取热度飙升的搜索榜 ### 参数: - page_num: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - keyword: 搜索关键字 ### 返回: - 热度飙升的搜索榜  # [English] ### Purpose: - Get the search list with rising popularity ### Parameters: - page_num: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - keyword: Search keyword ### Return: - Search list with rising popularity
    /// </remarks>
    /// <param name="uNKNOWNBASETYPE"> (optional)</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchHotTotalHighSearchListApiV1DouyinBillboardFetchHotTotalHighSearchListPost(
        boost::optional<std::shared_ptr<UNKNOWN_BASE_TYPE>> uNKNOWNBASETYPE
    ) const;
    /// <summary>
    /// 获取热度飙升的搜索榜
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取热度飙升的搜索榜 ### 参数: - page_num: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - keyword: 搜索关键字 ### 返回: - 热度飙升的搜索榜  # [English] ### Purpose: - Get the search list with rising popularity ### Parameters: - page_num: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - keyword: Search keyword ### Return: - Search list with rising popularity
    /// </remarks>
    /// <param name="uNKNOWNBASETYPE"> (optional)</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchHotTotalHighSearchListApiV1DouyinBillboardFetchHotTotalHighSearchListPost_0(
        boost::optional<std::shared_ptr<UNKNOWN_BASE_TYPE>> uNKNOWNBASETYPE
    ) const;
    /// <summary>
    /// 获取热度飙升的话题榜
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取热度飙升的话题榜 ### 参数: - page: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - tags: 子级垂类标签，空则为全部，多个标签需传入     {\&quot;value\&quot;: \&quot;{顶级垂类标签id}\&quot;, \&quot;children\&quot;: [         {\&quot;value\&quot;: \&quot;{子级垂类标签id}\&quot;},         {\&quot;value\&quot;: \&quot;{子级垂类标签id}\&quot;}     ]} ### 返回: - 热度飙升的话题榜  # [English] ### Purpose: - Get the topic list with rising popularity ### Parameters: - page: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - tags: Sub-level vertical category tag, empty for all, multiple tags need to be passed in     {\&quot;value\&quot;: \&quot;{top-level vertical category id}\&quot;, \&quot;children\&quot;: [         {\&quot;value\&quot;: \&quot;{sub-level vertical category id}\&quot;},         {\&quot;value\&quot;: \&quot;{sub-level vertical category id}\&quot;}     ]} ### Return: - Topic list with rising popularity
    /// </remarks>
    /// <param name="uNKNOWNBASETYPE"> (optional)</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchHotTotalHighTopicListApiV1DouyinBillboardFetchHotTotalHighTopicListPost(
        boost::optional<std::shared_ptr<UNKNOWN_BASE_TYPE>> uNKNOWNBASETYPE
    ) const;
    /// <summary>
    /// 获取热度飙升的话题榜
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取热度飙升的话题榜 ### 参数: - page: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - tags: 子级垂类标签，空则为全部，多个标签需传入     {\&quot;value\&quot;: \&quot;{顶级垂类标签id}\&quot;, \&quot;children\&quot;: [         {\&quot;value\&quot;: \&quot;{子级垂类标签id}\&quot;},         {\&quot;value\&quot;: \&quot;{子级垂类标签id}\&quot;}     ]} ### 返回: - 热度飙升的话题榜  # [English] ### Purpose: - Get the topic list with rising popularity ### Parameters: - page: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - tags: Sub-level vertical category tag, empty for all, multiple tags need to be passed in     {\&quot;value\&quot;: \&quot;{top-level vertical category id}\&quot;, \&quot;children\&quot;: [         {\&quot;value\&quot;: \&quot;{sub-level vertical category id}\&quot;},         {\&quot;value\&quot;: \&quot;{sub-level vertical category id}\&quot;}     ]} ### Return: - Topic list with rising popularity
    /// </remarks>
    /// <param name="uNKNOWNBASETYPE"> (optional)</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchHotTotalHighTopicListApiV1DouyinBillboardFetchHotTotalHighTopicListPost_0(
        boost::optional<std::shared_ptr<UNKNOWN_BASE_TYPE>> uNKNOWNBASETYPE
    ) const;
    /// <summary>
    /// 获取内容词详情
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取内容词详情 ### 参数: - keyword: 搜索关键字 - word_id: 内容词id - query_day: 查询日期，格式为YYYYMMDD ### 返回: - 内容词详情  # [English] ### Purpose: - Get the details of content words ### Parameters: - keyword: Search keyword - word_id: Content word id - query_day: Query date, format is YYYYMMDD ### Return: - Details of content words
    /// </remarks>
    /// <param name="keyword">搜索关键字</param>
    /// <param name="wordId">内容词id</param>
    /// <param name="queryDay">查询日期，格式为YYYYMMDD，需为当日</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchHotTotalHotWordDetailListApiV1DouyinBillboardFetchHotTotalHotWordDetailListGet(
        utility::string_t keyword,
        utility::string_t wordId,
        int32_t queryDay
    ) const;
    /// <summary>
    /// 获取内容词详情
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取内容词详情 ### 参数: - keyword: 搜索关键字 - word_id: 内容词id - query_day: 查询日期，格式为YYYYMMDD ### 返回: - 内容词详情  # [English] ### Purpose: - Get the details of content words ### Parameters: - keyword: Search keyword - word_id: Content word id - query_day: Query date, format is YYYYMMDD ### Return: - Details of content words
    /// </remarks>
    /// <param name="keyword">搜索关键字</param>
    /// <param name="wordId">内容词id</param>
    /// <param name="queryDay">查询日期，格式为YYYYMMDD，需为当日</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchHotTotalHotWordDetailListApiV1DouyinBillboardFetchHotTotalHotWordDetailListGet_0(
        utility::string_t keyword,
        utility::string_t wordId,
        int32_t queryDay
    ) const;
    /// <summary>
    /// 获取全部内容词
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取全部内容词 ### 参数: - page_num: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - keyword: 搜索关键字 ### 返回: - 全部内容词  # [English] ### Purpose: - Get the list of all content words ### Parameters: - page_num: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - keyword: Search keyword ### Return: - List of all content words
    /// </remarks>
    /// <param name="uNKNOWNBASETYPE"> (optional)</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchHotTotalHotWordListApiV1DouyinBillboardFetchHotTotalHotWordListPost(
        boost::optional<std::shared_ptr<UNKNOWN_BASE_TYPE>> uNKNOWNBASETYPE
    ) const;
    /// <summary>
    /// 获取全部内容词
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取全部内容词 ### 参数: - page_num: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - keyword: 搜索关键字 ### 返回: - 全部内容词  # [English] ### Purpose: - Get the list of all content words ### Parameters: - page_num: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - keyword: Search keyword ### Return: - List of all content words
    /// </remarks>
    /// <param name="uNKNOWNBASETYPE"> (optional)</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchHotTotalHotWordListApiV1DouyinBillboardFetchHotTotalHotWordListPost_0(
        boost::optional<std::shared_ptr<UNKNOWN_BASE_TYPE>> uNKNOWNBASETYPE
    ) const;
    /// <summary>
    /// 获取热点总榜
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取热点总榜 ### 参数: - page: 页码 - page_size: 每页数量 - type: 快照类型 snapshot 按时刻查看 range 按时间范围。     - 备注：snapshot_time 在 snapshot时有效，start_date 和 end_date 在 range 时有效 - snapshot_time: 快照时间 格式yyyyMMddHHmmss - start_date: 快照开始时间 格式yyyyMMdd - end_date: 快照结束时间 格式yyyyMMdd - sentence_tag: 热点分类标签，从热点榜分类获取，多个分类用逗号分隔，空为全部 - keyword: 热点搜索词 ### 返回: - 热点总榜  # [English] ### Purpose: - Get the total hot list ### Parameters: - page: Page number - page_size: Number of items per page - type: Snapshot type snapshot view by time range view by time range.     - Note: snapshot_time is valid when snapshot, start_date and end_date are valid when range - snapshot_time: Snapshot time format yyyyMMddHHmmss - start_date: Snapshot start time format yyyyMMdd - end_date: Snapshot end time format yyyyMMdd - sentence_tag: Hot category tag, get from hot list category, multiple categories separated by commas, empty for all - keyword: Hot search term ### Return: - Total hot list
    /// </remarks>
    /// <param name="page">页码</param>
    /// <param name="pageSize">每页数量</param>
    /// <param name="type">快照类型 snapshot 按时刻查看 range 按时间范围</param>
    /// <param name="snapshotTime">快照时间 格式yyyyMMddHHmmss (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="startDate">快照开始时间 格式yyyyMMdd (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="endDate">快照结束时间 格式yyyyMMdd (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="sentenceTag">热点分类标签，从热点榜分类获取，多个分类用逗号分隔，空为全部 (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="keyword">热点搜索词 (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchHotTotalListApiV1DouyinBillboardFetchHotTotalListGet(
        int32_t page,
        int32_t pageSize,
        utility::string_t type,
        boost::optional<utility::string_t> snapshotTime,
        boost::optional<utility::string_t> startDate,
        boost::optional<utility::string_t> endDate,
        boost::optional<utility::string_t> sentenceTag,
        boost::optional<utility::string_t> keyword
    ) const;
    /// <summary>
    /// 获取热点总榜
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取热点总榜 ### 参数: - page: 页码 - page_size: 每页数量 - type: 快照类型 snapshot 按时刻查看 range 按时间范围。     - 备注：snapshot_time 在 snapshot时有效，start_date 和 end_date 在 range 时有效 - snapshot_time: 快照时间 格式yyyyMMddHHmmss - start_date: 快照开始时间 格式yyyyMMdd - end_date: 快照结束时间 格式yyyyMMdd - sentence_tag: 热点分类标签，从热点榜分类获取，多个分类用逗号分隔，空为全部 - keyword: 热点搜索词 ### 返回: - 热点总榜  # [English] ### Purpose: - Get the total hot list ### Parameters: - page: Page number - page_size: Number of items per page - type: Snapshot type snapshot view by time range view by time range.     - Note: snapshot_time is valid when snapshot, start_date and end_date are valid when range - snapshot_time: Snapshot time format yyyyMMddHHmmss - start_date: Snapshot start time format yyyyMMdd - end_date: Snapshot end time format yyyyMMdd - sentence_tag: Hot category tag, get from hot list category, multiple categories separated by commas, empty for all - keyword: Hot search term ### Return: - Total hot list
    /// </remarks>
    /// <param name="page">页码</param>
    /// <param name="pageSize">每页数量</param>
    /// <param name="type">快照类型 snapshot 按时刻查看 range 按时间范围</param>
    /// <param name="snapshotTime">快照时间 格式yyyyMMddHHmmss (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="startDate">快照开始时间 格式yyyyMMdd (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="endDate">快照结束时间 格式yyyyMMdd (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="sentenceTag">热点分类标签，从热点榜分类获取，多个分类用逗号分隔，空为全部 (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="keyword">热点搜索词 (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchHotTotalListApiV1DouyinBillboardFetchHotTotalListGet_0(
        int32_t page,
        int32_t pageSize,
        utility::string_t type,
        boost::optional<utility::string_t> snapshotTime,
        boost::optional<utility::string_t> startDate,
        boost::optional<utility::string_t> endDate,
        boost::optional<utility::string_t> sentenceTag,
        boost::optional<utility::string_t> keyword
    ) const;
    /// <summary>
    /// 获取低粉爆款榜
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取低粉爆款榜 ### 参数: - page: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - tags: 子级垂类标签，空则为全部，多个标签需传入     {\&quot;value\&quot;: \&quot;{顶级垂类标签id}\&quot;, \&quot;children\&quot;: [         {\&quot;value\&quot;: \&quot;{子级垂类标签id}\&quot;},         {\&quot;value\&quot;: \&quot;{子级垂类标签id}\&quot;}     ]} ### 返回: - 低粉爆款榜  # [English] ### Purpose: - Get the low fan explosion list ### Parameters: - page: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - tags: Sub-level vertical category tag, empty for all, multiple tags need to be passed in     {\&quot;value\&quot;: \&quot;{top-level vertical category id}\&quot;, \&quot;children\&quot;: [         {\&quot;value\&quot;: \&quot;{sub-level vertical category id}\&quot;},         {\&quot;value\&quot;: \&quot;{sub-level vertical category id}\&quot;}     ]} ### Return: - Low fan explosion list
    /// </remarks>
    /// <param name="uNKNOWNBASETYPE"> (optional)</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchHotTotalLowFanListApiV1DouyinBillboardFetchHotTotalLowFanListPost(
        boost::optional<std::shared_ptr<UNKNOWN_BASE_TYPE>> uNKNOWNBASETYPE
    ) const;
    /// <summary>
    /// 获取低粉爆款榜
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取低粉爆款榜 ### 参数: - page: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - tags: 子级垂类标签，空则为全部，多个标签需传入     {\&quot;value\&quot;: \&quot;{顶级垂类标签id}\&quot;, \&quot;children\&quot;: [         {\&quot;value\&quot;: \&quot;{子级垂类标签id}\&quot;},         {\&quot;value\&quot;: \&quot;{子级垂类标签id}\&quot;}     ]} ### 返回: - 低粉爆款榜  # [English] ### Purpose: - Get the low fan explosion list ### Parameters: - page: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - tags: Sub-level vertical category tag, empty for all, multiple tags need to be passed in     {\&quot;value\&quot;: \&quot;{top-level vertical category id}\&quot;, \&quot;children\&quot;: [         {\&quot;value\&quot;: \&quot;{sub-level vertical category id}\&quot;},         {\&quot;value\&quot;: \&quot;{sub-level vertical category id}\&quot;}     ]} ### Return: - Low fan explosion list
    /// </remarks>
    /// <param name="uNKNOWNBASETYPE"> (optional)</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchHotTotalLowFanListApiV1DouyinBillboardFetchHotTotalLowFanListPost_0(
        boost::optional<std::shared_ptr<UNKNOWN_BASE_TYPE>> uNKNOWNBASETYPE
    ) const;
    /// <summary>
    /// 获取搜索榜
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取搜索榜 ### 参数: - page_num: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - keyword: 搜索关键字 ### 返回: - 搜索榜  # [English] ### Purpose: - Get the search list ### Parameters: - page_num: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - keyword: Search keyword ### Return: - Search list
    /// </remarks>
    /// <param name="uNKNOWNBASETYPE"> (optional)</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchHotTotalSearchListApiV1DouyinBillboardFetchHotTotalSearchListPost(
        boost::optional<std::shared_ptr<UNKNOWN_BASE_TYPE>> uNKNOWNBASETYPE
    ) const;
    /// <summary>
    /// 获取搜索榜
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取搜索榜 ### 参数: - page_num: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - keyword: 搜索关键字 ### 返回: - 搜索榜  # [English] ### Purpose: - Get the search list ### Parameters: - page_num: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - keyword: Search keyword ### Return: - Search list
    /// </remarks>
    /// <param name="uNKNOWNBASETYPE"> (optional)</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchHotTotalSearchListApiV1DouyinBillboardFetchHotTotalSearchListPost_0(
        boost::optional<std::shared_ptr<UNKNOWN_BASE_TYPE>> uNKNOWNBASETYPE
    ) const;
    /// <summary>
    /// 获取话题榜
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取话题榜 ### 参数: - page: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - tags: 子级垂类标签，空则为全部，多个标签需传入     {\&quot;value\&quot;: \&quot;{顶级垂类标签id}\&quot;, \&quot;children\&quot;: [         {\&quot;value\&quot;: \&quot;{子级垂类标签id}\&quot;},         {\&quot;value\&quot;: \&quot;{子级垂类标签id}\&quot;}     ]} ### 返回: - 话题榜  # [English] ### Purpose: - Get the topic list ### Parameters: - page: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - tags: Sub-level vertical category tag, empty for all, multiple tags need to be passed in     {\&quot;value\&quot;: \&quot;{top-level vertical category id}\&quot;, \&quot;children\&quot;: [         {\&quot;value\&quot;: \&quot;{sub-level vertical category id}\&quot;},         {\&quot;value\&quot;: \&quot;{sub-level vertical category id}\&quot;}     ]} ### Return: - Topic list
    /// </remarks>
    /// <param name="uNKNOWNBASETYPE"> (optional)</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchHotTotalTopicListApiV1DouyinBillboardFetchHotTotalTopicListPost(
        boost::optional<std::shared_ptr<UNKNOWN_BASE_TYPE>> uNKNOWNBASETYPE
    ) const;
    /// <summary>
    /// 获取话题榜
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取话题榜 ### 参数: - page: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - tags: 子级垂类标签，空则为全部，多个标签需传入     {\&quot;value\&quot;: \&quot;{顶级垂类标签id}\&quot;, \&quot;children\&quot;: [         {\&quot;value\&quot;: \&quot;{子级垂类标签id}\&quot;},         {\&quot;value\&quot;: \&quot;{子级垂类标签id}\&quot;}     ]} ### 返回: - 话题榜  # [English] ### Purpose: - Get the topic list ### Parameters: - page: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - tags: Sub-level vertical category tag, empty for all, multiple tags need to be passed in     {\&quot;value\&quot;: \&quot;{top-level vertical category id}\&quot;, \&quot;children\&quot;: [         {\&quot;value\&quot;: \&quot;{sub-level vertical category id}\&quot;},         {\&quot;value\&quot;: \&quot;{sub-level vertical category id}\&quot;}     ]} ### Return: - Topic list
    /// </remarks>
    /// <param name="uNKNOWNBASETYPE"> (optional)</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchHotTotalTopicListApiV1DouyinBillboardFetchHotTotalTopicListPost_0(
        boost::optional<std::shared_ptr<UNKNOWN_BASE_TYPE>> uNKNOWNBASETYPE
    ) const;
    /// <summary>
    /// 获取视频榜
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取视频榜 ### 参数: - page: 页码，默认1 - page_size: 每页数量，默认10 - date_window: 时间窗口，1 按小时 2 按天 - tags: 子级垂类标签，空则为全部，多个标签需传入     {\&quot;value\&quot;: \&quot;{顶级垂类标签id}\&quot;, \&quot;children\&quot;: [         {\&quot;value\&quot;: \&quot;{子级垂类标签id}\&quot;},         {\&quot;value\&quot;: \&quot;{子级垂类标签id}\&quot;}     ]} ### 返回: - 视频榜  # [English] ### Purpose: - Get the video list ### Parameters: - page: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - tags: Sub-level vertical category tag, empty for all, multiple tags need to be passed in     {\&quot;value\&quot;: \&quot;{top-level vertical category id}\&quot;, \&quot;children\&quot;: [         {\&quot;value\&quot;: \&quot;{sub-level vertical category id}\&quot;},         {\&quot;value\&quot;: \&quot;{sub-level vertical category id}\&quot;}     ]} ### Return: - Video list
    /// </remarks>
    /// <param name="uNKNOWNBASETYPE"> (optional)</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchHotTotalVideoListApiV1DouyinBillboardFetchHotTotalVideoListPost(
        boost::optional<std::shared_ptr<UNKNOWN_BASE_TYPE>> uNKNOWNBASETYPE
    ) const;
    /// <summary>
    /// 获取视频榜
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取视频榜 ### 参数: - page: 页码，默认1 - page_size: 每页数量，默认10 - date_window: 时间窗口，1 按小时 2 按天 - tags: 子级垂类标签，空则为全部，多个标签需传入     {\&quot;value\&quot;: \&quot;{顶级垂类标签id}\&quot;, \&quot;children\&quot;: [         {\&quot;value\&quot;: \&quot;{子级垂类标签id}\&quot;},         {\&quot;value\&quot;: \&quot;{子级垂类标签id}\&quot;}     ]} ### 返回: - 视频榜  # [English] ### Purpose: - Get the video list ### Parameters: - page: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - tags: Sub-level vertical category tag, empty for all, multiple tags need to be passed in     {\&quot;value\&quot;: \&quot;{top-level vertical category id}\&quot;, \&quot;children\&quot;: [         {\&quot;value\&quot;: \&quot;{sub-level vertical category id}\&quot;},         {\&quot;value\&quot;: \&quot;{sub-level vertical category id}\&quot;}     ]} ### Return: - Video list
    /// </remarks>
    /// <param name="uNKNOWNBASETYPE"> (optional)</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchHotTotalVideoListApiV1DouyinBillboardFetchHotTotalVideoListPost_0(
        boost::optional<std::shared_ptr<UNKNOWN_BASE_TYPE>> uNKNOWNBASETYPE
    ) const;
    /// <summary>
    /// 获取作品点赞观众画像-仅限热门榜
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取作品点赞观众画像 ### 参数: - aweme_id: 作品id - option: 选项，1 手机价格分布 2 性别分布 3 年龄分布 4 地域分布-省份 5 地域分布-城市 6 城市等级 7 手机品牌分布 ### 返回: - 作品点赞观众画像  # [English] ### Purpose: - Get the work like audience portrait ### Parameters: - aweme_id: Work id - option: Option     - 1 Mobile price     - 2 Gender distribution     - 3 Age distribution     - 4 Regional distribution - province     - 5 Regional distribution - city     - 6 City level     - 7 Mobile brand distribution ### Return: - Work like audience portrait
    /// </remarks>
    /// <param name="awemeId">作品id</param>
    /// <param name="option">选项，1 手机价格分布 2 性别分布 3 年龄分布 4 地域分布-省份 5 地域分布-城市 6 城市等级 7 手机品牌分布</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchHotUserPortraitListApiV1DouyinBillboardFetchHotUserPortraitListGet(
        utility::string_t awemeId,
        utility::string_t option
    ) const;
    /// <summary>
    /// 获取作品点赞观众画像-仅限热门榜
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取作品点赞观众画像 ### 参数: - aweme_id: 作品id - option: 选项，1 手机价格分布 2 性别分布 3 年龄分布 4 地域分布-省份 5 地域分布-城市 6 城市等级 7 手机品牌分布 ### 返回: - 作品点赞观众画像  # [English] ### Purpose: - Get the work like audience portrait ### Parameters: - aweme_id: Work id - option: Option     - 1 Mobile price     - 2 Gender distribution     - 3 Age distribution     - 4 Regional distribution - province     - 5 Regional distribution - city     - 6 City level     - 7 Mobile brand distribution ### Return: - Work like audience portrait
    /// </remarks>
    /// <param name="awemeId">作品id</param>
    /// <param name="option">选项，1 手机价格分布 2 性别分布 3 年龄分布 4 地域分布-省份 5 地域分布-城市 6 城市等级 7 手机品牌分布</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchHotUserPortraitListApiV1DouyinBillboardFetchHotUserPortraitListGet_0(
        utility::string_t awemeId,
        utility::string_t option
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* IO_TIKHUB_CLIENT_API_DouyinBillboardAPIApi_H_ */

