/**
 * TikHub.io - Your Ultimate Social Media Data & API Marketplace
 * High-performance asynchronous Douyin(抖音) TikTok Xiaohongshu(小红书) Kuaishou(快手) Weibo(微博) Instagram YouTube(油管) Twitter(X) Captcha Solver(验证码解决器) Temp Mail(临时邮箱) API(接口).
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * TikTokWebAPIApi.h
 *
 * 
 */

#ifndef IO_TIKHUB_CLIENT_API_TikTokWebAPIApi_H_
#define IO_TIKHUB_CLIENT_API_TikTokWebAPIApi_H_


#include "../ApiClient.h"

#include "BodyFetchHomeFeedApiV1TiktokWebFetchHomeFeedPost.h"
#include "HttpValidationError.h"
#include "ResponseModel.h"
#include "UNKNOWN_BASE_TYPE.h"
#include "XBogusModel.h"
#include <vector>
#include <cpprest/details/basic_types.h>


#include <boost/optional.hpp>

namespace io {
namespace tikhub {
namespace client {
namespace api {

using namespace org::openapitools::client::model;



class  TikTokWebAPIApi 
{
public:

    explicit TikTokWebAPIApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~TikTokWebAPIApi();

    /// <summary>
    /// 提取直播间弹幕/Extract live room danmaku
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 提取直播间弹幕 #### 价格: - 每10条数据消耗0.001$，支持阶梯式计费折扣。 ### 参数: - live_room_url: 直播间链接 - danmaku_type: 消息类型     - WebcastChatMessage: 聊天消息     - WebcastMemberMessage: 成员消息     - WebcastRoomUserSeqMessage: 用户序列消息     - WebcastGiftMessage: 礼物消息     - WebcastSocialMessage: 社交消息     - WebcastLikeMessage: 点赞消息     - WebcastLinkMicFanTicketMethod: 连麦粉丝票方法     - WebcastLinkMicMethod: 连麦方法 ### 返回: - 弹幕数据的WebSocket连接信息，需要使用WebSocket连接获取弹幕数据，此接口不返回弹幕数据。  # [English] ### Purpose: - Extract live room danmaku #### Price: - 0.001$ per 10 data, support tiered billing discount. ### Parameters: - live_room_url: Live room link - danmaku_type: Message type     - WebcastChatMessage: Chat message     - WebcastMemberMessage: Member message     - WebcastRoomUserSeqMessage: User sequence message     - WebcastGiftMessage: Gift message     - WebcastSocialMessage: Social message     - WebcastLikeMessage: Like message     - WebcastLinkMicFanTicketMethod: Link Mic Fan Ticket Method     - WebcastLinkMicMethod: Link Mic Method ### Return: - WebSocket connection information of the danmaku data, you need to use WebSocket connection to get the danmaku data, this interface does not return the danmaku data.
    /// </remarks>
    /// <param name="liveRoomUrl">直播间链接/Live room link</param>
    /// <param name="danmakuType">消息类型/Message type</param>
    pplx::task<std::shared_ptr<ResponseModel>> douyinLiveRoomApiV1TiktokWebTiktokLiveRoomGet(
        utility::string_t liveRoomUrl,
        utility::string_t danmakuType
    ) const;
    /// <summary>
    /// 提取直播间弹幕/Extract live room danmaku
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 提取直播间弹幕 #### 价格: - 每10条数据消耗0.001$，支持阶梯式计费折扣。 ### 参数: - live_room_url: 直播间链接 - danmaku_type: 消息类型     - WebcastChatMessage: 聊天消息     - WebcastMemberMessage: 成员消息     - WebcastRoomUserSeqMessage: 用户序列消息     - WebcastGiftMessage: 礼物消息     - WebcastSocialMessage: 社交消息     - WebcastLikeMessage: 点赞消息     - WebcastLinkMicFanTicketMethod: 连麦粉丝票方法     - WebcastLinkMicMethod: 连麦方法 ### 返回: - 弹幕数据的WebSocket连接信息，需要使用WebSocket连接获取弹幕数据，此接口不返回弹幕数据。  # [English] ### Purpose: - Extract live room danmaku #### Price: - 0.001$ per 10 data, support tiered billing discount. ### Parameters: - live_room_url: Live room link - danmaku_type: Message type     - WebcastChatMessage: Chat message     - WebcastMemberMessage: Member message     - WebcastRoomUserSeqMessage: User sequence message     - WebcastGiftMessage: Gift message     - WebcastSocialMessage: Social message     - WebcastLikeMessage: Like message     - WebcastLinkMicFanTicketMethod: Link Mic Fan Ticket Method     - WebcastLinkMicMethod: Link Mic Method ### Return: - WebSocket connection information of the danmaku data, you need to use WebSocket connection to get the danmaku data, this interface does not return the danmaku data.
    /// </remarks>
    /// <param name="liveRoomUrl">直播间链接/Live room link</param>
    /// <param name="danmakuType">消息类型/Message type</param>
    pplx::task<std::shared_ptr<ResponseModel>> douyinLiveRoomApiV1TiktokWebTiktokLiveRoomGet_0(
        utility::string_t liveRoomUrl,
        utility::string_t danmakuType
    ) const;
    /// <summary>
    /// 直播间开播状态检测/Live room start status check
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 直播间开播状态检测 - 如果当前直播间不存在或已下播，则返回空。 ### 参数: - room_id: 直播间ID ### 返回: - 直播间开播状态  # [English] ### Purpose: - Live room start status check - If the current live room does not exist or has ended, it will return empty. ### Parameters: - room_id: Live room ID ### Return: - Live room start status  # [示例/Example] room_id &#x3D; \&quot;7381444193462078214\&quot;
    /// </remarks>
    /// <param name="roomId">直播间ID/Live room ID</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchCheckLiveAliveApiV1TiktokWebFetchCheckLiveAliveGet(
        utility::string_t roomId
    ) const;
    /// <summary>
    /// 直播间开播状态检测/Live room start status check
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 直播间开播状态检测 - 如果当前直播间不存在或已下播，则返回空。 ### 参数: - room_id: 直播间ID ### 返回: - 直播间开播状态  # [English] ### Purpose: - Live room start status check - If the current live room does not exist or has ended, it will return empty. ### Parameters: - room_id: Live room ID ### Return: - Live room start status  # [示例/Example] room_id &#x3D; \&quot;7381444193462078214\&quot;
    /// </remarks>
    /// <param name="roomId">直播间ID/Live room ID</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchCheckLiveAliveApiV1TiktokWebFetchCheckLiveAliveGet_0(
        utility::string_t roomId
    ) const;
    /// <summary>
    /// 获取探索作品数据/Get explore video data
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取探索作品数据 ### 参数: - categoryType: 作品分类     - 100: 动画与漫画     - 101: 表演     - 102: 美容护理     - 103: 游戏     - 104: 喜剧     - 105: 日常生活     - 106: 家庭     - 107: 情感关系     - 108: 戏剧     - 109: 穿搭     - 110: 对口型     - 111: 美食     - 112: 运动     - 113: 动物     - 114: 社会     - 115: 汽车     - 116: 教育     - 117: 健身和健康     - 118: 科技     - 119: 唱歌跳舞     - 120: 全部 - count: 每页数量 ### 返回: - 作品数据  # [English] ### Purpose: - Get explore video data ### Parameters: - categoryType: Video category     - 100: Animation and comics     - 101: Performance     - 102: Beauty care     - 103: Game     - 104: Comedy     - 105: Daily life     - 106: Family     - 107: Emotional relationship     - 108: Drama     - 109: Dress up     - 110: Dubbing     - 111: Food     - 112: Sports     - 113: Animals     - 114: Society     - 115: Car     - 116: Education     - 117: Fitness and health     - 118: Technology     - 119: Singing and dancing     - 120: All - count: Number per page ### Return: - Video data  # [示例/Example] categoryType &#x3D; \&quot;120\&quot; count &#x3D; 16
    /// </remarks>
    /// <param name="categoryType">作品分类/Video category (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="count">每页数量/Number per page (optional, default to 0)</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchExplorePostApiV1TiktokWebFetchExplorePostGet(
        boost::optional<utility::string_t> categoryType,
        boost::optional<int32_t> count
    ) const;
    /// <summary>
    /// 获取探索作品数据/Get explore video data
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取探索作品数据 ### 参数: - categoryType: 作品分类     - 100: 动画与漫画     - 101: 表演     - 102: 美容护理     - 103: 游戏     - 104: 喜剧     - 105: 日常生活     - 106: 家庭     - 107: 情感关系     - 108: 戏剧     - 109: 穿搭     - 110: 对口型     - 111: 美食     - 112: 运动     - 113: 动物     - 114: 社会     - 115: 汽车     - 116: 教育     - 117: 健身和健康     - 118: 科技     - 119: 唱歌跳舞     - 120: 全部 - count: 每页数量 ### 返回: - 作品数据  # [English] ### Purpose: - Get explore video data ### Parameters: - categoryType: Video category     - 100: Animation and comics     - 101: Performance     - 102: Beauty care     - 103: Game     - 104: Comedy     - 105: Daily life     - 106: Family     - 107: Emotional relationship     - 108: Drama     - 109: Dress up     - 110: Dubbing     - 111: Food     - 112: Sports     - 113: Animals     - 114: Society     - 115: Car     - 116: Education     - 117: Fitness and health     - 118: Technology     - 119: Singing and dancing     - 120: All - count: Number per page ### Return: - Video data  # [示例/Example] categoryType &#x3D; \&quot;120\&quot; count &#x3D; 16
    /// </remarks>
    /// <param name="categoryType">作品分类/Video category (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="count">每页数量/Number per page (optional, default to 0)</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchExplorePostApiV1TiktokWebFetchExplorePostGet_0(
        boost::optional<utility::string_t> categoryType,
        boost::optional<int32_t> count
    ) const;
    /// <summary>
    /// 获取综合搜索列表/Get general search list
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取综合搜索列表 ### 参数: - keyword: 搜索关键词 - offset: 翻页游标，第一次请求时为0，第二次请求时从上一次请求的返回响应中获取，一般这个值的关键字为offset或者cursor。 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id &#x3D; \&quot;20240828035554C02011379EBB6A00E00B\&quot;     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: 用户cookie(如果你需要使用自己的账号搜索，或者遇到接口报错，可以自行提供cookie，默认不需要提供) ### 返回: - 综合搜索列表  # [English] ### Purpose: - Get general search list ### Parameters: - keyword: Search keyword - offset: Page cursor, 0 for the first request, need to provide for the second paging, generally the keyword of this value is offset or cursor. - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id &#x3D; \&quot;20240828035554C02011379EBB6A00E00B\&quot;     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: User cookie (If you need to search with your own account, or encounter an interface error, you can provide the cookie yourself, default is not required) ### Return: - General search list  # [示例/Example] keyword &#x3D; \&quot;TikTok\&quot; offset &#x3D; 0 search_id &#x3D; \&quot;\&quot;
    /// </remarks>
    /// <param name="keyword">搜索关键词/Search keyword</param>
    /// <param name="offset">翻页游标/Page cursor (optional, default to 0)</param>
    /// <param name="searchId">搜索id，翻页时需要提供/Search id, need to provide when paging (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="cookie">用户cookie(按需提供)/User cookie(if needed) (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchGeneralSearchApiV1TiktokWebFetchGeneralSearchGet(
        utility::string_t keyword,
        boost::optional<int32_t> offset,
        boost::optional<utility::string_t> searchId,
        boost::optional<utility::string_t> cookie
    ) const;
    /// <summary>
    /// 获取综合搜索列表/Get general search list
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取综合搜索列表 ### 参数: - keyword: 搜索关键词 - offset: 翻页游标，第一次请求时为0，第二次请求时从上一次请求的返回响应中获取，一般这个值的关键字为offset或者cursor。 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id &#x3D; \&quot;20240828035554C02011379EBB6A00E00B\&quot;     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: 用户cookie(如果你需要使用自己的账号搜索，或者遇到接口报错，可以自行提供cookie，默认不需要提供) ### 返回: - 综合搜索列表  # [English] ### Purpose: - Get general search list ### Parameters: - keyword: Search keyword - offset: Page cursor, 0 for the first request, need to provide for the second paging, generally the keyword of this value is offset or cursor. - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id &#x3D; \&quot;20240828035554C02011379EBB6A00E00B\&quot;     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: User cookie (If you need to search with your own account, or encounter an interface error, you can provide the cookie yourself, default is not required) ### Return: - General search list  # [示例/Example] keyword &#x3D; \&quot;TikTok\&quot; offset &#x3D; 0 search_id &#x3D; \&quot;\&quot;
    /// </remarks>
    /// <param name="keyword">搜索关键词/Search keyword</param>
    /// <param name="offset">翻页游标/Page cursor (optional, default to 0)</param>
    /// <param name="searchId">搜索id，翻页时需要提供/Search id, need to provide when paging (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="cookie">用户cookie(按需提供)/User cookie(if needed) (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchGeneralSearchApiV1TiktokWebFetchGeneralSearchGet_0(
        utility::string_t keyword,
        boost::optional<int32_t> offset,
        boost::optional<utility::string_t> searchId,
        boost::optional<utility::string_t> cookie
    ) const;
    /// <summary>
    /// 首页推荐作品/Home Feed
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 首页推荐作品 ### 参数: - count: 每页数量 - cookie: 用户自己的cookie，可选参数，用于接口返回数据的个性化推荐。 ### 返回: - 首页推荐作品  # [English] ### Purpose: - Home Feed ### Parameters: - count: Number per page - cookie: User&#39;s own cookie, optional parameter, used for personalized recommendations of interface return data. ### Return: - Home Feed  # [示例/Example] count &#x3D; 15 Cookie &#x3D; \&quot;Your_Cookie\&quot;
    /// </remarks>
    /// <param name="uNKNOWNBASETYPE"> (optional)</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchHomeFeedApiV1TiktokWebFetchHomeFeedPost(
        boost::optional<std::shared_ptr<UNKNOWN_BASE_TYPE>> uNKNOWNBASETYPE
    ) const;
    /// <summary>
    /// 首页推荐作品/Home Feed
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 首页推荐作品 ### 参数: - count: 每页数量 - cookie: 用户自己的cookie，可选参数，用于接口返回数据的个性化推荐。 ### 返回: - 首页推荐作品  # [English] ### Purpose: - Home Feed ### Parameters: - count: Number per page - cookie: User&#39;s own cookie, optional parameter, used for personalized recommendations of interface return data. ### Return: - Home Feed  # [示例/Example] count &#x3D; 15 Cookie &#x3D; \&quot;Your_Cookie\&quot;
    /// </remarks>
    /// <param name="uNKNOWNBASETYPE"> (optional)</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchHomeFeedApiV1TiktokWebFetchHomeFeedPost_0(
        boost::optional<std::shared_ptr<UNKNOWN_BASE_TYPE>> uNKNOWNBASETYPE
    ) const;
    /// <summary>
    /// 获取直播间首页推荐列表/Get live room homepage recommendation list
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取直播间首页推荐列表 ### 参数: - related_live_tag: 相关直播标签 ### 返回: - 直播间首页推荐列表  # [English] ### Purpose: - Get live room homepage recommendation list ### Parameters: - related_live_tag: Related live tag ### Return: - Live room homepage recommendation list  # [示例/Example] related_live_tag &#x3D; \&quot;VALORANT\&quot;
    /// </remarks>
    /// <param name="relatedLiveTag">相关直播标签/Related live tag</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchLiveRecommendApiV1TiktokWebFetchLiveRecommendGet(
        utility::string_t relatedLiveTag
    ) const;
    /// <summary>
    /// 获取直播间首页推荐列表/Get live room homepage recommendation list
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取直播间首页推荐列表 ### 参数: - related_live_tag: 相关直播标签 ### 返回: - 直播间首页推荐列表  # [English] ### Purpose: - Get live room homepage recommendation list ### Parameters: - related_live_tag: Related live tag ### Return: - Live room homepage recommendation list  # [示例/Example] related_live_tag &#x3D; \&quot;VALORANT\&quot;
    /// </remarks>
    /// <param name="relatedLiveTag">相关直播标签/Related live tag</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchLiveRecommendApiV1TiktokWebFetchLiveRecommendGet_0(
        utility::string_t relatedLiveTag
    ) const;
    /// <summary>
    /// 获取作品的评论列表/Get video comments
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取作品的评论列表 ### 参数: - aweme_id: 作品id - cursor: 翻页游标 - count: 每页数量 - current_region: 当前地区，默认为空。 ### 返回: - 作品的评论列表  # [English] ### Purpose: - Get video comments ### Parameters: - aweme_id: Video id - cursor: Page cursor - count: Number per page - current_region: Current region, default is empty. ### Return: - Video comments  # [示例/Eample] aweme_id &#x3D; \&quot;7304809083817774382\&quot; cursor &#x3D; 0 count &#x3D; 20 current_region &#x3D; \&quot;\&quot;
    /// </remarks>
    /// <param name="awemeId">作品id/Video id</param>
    /// <param name="cursor">翻页游标/Page cursor (optional, default to 0)</param>
    /// <param name="count">每页数量/Number per page (optional, default to 0)</param>
    /// <param name="currentRegion">当前地区/Current region (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchPostCommentApiV1TiktokWebFetchPostCommentGet(
        utility::string_t awemeId,
        boost::optional<int32_t> cursor,
        boost::optional<int32_t> count,
        boost::optional<utility::string_t> currentRegion
    ) const;
    /// <summary>
    /// 获取作品的评论列表/Get video comments
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取作品的评论列表 ### 参数: - aweme_id: 作品id - cursor: 翻页游标 - count: 每页数量 - current_region: 当前地区，默认为空。 ### 返回: - 作品的评论列表  # [English] ### Purpose: - Get video comments ### Parameters: - aweme_id: Video id - cursor: Page cursor - count: Number per page - current_region: Current region, default is empty. ### Return: - Video comments  # [示例/Eample] aweme_id &#x3D; \&quot;7304809083817774382\&quot; cursor &#x3D; 0 count &#x3D; 20 current_region &#x3D; \&quot;\&quot;
    /// </remarks>
    /// <param name="awemeId">作品id/Video id</param>
    /// <param name="cursor">翻页游标/Page cursor (optional, default to 0)</param>
    /// <param name="count">每页数量/Number per page (optional, default to 0)</param>
    /// <param name="currentRegion">当前地区/Current region (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchPostCommentApiV1TiktokWebFetchPostCommentGet_0(
        utility::string_t awemeId,
        boost::optional<int32_t> cursor,
        boost::optional<int32_t> count,
        boost::optional<utility::string_t> currentRegion
    ) const;
    /// <summary>
    /// 获取作品的评论回复列表/Get video comment replies
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取作品的评论回复列表 ### 参数: - item_id: 作品id - comment_id: 评论id - cursor: 翻页游标 - count: 每页数量 - current_region: 当前地区，默认为空。 ### 返回: - 作品的评论回复列表  # [English] ### Purpose: - Get video comment replies ### Parameters: - item_id: Video id - comment_id: Comment id - cursor: Page cursor - count: Number per page - current_region: Current region, default is empty. ### Return: - Video comment replies  # [示例/Eample] item_id &#x3D; \&quot;7304809083817774382\&quot; comment_id &#x3D; \&quot;7304877760886588191\&quot; cursor &#x3D; 0 count &#x3D; 20 current_region &#x3D; \&quot;\&quot;
    /// </remarks>
    /// <param name="itemId">作品id/Video id</param>
    /// <param name="commentId">评论id/Comment id</param>
    /// <param name="cursor">翻页游标/Page cursor (optional, default to 0)</param>
    /// <param name="count">每页数量/Number per page (optional, default to 0)</param>
    /// <param name="currentRegion">当前地区/Current region (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchPostCommentReplyApiV1TiktokWebFetchPostCommentReplyGet(
        utility::string_t itemId,
        utility::string_t commentId,
        boost::optional<int32_t> cursor,
        boost::optional<int32_t> count,
        boost::optional<utility::string_t> currentRegion
    ) const;
    /// <summary>
    /// 获取作品的评论回复列表/Get video comment replies
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取作品的评论回复列表 ### 参数: - item_id: 作品id - comment_id: 评论id - cursor: 翻页游标 - count: 每页数量 - current_region: 当前地区，默认为空。 ### 返回: - 作品的评论回复列表  # [English] ### Purpose: - Get video comment replies ### Parameters: - item_id: Video id - comment_id: Comment id - cursor: Page cursor - count: Number per page - current_region: Current region, default is empty. ### Return: - Video comment replies  # [示例/Eample] item_id &#x3D; \&quot;7304809083817774382\&quot; comment_id &#x3D; \&quot;7304877760886588191\&quot; cursor &#x3D; 0 count &#x3D; 20 current_region &#x3D; \&quot;\&quot;
    /// </remarks>
    /// <param name="itemId">作品id/Video id</param>
    /// <param name="commentId">评论id/Comment id</param>
    /// <param name="cursor">翻页游标/Page cursor (optional, default to 0)</param>
    /// <param name="count">每页数量/Number per page (optional, default to 0)</param>
    /// <param name="currentRegion">当前地区/Current region (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchPostCommentReplyApiV1TiktokWebFetchPostCommentReplyGet_0(
        utility::string_t itemId,
        utility::string_t commentId,
        boost::optional<int32_t> cursor,
        boost::optional<int32_t> count,
        boost::optional<utility::string_t> currentRegion
    ) const;
    /// <summary>
    /// 获取单个作品数据/Get single video data
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取单个作品数据 - 此接口无法用于视频下载，只能获取视频数据，访问此接口返回的视频链接会返回HTTP403报错。 - 如果有视频下载需求，请使用 /api/v1/tiktok/app/v2/fetch_one_video 接口。 ### 参数: - itemId: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data - This interface cannot be used for video download, it can only get video data, and accessing the video link returned by this interface will return an HTTP403 error. - If you need to download videos, please use the /api/v1/tiktok/app/v2/fetch_one_video interface. ### Parameters: - itemId: Video id ### Return: - Video data  # [示例/Example] itemId &#x3D; \&quot;7339393672959757570\&quot;
    /// </remarks>
    /// <param name="itemId">作品id/Video id</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchPostDetailApiV1TiktokWebFetchPostDetailGet(
        utility::string_t itemId
    ) const;
    /// <summary>
    /// 获取单个作品数据/Get single video data
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取单个作品数据 - 此接口无法用于视频下载，只能获取视频数据，访问此接口返回的视频链接会返回HTTP403报错。 - 如果有视频下载需求，请使用 /api/v1/tiktok/app/v2/fetch_one_video 接口。 ### 参数: - itemId: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data - This interface cannot be used for video download, it can only get video data, and accessing the video link returned by this interface will return an HTTP403 error. - If you need to download videos, please use the /api/v1/tiktok/app/v2/fetch_one_video interface. ### Parameters: - itemId: Video id ### Return: - Video data  # [示例/Example] itemId &#x3D; \&quot;7339393672959757570\&quot;
    /// </remarks>
    /// <param name="itemId">作品id/Video id</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchPostDetailApiV1TiktokWebFetchPostDetailGet_0(
        utility::string_t itemId
    ) const;
    /// <summary>
    /// 搜索关键字推荐/Search keyword suggest
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 搜索关键字推荐 ### 参数: - keyword: 搜索关键词 ### 返回: - 关键字推荐列表  # [English] ### Purpose: - Search keyword suggest ### Parameters: - keyword: Search keyword ### Return: - Keyword suggest list  # [示例/Example] keyword &#x3D; \&quot;TikTok\&quot;
    /// </remarks>
    /// <param name="keyword">搜索关键词/Search keyword</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchSearchKeywordSuggestApiV1TiktokWebFetchSearchKeywordSuggestGet(
        utility::string_t keyword
    ) const;
    /// <summary>
    /// 搜索关键字推荐/Search keyword suggest
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 搜索关键字推荐 ### 参数: - keyword: 搜索关键词 ### 返回: - 关键字推荐列表  # [English] ### Purpose: - Search keyword suggest ### Parameters: - keyword: Search keyword ### Return: - Keyword suggest list  # [示例/Example] keyword &#x3D; \&quot;TikTok\&quot;
    /// </remarks>
    /// <param name="keyword">搜索关键词/Search keyword</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchSearchKeywordSuggestApiV1TiktokWebFetchSearchKeywordSuggestGet_0(
        utility::string_t keyword
    ) const;
    /// <summary>
    /// 搜索直播/Search live
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 搜索直播 ### 参数: - keyword: 搜索关键词 - count: 每页数量 - offset: 翻页游标，第一次请求时为0，第二次请求时从上一次请求的返回响应中获取，一般这个值的关键字为offset或者cursor。 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id &#x3D; \&quot;20240828035554C02011379EBB6A00E00B\&quot;     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: 用户cookie(如果你需要使用自己的账号搜索，或者遇到接口报错，可以自行提供cookie，默认不需要提供) ### 返回: - 直播列表  # [English] ### Purpose: - Search live ### Parameters: - keyword: Search keyword - count: Number per page - offset: Page cursor, 0 for the first request, need to provide for the second paging, generally the keyword of this value is offset or cursor. - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id &#x3D; \&quot;20240828035554C02011379EBB6A00E00B\&quot;     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: User cookie (If you need to search with your own account, or encounter an interface error, you can provide the cookie yourself, default is not required) ### Return: - Live list  # [示例/Example] keyword &#x3D; \&quot;TikTok\&quot; count &#x3D; 20 offset &#x3D; 0 search_id &#x3D; \&quot;\&quot;
    /// </remarks>
    /// <param name="keyword">搜索关键词/Search keyword</param>
    /// <param name="count">每页数量/Number per page (optional, default to 0)</param>
    /// <param name="offset">翻页游标/Page cursor (optional, default to 0)</param>
    /// <param name="searchId">搜索id，翻页时需要提供/Search id, need to provide when paging (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="cookie">用户cookie(按需提供)/User cookie(if needed) (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchSearchLiveApiV1TiktokWebFetchSearchLiveGet(
        utility::string_t keyword,
        boost::optional<int32_t> count,
        boost::optional<int32_t> offset,
        boost::optional<utility::string_t> searchId,
        boost::optional<utility::string_t> cookie
    ) const;
    /// <summary>
    /// 搜索直播/Search live
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 搜索直播 ### 参数: - keyword: 搜索关键词 - count: 每页数量 - offset: 翻页游标，第一次请求时为0，第二次请求时从上一次请求的返回响应中获取，一般这个值的关键字为offset或者cursor。 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id &#x3D; \&quot;20240828035554C02011379EBB6A00E00B\&quot;     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: 用户cookie(如果你需要使用自己的账号搜索，或者遇到接口报错，可以自行提供cookie，默认不需要提供) ### 返回: - 直播列表  # [English] ### Purpose: - Search live ### Parameters: - keyword: Search keyword - count: Number per page - offset: Page cursor, 0 for the first request, need to provide for the second paging, generally the keyword of this value is offset or cursor. - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id &#x3D; \&quot;20240828035554C02011379EBB6A00E00B\&quot;     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: User cookie (If you need to search with your own account, or encounter an interface error, you can provide the cookie yourself, default is not required) ### Return: - Live list  # [示例/Example] keyword &#x3D; \&quot;TikTok\&quot; count &#x3D; 20 offset &#x3D; 0 search_id &#x3D; \&quot;\&quot;
    /// </remarks>
    /// <param name="keyword">搜索关键词/Search keyword</param>
    /// <param name="count">每页数量/Number per page (optional, default to 0)</param>
    /// <param name="offset">翻页游标/Page cursor (optional, default to 0)</param>
    /// <param name="searchId">搜索id，翻页时需要提供/Search id, need to provide when paging (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="cookie">用户cookie(按需提供)/User cookie(if needed) (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchSearchLiveApiV1TiktokWebFetchSearchLiveGet_0(
        utility::string_t keyword,
        boost::optional<int32_t> count,
        boost::optional<int32_t> offset,
        boost::optional<utility::string_t> searchId,
        boost::optional<utility::string_t> cookie
    ) const;
    /// <summary>
    /// 搜索用户/Search user
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 搜索用户 ### 参数: - keyword: 搜索关键词 - cursor: 翻页游标，第一次请求时为0，第二次请求时从上一次请求的返回响应中获取，一般这个值的关键字为offset或者cursor。 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id &#x3D; \&quot;20240828035554C02011379EBB6A00E00B\&quot;     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: 用户cookie(如果你需要使用自己的账号搜索，或者遇到接口报错，可以自行提供cookie，默认不需要提供) ### 返回: - 用户列表  # [English] ### Purpose: - Search user ### Parameters: - keyword: Search keyword - cursor: Page cursor, 0 for the first request, need to provide for the second paging, generally the keyword of this value is offset or cursor. - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id &#x3D; \&quot;20240828035554C02011379EBB6A00E00B\&quot;     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: User cookie (If you need to search with your own account, or encounter an interface error, you can provide the cookie yourself, default is not required) ### Return: - User list  # [示例/Example] keyword &#x3D; \&quot;TikTok\&quot; cursor &#x3D; 0 search_id &#x3D; \&quot;\&quot;
    /// </remarks>
    /// <param name="keyword">搜索关键词/Search keyword</param>
    /// <param name="cursor">翻页游标/Page cursor (optional, default to 0)</param>
    /// <param name="searchId">搜索id，翻页时需要提供/Search id, need to provide when paging (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="cookie">用户cookie(按需提供)/User cookie(if needed) (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchSearchUserApiV1TiktokWebFetchSearchUserGet(
        utility::string_t keyword,
        boost::optional<int32_t> cursor,
        boost::optional<utility::string_t> searchId,
        boost::optional<utility::string_t> cookie
    ) const;
    /// <summary>
    /// 搜索用户/Search user
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 搜索用户 ### 参数: - keyword: 搜索关键词 - cursor: 翻页游标，第一次请求时为0，第二次请求时从上一次请求的返回响应中获取，一般这个值的关键字为offset或者cursor。 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id &#x3D; \&quot;20240828035554C02011379EBB6A00E00B\&quot;     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: 用户cookie(如果你需要使用自己的账号搜索，或者遇到接口报错，可以自行提供cookie，默认不需要提供) ### 返回: - 用户列表  # [English] ### Purpose: - Search user ### Parameters: - keyword: Search keyword - cursor: Page cursor, 0 for the first request, need to provide for the second paging, generally the keyword of this value is offset or cursor. - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id &#x3D; \&quot;20240828035554C02011379EBB6A00E00B\&quot;     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: User cookie (If you need to search with your own account, or encounter an interface error, you can provide the cookie yourself, default is not required) ### Return: - User list  # [示例/Example] keyword &#x3D; \&quot;TikTok\&quot; cursor &#x3D; 0 search_id &#x3D; \&quot;\&quot;
    /// </remarks>
    /// <param name="keyword">搜索关键词/Search keyword</param>
    /// <param name="cursor">翻页游标/Page cursor (optional, default to 0)</param>
    /// <param name="searchId">搜索id，翻页时需要提供/Search id, need to provide when paging (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="cookie">用户cookie(按需提供)/User cookie(if needed) (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchSearchUserApiV1TiktokWebFetchSearchUserGet_0(
        utility::string_t keyword,
        boost::optional<int32_t> cursor,
        boost::optional<utility::string_t> searchId,
        boost::optional<utility::string_t> cookie
    ) const;
    /// <summary>
    /// 搜索视频/Search video
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 搜索视频 ### 参数: - keyword: 搜索关键词 - count: 每页数量，建议保持默认值20。 - cursor: 翻页游标，第一次请求时为0，第二次请求时从上一次请求的返回响应中获取，一般这个值的关键字为offset或者cursor。 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id &#x3D; \&quot;20240828035554C02011379EBB6A00E00B\&quot;     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: 用户cookie(如果你需要使用自己的账号搜索，或者遇到接口报错，可以自行提供cookie，默认不需要提供) ### 返回: - 视频列表  # [English] ### Purpose: - Search video ### Parameters: - keyword: Search keyword - count: Number per page, it is recommended to keep the default value 20. - cursor: Page cursor, 0 for the first request, need to provide for the second paging, generally the keyword of this value is offset or cursor. - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id &#x3D; \&quot;20240828035554C02011379EBB6A00E00B\&quot;     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - offset: Page cursor - cookie: User cookie (If you need to search with your own account, or encounter an interface error, you can provide the cookie yourself, default is not required) ### Return: - Video list  # [示例/Example] keyword &#x3D; \&quot;TikTok\&quot; count &#x3D; 20 offset &#x3D; 0 search_id &#x3D; \&quot;\&quot;
    /// </remarks>
    /// <param name="keyword">搜索关键词/Search keyword</param>
    /// <param name="count">每页数量/Number per page (optional, default to 0)</param>
    /// <param name="offset">翻页游标/Page cursor (optional, default to 0)</param>
    /// <param name="searchId">搜索id，翻页时需要提供/Search id, need to provide when paging (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="cookie">用户cookie(按需提供)/User cookie(if needed) (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchSearchVideoApiV1TiktokWebFetchSearchVideoGet(
        utility::string_t keyword,
        boost::optional<int32_t> count,
        boost::optional<int32_t> offset,
        boost::optional<utility::string_t> searchId,
        boost::optional<utility::string_t> cookie
    ) const;
    /// <summary>
    /// 搜索视频/Search video
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 搜索视频 ### 参数: - keyword: 搜索关键词 - count: 每页数量，建议保持默认值20。 - cursor: 翻页游标，第一次请求时为0，第二次请求时从上一次请求的返回响应中获取，一般这个值的关键字为offset或者cursor。 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id &#x3D; \&quot;20240828035554C02011379EBB6A00E00B\&quot;     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: 用户cookie(如果你需要使用自己的账号搜索，或者遇到接口报错，可以自行提供cookie，默认不需要提供) ### 返回: - 视频列表  # [English] ### Purpose: - Search video ### Parameters: - keyword: Search keyword - count: Number per page, it is recommended to keep the default value 20. - cursor: Page cursor, 0 for the first request, need to provide for the second paging, generally the keyword of this value is offset or cursor. - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id &#x3D; \&quot;20240828035554C02011379EBB6A00E00B\&quot;     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - offset: Page cursor - cookie: User cookie (If you need to search with your own account, or encounter an interface error, you can provide the cookie yourself, default is not required) ### Return: - Video list  # [示例/Example] keyword &#x3D; \&quot;TikTok\&quot; count &#x3D; 20 offset &#x3D; 0 search_id &#x3D; \&quot;\&quot;
    /// </remarks>
    /// <param name="keyword">搜索关键词/Search keyword</param>
    /// <param name="count">每页数量/Number per page (optional, default to 0)</param>
    /// <param name="offset">翻页游标/Page cursor (optional, default to 0)</param>
    /// <param name="searchId">搜索id，翻页时需要提供/Search id, need to provide when paging (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="cookie">用户cookie(按需提供)/User cookie(if needed) (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchSearchVideoApiV1TiktokWebFetchSearchVideoGet_0(
        utility::string_t keyword,
        boost::optional<int32_t> count,
        boost::optional<int32_t> offset,
        boost::optional<utility::string_t> searchId,
        boost::optional<utility::string_t> cookie
    ) const;
    /// <summary>
    /// Tag详情/Tag Detail
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - Tag详情 ### 参数: - tag_name: Tag名称 ### 返回: - Tag详情  # [English] ### Purpose: - Tag Detail ### Parameters: - tag_name: Tag name ### Return: - Tag Detail  # [示例/Example] tag_name &#x3D; \&quot;tiktok\&quot;
    /// </remarks>
    /// <param name="tagName">Tag名称/Tag name</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchTagDetailApiV1TiktokWebFetchTagDetailGet(
        utility::string_t tagName
    ) const;
    /// <summary>
    /// Tag详情/Tag Detail
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - Tag详情 ### 参数: - tag_name: Tag名称 ### 返回: - Tag详情  # [English] ### Purpose: - Tag Detail ### Parameters: - tag_name: Tag name ### Return: - Tag Detail  # [示例/Example] tag_name &#x3D; \&quot;tiktok\&quot;
    /// </remarks>
    /// <param name="tagName">Tag名称/Tag name</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchTagDetailApiV1TiktokWebFetchTagDetailGet_0(
        utility::string_t tagName
    ) const;
    /// <summary>
    /// Tag作品/Tag Post
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - Tag作品 ### 参数: - challengeID: Tag ID - count: 每页数量 - cursor: 翻页游标 ### 返回: - Tag作品  # [English] ### Purpose: - Tag Post ### Parameters: - challengeID: Tag ID - count: Number per page - cursor: Page cursor ### Return: - Tag Post  # [示例/Example] challengeID &#x3D; \&quot;7551\&quot; count &#x3D; 30 cursor &#x3D; 0
    /// </remarks>
    /// <param name="challengeID">Tag ID</param>
    /// <param name="count">每页数量/Number per page (optional, default to 0)</param>
    /// <param name="cursor">翻页游标/Page cursor (optional, default to 0)</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchTagPostApiV1TiktokWebFetchTagPostGet(
        utility::string_t challengeID,
        boost::optional<int32_t> count,
        boost::optional<int32_t> cursor
    ) const;
    /// <summary>
    /// Tag作品/Tag Post
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - Tag作品 ### 参数: - challengeID: Tag ID - count: 每页数量 - cursor: 翻页游标 ### 返回: - Tag作品  # [English] ### Purpose: - Tag Post ### Parameters: - challengeID: Tag ID - count: Number per page - cursor: Page cursor ### Return: - Tag Post  # [示例/Example] challengeID &#x3D; \&quot;7551\&quot; count &#x3D; 30 cursor &#x3D; 0
    /// </remarks>
    /// <param name="challengeID">Tag ID</param>
    /// <param name="count">每页数量/Number per page (optional, default to 0)</param>
    /// <param name="cursor">翻页游标/Page cursor (optional, default to 0)</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchTagPostApiV1TiktokWebFetchTagPostGet_0(
        utility::string_t challengeID,
        boost::optional<int32_t> count,
        boost::optional<int32_t> cursor
    ) const;
    /// <summary>
    /// 通过直播链接获取直播间信息/Get live room information via live link
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 通过直播链接获取直播间信息 - 此接口可获取离线直播间信息 ### 参数: - live_room_url: 直播间链接 ### 返回: - 直播间信息  # [English] ### Purpose: - Get live room information via live link - This interface can get offline live room information ### Parameters: - live_room_url: Live room link ### Return: - Live room information  # [示例/Example] live_room_url &#x3D; \&quot;https://www.tiktok.com/@.caseoh_daily/live\&quot;
    /// </remarks>
    /// <param name="liveRoomUrl">直播间链接/Live room link</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchTiktokLiveDataApiV1TiktokWebFetchTiktokLiveDataGet(
        utility::string_t liveRoomUrl
    ) const;
    /// <summary>
    /// 通过直播链接获取直播间信息/Get live room information via live link
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 通过直播链接获取直播间信息 - 此接口可获取离线直播间信息 ### 参数: - live_room_url: 直播间链接 ### 返回: - 直播间信息  # [English] ### Purpose: - Get live room information via live link - This interface can get offline live room information ### Parameters: - live_room_url: Live room link ### Return: - Live room information  # [示例/Example] live_room_url &#x3D; \&quot;https://www.tiktok.com/@.caseoh_daily/live\&quot;
    /// </remarks>
    /// <param name="liveRoomUrl">直播间链接/Live room link</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchTiktokLiveDataApiV1TiktokWebFetchTiktokLiveDataGet_0(
        utility::string_t liveRoomUrl
    ) const;
    /// <summary>
    /// 获取每日热门内容作品数据/Get daily trending video data
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取每日热门内容作品数据 ### 返回: - 作品数据  # [English] ### Purpose: - Get daily trending video data ### Return: - Video data  # [示例/Example]
    /// </remarks>
    pplx::task<std::shared_ptr<ResponseModel>> fetchTrendingPostApiV1TiktokWebFetchTrendingPostGet(
    ) const;
    /// <summary>
    /// 获取每日热门内容作品数据/Get daily trending video data
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取每日热门内容作品数据 ### 返回: - 作品数据  # [English] ### Purpose: - Get daily trending video data ### Return: - Video data  # [示例/Example]
    /// </remarks>
    pplx::task<std::shared_ptr<ResponseModel>> fetchTrendingPostApiV1TiktokWebFetchTrendingPostGet_0(
    ) const;
    /// <summary>
    /// 获取用户的收藏列表/Get user favorites
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取用户的收藏列表 - 注意: 该接口目前只能获取自己的收藏列表，需要提供自己账号的cookie。 ### 参数: - cookie: 用户cookie - secUid: 用户secUid - cursor: 翻页游标 - count: 每页数量 - coverFormat: 封面格式 ### 返回: - 用户的收藏列表  # [English] ### Purpose: - Get user favorites - Note: This interface can currently only get your own favorites list, you need to provide your account cookie. ### Parameters: - cookie: User cookie - secUid: User secUid - cursor: Page cursor - count: Number per page - coverFormat: Cover format ### Return: - User favorites  # [示例/Example] cookie &#x3D; \&quot;Your_Cookie\&quot; secUid &#x3D; \&quot;Your_SecUid\&quot; cursor &#x3D; 0 count &#x3D; 30 coverFormat &#x3D; 2
    /// </remarks>
    /// <param name="cookie">用户cookie/User cookie</param>
    /// <param name="secUid">用户secUid/User secUid</param>
    /// <param name="cursor">翻页游标/Page cursor (optional, default to 0)</param>
    /// <param name="count">每页数量/Number per page (optional, default to 0)</param>
    /// <param name="coverFormat">封面格式/Cover format (optional, default to 0)</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchUserCollectApiV1TiktokWebFetchUserCollectGet(
        utility::string_t cookie,
        utility::string_t secUid,
        boost::optional<int32_t> cursor,
        boost::optional<int32_t> count,
        boost::optional<int32_t> coverFormat
    ) const;
    /// <summary>
    /// 获取用户的收藏列表/Get user favorites
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取用户的收藏列表 - 注意: 该接口目前只能获取自己的收藏列表，需要提供自己账号的cookie。 ### 参数: - cookie: 用户cookie - secUid: 用户secUid - cursor: 翻页游标 - count: 每页数量 - coverFormat: 封面格式 ### 返回: - 用户的收藏列表  # [English] ### Purpose: - Get user favorites - Note: This interface can currently only get your own favorites list, you need to provide your account cookie. ### Parameters: - cookie: User cookie - secUid: User secUid - cursor: Page cursor - count: Number per page - coverFormat: Cover format ### Return: - User favorites  # [示例/Example] cookie &#x3D; \&quot;Your_Cookie\&quot; secUid &#x3D; \&quot;Your_SecUid\&quot; cursor &#x3D; 0 count &#x3D; 30 coverFormat &#x3D; 2
    /// </remarks>
    /// <param name="cookie">用户cookie/User cookie</param>
    /// <param name="secUid">用户secUid/User secUid</param>
    /// <param name="cursor">翻页游标/Page cursor (optional, default to 0)</param>
    /// <param name="count">每页数量/Number per page (optional, default to 0)</param>
    /// <param name="coverFormat">封面格式/Cover format (optional, default to 0)</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchUserCollectApiV1TiktokWebFetchUserCollectGet_0(
        utility::string_t cookie,
        utility::string_t secUid,
        boost::optional<int32_t> cursor,
        boost::optional<int32_t> count,
        boost::optional<int32_t> coverFormat
    ) const;
    /// <summary>
    /// 获取用户的粉丝列表/Get user followers
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取用户的粉丝列表 ### 参数: - secUid: 用户secUid - count: 每页数量 - maxCursor: 最大游标 - minCursor: 最小游标 ### 返回: - 用户的粉丝列表  # [English] ### Purpose: - Get user followers ### Parameters: - secUid: User secUid - count: Number per page - maxCursor: Max cursor - minCursor: Min cursor ### Return: - User followers  # [示例/Example] secUid &#x3D; \&quot;MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\&quot; count &#x3D; 30 maxCursor &#x3D; 0 minCursor &#x3D; 0
    /// </remarks>
    /// <param name="secUid">用户secUid/User secUid</param>
    /// <param name="count">每页数量/Number per page (optional, default to 0)</param>
    /// <param name="maxCursor">最大游标/Max cursor (optional, default to 0)</param>
    /// <param name="minCursor">最小游标/Min cursor (optional, default to 0)</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchUserFansApiV1TiktokWebFetchUserFansGet(
        utility::string_t secUid,
        boost::optional<int32_t> count,
        boost::optional<int32_t> maxCursor,
        boost::optional<int32_t> minCursor
    ) const;
    /// <summary>
    /// 获取用户的粉丝列表/Get user followers
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取用户的粉丝列表 ### 参数: - secUid: 用户secUid - count: 每页数量 - maxCursor: 最大游标 - minCursor: 最小游标 ### 返回: - 用户的粉丝列表  # [English] ### Purpose: - Get user followers ### Parameters: - secUid: User secUid - count: Number per page - maxCursor: Max cursor - minCursor: Min cursor ### Return: - User followers  # [示例/Example] secUid &#x3D; \&quot;MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\&quot; count &#x3D; 30 maxCursor &#x3D; 0 minCursor &#x3D; 0
    /// </remarks>
    /// <param name="secUid">用户secUid/User secUid</param>
    /// <param name="count">每页数量/Number per page (optional, default to 0)</param>
    /// <param name="maxCursor">最大游标/Max cursor (optional, default to 0)</param>
    /// <param name="minCursor">最小游标/Min cursor (optional, default to 0)</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchUserFansApiV1TiktokWebFetchUserFansGet_0(
        utility::string_t secUid,
        boost::optional<int32_t> count,
        boost::optional<int32_t> maxCursor,
        boost::optional<int32_t> minCursor
    ) const;
    /// <summary>
    /// 获取用户的关注列表/Get user followings
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取用户的关注列表 ### 参数: - secUid: 用户secUid - count: 每页数量 - maxCursor: 最大游标 - minCursor: 最小游标 ### 返回: - 用户的关注列表  # [English] ### Purpose: - Get user followings ### Parameters: - secUid: User secUid - count: Number per page - maxCursor: Max cursor - minCursor: Min cursor ### Return: - User followings  # [示例/Example] secUid &#x3D; \&quot;MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\&quot; count &#x3D; 30 maxCursor &#x3D; 0 minCursor &#x3D; 0
    /// </remarks>
    /// <param name="secUid">用户secUid/User secUid</param>
    /// <param name="count">每页数量/Number per page (optional, default to 0)</param>
    /// <param name="maxCursor">最大游标/Max cursor (optional, default to 0)</param>
    /// <param name="minCursor">最小游标/Min cursor (optional, default to 0)</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchUserFollowApiV1TiktokWebFetchUserFollowGet(
        utility::string_t secUid,
        boost::optional<int32_t> count,
        boost::optional<int32_t> maxCursor,
        boost::optional<int32_t> minCursor
    ) const;
    /// <summary>
    /// 获取用户的关注列表/Get user followings
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取用户的关注列表 ### 参数: - secUid: 用户secUid - count: 每页数量 - maxCursor: 最大游标 - minCursor: 最小游标 ### 返回: - 用户的关注列表  # [English] ### Purpose: - Get user followings ### Parameters: - secUid: User secUid - count: Number per page - maxCursor: Max cursor - minCursor: Min cursor ### Return: - User followings  # [示例/Example] secUid &#x3D; \&quot;MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\&quot; count &#x3D; 30 maxCursor &#x3D; 0 minCursor &#x3D; 0
    /// </remarks>
    /// <param name="secUid">用户secUid/User secUid</param>
    /// <param name="count">每页数量/Number per page (optional, default to 0)</param>
    /// <param name="maxCursor">最大游标/Max cursor (optional, default to 0)</param>
    /// <param name="minCursor">最小游标/Min cursor (optional, default to 0)</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchUserFollowApiV1TiktokWebFetchUserFollowGet_0(
        utility::string_t secUid,
        boost::optional<int32_t> count,
        boost::optional<int32_t> maxCursor,
        boost::optional<int32_t> minCursor
    ) const;
    /// <summary>
    /// 获取用户的点赞列表/Get user likes
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取用户的点赞列表 - 注意: 该接口需要用户点赞列表为公开状态 ### 参数: - secUid: 用户secUid - cursor: 翻页游标 - count: 每页数量，默认为20，不可变更。 - coverFormat: 封面格式 - post_item_list_request_type: 排序方式     - 0：默认排序     - 1：热门排序     - 2：最旧排序 ### 返回: - 用户的点赞列表  # [English] ### Purpose: - Get user likes - Note: This interface requires that the user&#39;s like list be public ### Parameters: - secUid: User secUid - cursor: Page cursor - count: Number per page, default is 20, cannot be changed. - coverFormat: Cover format - post_item_list_request_type: Sort type     - 0: Default sort     - 1: Hot sort     - 2: Oldest sort ### Return: - User likes  # [示例/Example] secUid &#x3D; \&quot;MS4wLjABAAAAq1iRXNduFZpY301UkVpJ1eQT60_NiWS9QQSeNqmNQEDJp0pOF8cpleNEdiJx5_IU\&quot; cursor &#x3D; 0 count &#x3D; 20 coverFormat &#x3D; 2
    /// </remarks>
    /// <param name="secUid">用户secUid/User secUid</param>
    /// <param name="cursor">翻页游标/Page cursor (optional, default to 0)</param>
    /// <param name="count">每页数量/Number per page (optional, default to 0)</param>
    /// <param name="coverFormat">封面格式/Cover format (optional, default to 0)</param>
    /// <param name="postItemListRequestType">排序方式/Sort type (optional, default to 0)</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchUserLikeApiV1TiktokWebFetchUserLikeGet(
        utility::string_t secUid,
        boost::optional<int32_t> cursor,
        boost::optional<int32_t> count,
        boost::optional<int32_t> coverFormat,
        boost::optional<int32_t> postItemListRequestType
    ) const;
    /// <summary>
    /// 获取用户的点赞列表/Get user likes
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取用户的点赞列表 - 注意: 该接口需要用户点赞列表为公开状态 ### 参数: - secUid: 用户secUid - cursor: 翻页游标 - count: 每页数量，默认为20，不可变更。 - coverFormat: 封面格式 - post_item_list_request_type: 排序方式     - 0：默认排序     - 1：热门排序     - 2：最旧排序 ### 返回: - 用户的点赞列表  # [English] ### Purpose: - Get user likes - Note: This interface requires that the user&#39;s like list be public ### Parameters: - secUid: User secUid - cursor: Page cursor - count: Number per page, default is 20, cannot be changed. - coverFormat: Cover format - post_item_list_request_type: Sort type     - 0: Default sort     - 1: Hot sort     - 2: Oldest sort ### Return: - User likes  # [示例/Example] secUid &#x3D; \&quot;MS4wLjABAAAAq1iRXNduFZpY301UkVpJ1eQT60_NiWS9QQSeNqmNQEDJp0pOF8cpleNEdiJx5_IU\&quot; cursor &#x3D; 0 count &#x3D; 20 coverFormat &#x3D; 2
    /// </remarks>
    /// <param name="secUid">用户secUid/User secUid</param>
    /// <param name="cursor">翻页游标/Page cursor (optional, default to 0)</param>
    /// <param name="count">每页数量/Number per page (optional, default to 0)</param>
    /// <param name="coverFormat">封面格式/Cover format (optional, default to 0)</param>
    /// <param name="postItemListRequestType">排序方式/Sort type (optional, default to 0)</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchUserLikeApiV1TiktokWebFetchUserLikeGet_0(
        utility::string_t secUid,
        boost::optional<int32_t> cursor,
        boost::optional<int32_t> count,
        boost::optional<int32_t> coverFormat,
        boost::optional<int32_t> postItemListRequestType
    ) const;
    /// <summary>
    /// 获取用户的合辑列表/Get user mix list
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取用户的合辑列表 ### 参数: - mixId: 合辑id - cursor: 翻页游标 - count: 每页数量 ### 返回: - 用户的合辑列表  # [English] ### Purpose: - Get user mix list ### Parameters: - mixId: Mix id - cursor: Page cursor - count: Number per page ### Return: - User mix list  # [示例/Eample] mixId &#x3D; \&quot;7101538765474106158\&quot; cursor &#x3D; 0 count &#x3D; 30
    /// </remarks>
    /// <param name="mixId">合辑id/Mix id</param>
    /// <param name="cursor">翻页游标/Page cursor (optional, default to 0)</param>
    /// <param name="count">每页数量/Number per page (optional, default to 0)</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchUserMixApiV1TiktokWebFetchUserMixGet(
        utility::string_t mixId,
        boost::optional<int32_t> cursor,
        boost::optional<int32_t> count
    ) const;
    /// <summary>
    /// 获取用户的合辑列表/Get user mix list
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取用户的合辑列表 ### 参数: - mixId: 合辑id - cursor: 翻页游标 - count: 每页数量 ### 返回: - 用户的合辑列表  # [English] ### Purpose: - Get user mix list ### Parameters: - mixId: Mix id - cursor: Page cursor - count: Number per page ### Return: - User mix list  # [示例/Eample] mixId &#x3D; \&quot;7101538765474106158\&quot; cursor &#x3D; 0 count &#x3D; 30
    /// </remarks>
    /// <param name="mixId">合辑id/Mix id</param>
    /// <param name="cursor">翻页游标/Page cursor (optional, default to 0)</param>
    /// <param name="count">每页数量/Number per page (optional, default to 0)</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchUserMixApiV1TiktokWebFetchUserMixGet_0(
        utility::string_t mixId,
        boost::optional<int32_t> cursor,
        boost::optional<int32_t> count
    ) const;
    /// <summary>
    /// 获取用户的播放列表/Get user play list
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取用户的播放列表 ### 参数: - secUid: 用户secUid - cursor: 翻页游标 - count: 每页数量 ### 返回: - 用户的播放列表  # [English] ### Purpose: - Get user play list ### Parameters: - secUid: User secUid - cursor: Page cursor - count: Number per page ### Return: - User play list  # [示例/Eample] secUid &#x3D; \&quot;MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\&quot; cursor &#x3D; 0 count &#x3D; 30
    /// </remarks>
    /// <param name="secUid">用户secUid/User secUid</param>
    /// <param name="cursor">翻页游标/Page cursor (optional, default to 0)</param>
    /// <param name="count">每页数量/Number per page (optional, default to 0)</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchUserPlayListApiV1TiktokWebFetchUserPlayListGet(
        utility::string_t secUid,
        boost::optional<int32_t> cursor,
        boost::optional<int32_t> count
    ) const;
    /// <summary>
    /// 获取用户的播放列表/Get user play list
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取用户的播放列表 ### 参数: - secUid: 用户secUid - cursor: 翻页游标 - count: 每页数量 ### 返回: - 用户的播放列表  # [English] ### Purpose: - Get user play list ### Parameters: - secUid: User secUid - cursor: Page cursor - count: Number per page ### Return: - User play list  # [示例/Eample] secUid &#x3D; \&quot;MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\&quot; cursor &#x3D; 0 count &#x3D; 30
    /// </remarks>
    /// <param name="secUid">用户secUid/User secUid</param>
    /// <param name="cursor">翻页游标/Page cursor (optional, default to 0)</param>
    /// <param name="count">每页数量/Number per page (optional, default to 0)</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchUserPlayListApiV1TiktokWebFetchUserPlayListGet_0(
        utility::string_t secUid,
        boost::optional<int32_t> cursor,
        boost::optional<int32_t> count
    ) const;
    /// <summary>
    /// 获取用户的作品列表/Get user posts
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取用户的作品列表 ### 参数: - secUid: 用户secUid - cursor: 翻页游标 - count: 每页数量，默认为20，不可变更。 - coverFormat: 封面格式 - post_item_list_request_type: 排序方式     - 0：默认排序     - 1：热门排序     - 2：最旧排序 ### 返回: - 用户的作品列表  # [English] ### Purpose: - Get user posts ### Parameters: - secUid: User secUid - cursor: Page cursor - count: Number per page, default is 20, cannot be changed. - coverFormat: Cover format - post_item_list_request_type: Sort type     - 0: Default sort     - 1: Hot sort     - 2: Oldest sort ### Return: - User posts  # [示例/Example] secUid &#x3D; \&quot;MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\&quot; cursor &#x3D; 0 count &#x3D; 20 coverFormat &#x3D; 2
    /// </remarks>
    /// <param name="secUid">用户secUid/User secUid</param>
    /// <param name="cursor">翻页游标/Page cursor (optional, default to 0)</param>
    /// <param name="count">每页数量/Number per page (optional, default to 0)</param>
    /// <param name="coverFormat">封面格式/Cover format (optional, default to 0)</param>
    /// <param name="postItemListRequestType">排序方式/Sort type (optional, default to 0)</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchUserPostApiV1TiktokWebFetchUserPostGet(
        utility::string_t secUid,
        boost::optional<int32_t> cursor,
        boost::optional<int32_t> count,
        boost::optional<int32_t> coverFormat,
        boost::optional<int32_t> postItemListRequestType
    ) const;
    /// <summary>
    /// 获取用户的作品列表/Get user posts
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取用户的作品列表 ### 参数: - secUid: 用户secUid - cursor: 翻页游标 - count: 每页数量，默认为20，不可变更。 - coverFormat: 封面格式 - post_item_list_request_type: 排序方式     - 0：默认排序     - 1：热门排序     - 2：最旧排序 ### 返回: - 用户的作品列表  # [English] ### Purpose: - Get user posts ### Parameters: - secUid: User secUid - cursor: Page cursor - count: Number per page, default is 20, cannot be changed. - coverFormat: Cover format - post_item_list_request_type: Sort type     - 0: Default sort     - 1: Hot sort     - 2: Oldest sort ### Return: - User posts  # [示例/Example] secUid &#x3D; \&quot;MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\&quot; cursor &#x3D; 0 count &#x3D; 20 coverFormat &#x3D; 2
    /// </remarks>
    /// <param name="secUid">用户secUid/User secUid</param>
    /// <param name="cursor">翻页游标/Page cursor (optional, default to 0)</param>
    /// <param name="count">每页数量/Number per page (optional, default to 0)</param>
    /// <param name="coverFormat">封面格式/Cover format (optional, default to 0)</param>
    /// <param name="postItemListRequestType">排序方式/Sort type (optional, default to 0)</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchUserPostApiV1TiktokWebFetchUserPostGet_0(
        utility::string_t secUid,
        boost::optional<int32_t> cursor,
        boost::optional<int32_t> count,
        boost::optional<int32_t> coverFormat,
        boost::optional<int32_t> postItemListRequestType
    ) const;
    /// <summary>
    /// 获取用户的个人信息/Get user profile
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取用户的个人信息 ### 参数: - secUid: 用户secUid - uniqueId: 用户uniqueId - secUid和uniqueId至少提供一个, 优先使用uniqueId, 也就是用户主页的链接中的用户名。 ### 返回: - 用户的个人信息  # [English] ### Purpose: - Get user profile ### Parameters: - secUid: User secUid - uniqueId: User uniqueId - At least one of secUid and uniqueId is provided, and uniqueId is preferred, that is, the username in the user&#39;s homepage link. ### Return: - User profile  # [示例/Example] secUid &#x3D; \&quot;MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\&quot; uniqueId &#x3D; \&quot;tiktok\&quot;
    /// </remarks>
    /// <param name="uniqueId">用户uniqueId/User uniqueId (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="secUid">用户secUid/User secUid (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchUserProfileApiV1TiktokWebFetchUserProfileGet(
        boost::optional<utility::string_t> uniqueId,
        boost::optional<utility::string_t> secUid
    ) const;
    /// <summary>
    /// 获取用户的个人信息/Get user profile
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取用户的个人信息 ### 参数: - secUid: 用户secUid - uniqueId: 用户uniqueId - secUid和uniqueId至少提供一个, 优先使用uniqueId, 也就是用户主页的链接中的用户名。 ### 返回: - 用户的个人信息  # [English] ### Purpose: - Get user profile ### Parameters: - secUid: User secUid - uniqueId: User uniqueId - At least one of secUid and uniqueId is provided, and uniqueId is preferred, that is, the username in the user&#39;s homepage link. ### Return: - User profile  # [示例/Example] secUid &#x3D; \&quot;MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\&quot; uniqueId &#x3D; \&quot;tiktok\&quot;
    /// </remarks>
    /// <param name="uniqueId">用户uniqueId/User uniqueId (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="secUid">用户secUid/User secUid (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchUserProfileApiV1TiktokWebFetchUserProfileGet_0(
        boost::optional<utility::string_t> uniqueId,
        boost::optional<utility::string_t> secUid
    ) const;
    /// <summary>
    /// 生成真实msToken/Generate real msToken
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 生成真实msToken ### 返回: - 真实msToken  # [English] ### Purpose: - Generate real msToken ### Return: - Real msToken
    /// </remarks>
    pplx::task<std::shared_ptr<ResponseModel>> generateRealMsTokenApiV1TiktokWebGenerateRealMsTokenGet(
    ) const;
    /// <summary>
    /// 生成真实msToken/Generate real msToken
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 生成真实msToken ### 返回: - 真实msToken  # [English] ### Purpose: - Generate real msToken ### Return: - Real msToken
    /// </remarks>
    pplx::task<std::shared_ptr<ResponseModel>> generateRealMsTokenApiV1TiktokWebGenerateRealMsTokenGet_0(
    ) const;
    /// <summary>
    /// 生成ttwid/Generate ttwid
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 生成ttwid ### 参数: - cookie: 用户cookie ### 返回: - ttwid  # [English] ### Purpose: - Generate ttwid ### Parameters: - cookie: User cookie ### Return: - ttwid  # [示例/Example] cookie &#x3D; \&quot;Your_Cookie\&quot;
    /// </remarks>
    /// <param name="cookie">用户cookie/User cookie</param>
    pplx::task<std::shared_ptr<ResponseModel>> generateTtwidApiV1TiktokWebGenerateTtwidGet(
        utility::string_t cookie
    ) const;
    /// <summary>
    /// 生成ttwid/Generate ttwid
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 生成ttwid ### 参数: - cookie: 用户cookie ### 返回: - ttwid  # [English] ### Purpose: - Generate ttwid ### Parameters: - cookie: User cookie ### Return: - ttwid  # [示例/Example] cookie &#x3D; \&quot;Your_Cookie\&quot;
    /// </remarks>
    /// <param name="cookie">用户cookie/User cookie</param>
    pplx::task<std::shared_ptr<ResponseModel>> generateTtwidApiV1TiktokWebGenerateTtwidGet_0(
        utility::string_t cookie
    ) const;
    /// <summary>
    /// 生成xbogus/Generate xbogus
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 生成xbogus ### 参数: - url: 未签名的API URL - user_agent: 用户浏览器User-Agent ### 返回: - xbogus  # [English] ### Purpose: - Generate xbogus ### Parameters: - url: Unsigned API URL - user_agent: User browser User-Agent ### Return: - xbogus  # [示例/Example]  &#x60;&#x60;&#x60;json {     \&quot;url\&quot;: \&quot;https://www.douyin.com/aweme/v1/web/aweme/detail/?aweme_id&#x3D;7148736076176215311&amp;device_platform&#x3D;webapp&amp;aid&#x3D;6383&amp;channel&#x3D;channel_pc_web&amp;pc_client_type&#x3D;1&amp;version_code&#x3D;170400&amp;version_name&#x3D;17.4.0&amp;cookie_enabled&#x3D;true&amp;screen_width&#x3D;1920&amp;screen_height&#x3D;1080&amp;browser_language&#x3D;zh-CN&amp;browser_platform&#x3D;Win32&amp;browser_name&#x3D;Edge&amp;browser_version&#x3D;117.0.2045.47&amp;browser_online&#x3D;true&amp;engine_name&#x3D;Blink&amp;engine_version&#x3D;117.0.0.0&amp;os_name&#x3D;Windows&amp;os_version&#x3D;10&amp;cpu_core_num&#x3D;128&amp;device_memory&#x3D;10240&amp;platform&#x3D;PC&amp;downlink&#x3D;10&amp;effective_type&#x3D;4g&amp;round_trip_time&#x3D;100\&quot;,     \&quot;user_agent\&quot;: \&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36\&quot; }
    /// </remarks>
    /// <param name="xBogusModel"> (optional)</param>
    pplx::task<std::shared_ptr<ResponseModel>> generateXbogusApiV1TiktokWebGenerateXbogusPost(
        boost::optional<std::shared_ptr<XBogusModel>> xBogusModel
    ) const;
    /// <summary>
    /// 生成xbogus/Generate xbogus
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 生成xbogus ### 参数: - url: 未签名的API URL - user_agent: 用户浏览器User-Agent ### 返回: - xbogus  # [English] ### Purpose: - Generate xbogus ### Parameters: - url: Unsigned API URL - user_agent: User browser User-Agent ### Return: - xbogus  # [示例/Example]  &#x60;&#x60;&#x60;json {     \&quot;url\&quot;: \&quot;https://www.douyin.com/aweme/v1/web/aweme/detail/?aweme_id&#x3D;7148736076176215311&amp;device_platform&#x3D;webapp&amp;aid&#x3D;6383&amp;channel&#x3D;channel_pc_web&amp;pc_client_type&#x3D;1&amp;version_code&#x3D;170400&amp;version_name&#x3D;17.4.0&amp;cookie_enabled&#x3D;true&amp;screen_width&#x3D;1920&amp;screen_height&#x3D;1080&amp;browser_language&#x3D;zh-CN&amp;browser_platform&#x3D;Win32&amp;browser_name&#x3D;Edge&amp;browser_version&#x3D;117.0.2045.47&amp;browser_online&#x3D;true&amp;engine_name&#x3D;Blink&amp;engine_version&#x3D;117.0.0.0&amp;os_name&#x3D;Windows&amp;os_version&#x3D;10&amp;cpu_core_num&#x3D;128&amp;device_memory&#x3D;10240&amp;platform&#x3D;PC&amp;downlink&#x3D;10&amp;effective_type&#x3D;4g&amp;round_trip_time&#x3D;100\&quot;,     \&quot;user_agent\&quot;: \&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36\&quot; }
    /// </remarks>
    /// <param name="xBogusModel"> (optional)</param>
    pplx::task<std::shared_ptr<ResponseModel>> generateXbogusApiV1TiktokWebGenerateXbogusPost_0(
        boost::optional<std::shared_ptr<XBogusModel>> xBogusModel
    ) const;
    /// <summary>
    /// 提取列表作品id/Extract list video id
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 提取列表作品id ### 参数: - url: 作品链接 (最多支持20个链接) ### 返回: - 作品id  # [English] ### Purpose: - Extract list video id ### Parameters: - url: Video link (Support up to 20 links) ### Return: - Video id  # [示例/Example] url &#x3D; [\&quot;https://www.tiktok.com/@owlcitymusic/video/7218694761253735723\&quot;]
    /// </remarks>
    /// <param name="utilityStringT"> (optional)</param>
    pplx::task<std::shared_ptr<ResponseModel>> getAllAwemeIdApiV1TiktokWebGetAllAwemeIdPost(
        boost::optional<std::vector<utility::string_t>> utilityStringT
    ) const;
    /// <summary>
    /// 提取列表作品id/Extract list video id
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 提取列表作品id ### 参数: - url: 作品链接 (最多支持20个链接) ### 返回: - 作品id  # [English] ### Purpose: - Extract list video id ### Parameters: - url: Video link (Support up to 20 links) ### Return: - Video id  # [示例/Example] url &#x3D; [\&quot;https://www.tiktok.com/@owlcitymusic/video/7218694761253735723\&quot;]
    /// </remarks>
    /// <param name="utilityStringT"> (optional)</param>
    pplx::task<std::shared_ptr<ResponseModel>> getAllAwemeIdApiV1TiktokWebGetAllAwemeIdPost_0(
        boost::optional<std::vector<utility::string_t>> utilityStringT
    ) const;
    /// <summary>
    /// 提取列表用户sec_user_id/Extract list user sec_user_id
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 提取列表用户id ### 参数: - url: 用户主页链接（最多支持10个链接）、 ### 返回: - 如果链接成功获取到sec_user_id，则返回sec_user_id，否则返回原始的输入链接，后续可以手动校验链接无法获取sec_user_id的原因。  # [English] ### Purpose: - Extract list user id ### Parameters: - url: User homepage link (Support up to 10 links) ### Return: - If the sec_user_id is successfully obtained, the sec_user_id is returned, otherwise the original input link is returned, and the reason why the sec_user_id cannot be obtained can be manually verified later.  # [示例/Example] url &#x3D; [\&quot;https://www.tiktok.com/@tiktok\&quot;]
    /// </remarks>
    /// <param name="utilityStringT"> (optional)</param>
    pplx::task<std::shared_ptr<ResponseModel>> getAllSecUserIdApiV1TiktokWebGetAllSecUserIdPost(
        boost::optional<std::vector<utility::string_t>> utilityStringT
    ) const;
    /// <summary>
    /// 提取列表用户sec_user_id/Extract list user sec_user_id
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 提取列表用户id ### 参数: - url: 用户主页链接（最多支持10个链接）、 ### 返回: - 如果链接成功获取到sec_user_id，则返回sec_user_id，否则返回原始的输入链接，后续可以手动校验链接无法获取sec_user_id的原因。  # [English] ### Purpose: - Extract list user id ### Parameters: - url: User homepage link (Support up to 10 links) ### Return: - If the sec_user_id is successfully obtained, the sec_user_id is returned, otherwise the original input link is returned, and the reason why the sec_user_id cannot be obtained can be manually verified later.  # [示例/Example] url &#x3D; [\&quot;https://www.tiktok.com/@tiktok\&quot;]
    /// </remarks>
    /// <param name="utilityStringT"> (optional)</param>
    pplx::task<std::shared_ptr<ResponseModel>> getAllSecUserIdApiV1TiktokWebGetAllSecUserIdPost_0(
        boost::optional<std::vector<utility::string_t>> utilityStringT
    ) const;
    /// <summary>
    /// 获取列表unique_id/Get list unique_id
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取列表unique_id ### 参数: - url: 用户主页链接 (最多支持20个链接) ### 返回: - unique_id  # [English] ### Purpose: - Get list unique_id ### Parameters: - url: User homepage link (Support up to 20 links) ### Return: - unique_id  # [示例/Example] url &#x3D; [\&quot;https://www.tiktok.com/@tiktok\&quot;]
    /// </remarks>
    /// <param name="utilityStringT"> (optional)</param>
    pplx::task<std::shared_ptr<ResponseModel>> getAllUniqueIdApiV1TiktokWebGetAllUniqueIdPost(
        boost::optional<std::vector<utility::string_t>> utilityStringT
    ) const;
    /// <summary>
    /// 获取列表unique_id/Get list unique_id
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取列表unique_id ### 参数: - url: 用户主页链接 (最多支持20个链接) ### 返回: - unique_id  # [English] ### Purpose: - Get list unique_id ### Parameters: - url: User homepage link (Support up to 20 links) ### Return: - unique_id  # [示例/Example] url &#x3D; [\&quot;https://www.tiktok.com/@tiktok\&quot;]
    /// </remarks>
    /// <param name="utilityStringT"> (optional)</param>
    pplx::task<std::shared_ptr<ResponseModel>> getAllUniqueIdApiV1TiktokWebGetAllUniqueIdPost_0(
        boost::optional<std::vector<utility::string_t>> utilityStringT
    ) const;
    /// <summary>
    /// 提取单个作品id/Extract single video id
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 提取单个作品id ### 参数: - url: 作品链接 ### 返回: - 作品id  # [English] ### Purpose: - Extract single video id ### Parameters: - url: Video link ### Return: - Video id  # [示例/Example] url &#x3D; \&quot;https://www.tiktok.com/@owlcitymusic/video/7218694761253735723\&quot;
    /// </remarks>
    /// <param name="url">作品链接/Video link</param>
    pplx::task<std::shared_ptr<ResponseModel>> getAwemeIdApiV1TiktokWebGetAwemeIdGet(
        utility::string_t url
    ) const;
    /// <summary>
    /// 提取单个作品id/Extract single video id
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 提取单个作品id ### 参数: - url: 作品链接 ### 返回: - 作品id  # [English] ### Purpose: - Extract single video id ### Parameters: - url: Video link ### Return: - Video id  # [示例/Example] url &#x3D; \&quot;https://www.tiktok.com/@owlcitymusic/video/7218694761253735723\&quot;
    /// </remarks>
    /// <param name="url">作品链接/Video link</param>
    pplx::task<std::shared_ptr<ResponseModel>> getAwemeIdApiV1TiktokWebGetAwemeIdGet_0(
        utility::string_t url
    ) const;
    /// <summary>
    /// 根据直播间链接提取直播间ID/Extract live room ID from live room link
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 根据直播间链接提取直播间Room ID - 支持短链接，如：https://vt.tiktok.com/ZSjuyJnWQ/ - 支持长链接，如：https://www.tiktok.com/@maksukaracun/live ### 参数: - live_room_url: 直播间链接 ### 返回: - 直播间Room ID  # [English] ### Purpose: - Extract live room Room ID from live room link - Support short links, such as: https://vt.tiktok.com/ZSjuyJnWQ/ - Support long links, such as: https://www.tiktok.com/@maksukaracun/live ### Parameters: - live_room_url: Live room link ### Return: - Live room Room ID  # [示例/Example] live_room_url &#x3D; \&quot;https://www.tiktok.com/@maksukaracun/live\&quot;
    /// </remarks>
    /// <param name="liveRoomUrl">直播间链接/Live room link</param>
    pplx::task<std::shared_ptr<ResponseModel>> getLiveRoomIdApiV1TiktokWebGetLiveRoomIdGet(
        utility::string_t liveRoomUrl
    ) const;
    /// <summary>
    /// 根据直播间链接提取直播间ID/Extract live room ID from live room link
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 根据直播间链接提取直播间Room ID - 支持短链接，如：https://vt.tiktok.com/ZSjuyJnWQ/ - 支持长链接，如：https://www.tiktok.com/@maksukaracun/live ### 参数: - live_room_url: 直播间链接 ### 返回: - 直播间Room ID  # [English] ### Purpose: - Extract live room Room ID from live room link - Support short links, such as: https://vt.tiktok.com/ZSjuyJnWQ/ - Support long links, such as: https://www.tiktok.com/@maksukaracun/live ### Parameters: - live_room_url: Live room link ### Return: - Live room Room ID  # [示例/Example] live_room_url &#x3D; \&quot;https://www.tiktok.com/@maksukaracun/live\&quot;
    /// </remarks>
    /// <param name="liveRoomUrl">直播间链接/Live room link</param>
    pplx::task<std::shared_ptr<ResponseModel>> getLiveRoomIdApiV1TiktokWebGetLiveRoomIdGet_0(
        utility::string_t liveRoomUrl
    ) const;
    /// <summary>
    /// 提取用户sec_user_id/Extract user sec_user_id
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 提取列表用户id ### 参数: - url: 用户主页链接 ### 返回: - 用户id  # [English] ### Purpose: - Extract list user id ### Parameters: - url: User homepage link ### Return: - User id  # [示例/Example] url &#x3D; \&quot;https://www.tiktok.com/@tiktok\&quot;
    /// </remarks>
    /// <param name="url">用户主页链接/User homepage link</param>
    pplx::task<std::shared_ptr<ResponseModel>> getSecUserIdApiV1TiktokWebGetSecUserIdGet(
        utility::string_t url
    ) const;
    /// <summary>
    /// 提取用户sec_user_id/Extract user sec_user_id
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 提取列表用户id ### 参数: - url: 用户主页链接 ### 返回: - 用户id  # [English] ### Purpose: - Extract list user id ### Parameters: - url: User homepage link ### Return: - User id  # [示例/Example] url &#x3D; \&quot;https://www.tiktok.com/@tiktok\&quot;
    /// </remarks>
    /// <param name="url">用户主页链接/User homepage link</param>
    pplx::task<std::shared_ptr<ResponseModel>> getSecUserIdApiV1TiktokWebGetSecUserIdGet_0(
        utility::string_t url
    ) const;
    /// <summary>
    /// 获取用户unique_id/Get user unique_id
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取用户unique_id ### 参数: - url: 用户主页链接 ### 返回: - unique_id  # [English] ### Purpose: - Get user unique_id ### Parameters: - url: User homepage link ### Return: - unique_id  # [示例/Example] url &#x3D; \&quot;https://www.tiktok.com/@tiktok\&quot;
    /// </remarks>
    /// <param name="url">用户主页链接/User homepage link</param>
    pplx::task<std::shared_ptr<ResponseModel>> getUniqueIdApiV1TiktokWebGetUniqueIdGet(
        utility::string_t url
    ) const;
    /// <summary>
    /// 获取用户unique_id/Get user unique_id
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取用户unique_id ### 参数: - url: 用户主页链接 ### 返回: - unique_id  # [English] ### Purpose: - Get user unique_id ### Parameters: - url: User homepage link ### Return: - unique_id  # [示例/Example] url &#x3D; \&quot;https://www.tiktok.com/@tiktok\&quot;
    /// </remarks>
    /// <param name="url">用户主页链接/User homepage link</param>
    pplx::task<std::shared_ptr<ResponseModel>> getUniqueIdApiV1TiktokWebGetUniqueIdGet_0(
        utility::string_t url
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* IO_TIKHUB_CLIENT_API_TikTokWebAPIApi_H_ */

