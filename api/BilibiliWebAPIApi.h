/**
 * TikHub.io - Your Ultimate Social Media Data & API Marketplace
 * High-performance asynchronous Douyin(抖音) TikTok Xiaohongshu(小红书) Kuaishou(快手) Weibo(微博) Instagram YouTube(油管) Twitter(X) Captcha Solver(验证码解决器) Temp Mail(临时邮箱) API(接口).
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BilibiliWebAPIApi.h
 *
 * 
 */

#ifndef IO_TIKHUB_CLIENT_API_BilibiliWebAPIApi_H_
#define IO_TIKHUB_CLIENT_API_BilibiliWebAPIApi_H_


#include "../ApiClient.h"

#include "HttpValidationError.h"
#include "ResponseModel.h"
#include <cpprest/details/basic_types.h>


#include <boost/optional.hpp>

namespace io {
namespace tikhub {
namespace client {
namespace api {

using namespace org::openapitools::client::model;



class  BilibiliWebAPIApi 
{
public:

    explicit BilibiliWebAPIApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~BilibiliWebAPIApi();

    /// <summary>
    /// 获取所有直播分区列表/Get a list of all live areas
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取所有直播分区列表 ### 参数: ### 返回: - 所有直播分区列表  # [English] ### Purpose: - Get a list of all live areas ### Parameters: ### Return: - list of all live areas  # [示例/Example]
    /// </remarks>
    pplx::task<std::shared_ptr<ResponseModel>> fetchCollectFoldersApiV1BilibiliWebFetchAllLiveAreasGet(
    ) const;
    /// <summary>
    /// 获取所有直播分区列表/Get a list of all live areas
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取所有直播分区列表 ### 参数: ### 返回: - 所有直播分区列表  # [English] ### Purpose: - Get a list of all live areas ### Parameters: ### Return: - list of all live areas  # [示例/Example]
    /// </remarks>
    pplx::task<std::shared_ptr<ResponseModel>> fetchCollectFoldersApiV1BilibiliWebFetchAllLiveAreasGet_0(
    ) const;
    /// <summary>
    /// 获取用户所有收藏夹信息/Get user collection folders
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取用户收藏作品数据 ### 参数: - uid: 用户UID ### 返回: - 用户收藏夹信息  # [English] ### Purpose: - Get user collection folders ### Parameters: - uid: User UID ### Return: - user collection folders  # [示例/Example] uid &#x3D; \&quot;178360345\&quot;
    /// </remarks>
    /// <param name="uid">用户UID</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchCollectFoldersApiV1BilibiliWebFetchCollectFoldersGet(
        utility::string_t uid
    ) const;
    /// <summary>
    /// 获取用户所有收藏夹信息/Get user collection folders
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取用户收藏作品数据 ### 参数: - uid: 用户UID ### 返回: - 用户收藏夹信息  # [English] ### Purpose: - Get user collection folders ### Parameters: - uid: User UID ### Return: - user collection folders  # [示例/Example] uid &#x3D; \&quot;178360345\&quot;
    /// </remarks>
    /// <param name="uid">用户UID</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchCollectFoldersApiV1BilibiliWebFetchCollectFoldersGet_0(
        utility::string_t uid
    ) const;
    /// <summary>
    /// 获取综合热门视频信息/Get comprehensive popular video information
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取综合热门视频信息 ### 参数: - pn: 页码 ### 返回: - 综合热门视频信息  # [English] ### Purpose: - Get comprehensive popular video information ### Parameters: - pn: Page number ### Return: - comprehensive popular video information  # [示例/Example] pn &#x3D; 1
    /// </remarks>
    /// <param name="pn">页码/Page number (optional, default to 0)</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchCollectFoldersApiV1BilibiliWebFetchComPopularGet(
        boost::optional<int32_t> pn
    ) const;
    /// <summary>
    /// 获取综合热门视频信息/Get comprehensive popular video information
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取综合热门视频信息 ### 参数: - pn: 页码 ### 返回: - 综合热门视频信息  # [English] ### Purpose: - Get comprehensive popular video information ### Parameters: - pn: Page number ### Return: - comprehensive popular video information  # [示例/Example] pn &#x3D; 1
    /// </remarks>
    /// <param name="pn">页码/Page number (optional, default to 0)</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchCollectFoldersApiV1BilibiliWebFetchComPopularGet_0(
        boost::optional<int32_t> pn
    ) const;
    /// <summary>
    /// 获取视频下指定评论的回复/Get reply to the specified comment
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取视频下指定评论的回复 ### 参数: - bv_id: 作品id - pn: 页码 - rpid: 回复id ### 返回: - 指定评论的回复数据  # [English] ### Purpose: - Get reply to the specified comment ### Parameters: - bv_id: Video id - pn: Page number - rpid: Reply id ### Return: - Reply of the specified comment  # [示例/Example] bv_id &#x3D; \&quot;BV1M1421t7hT\&quot; pn &#x3D; 1 rpid &#x3D; \&quot;237109455120\&quot;
    /// </remarks>
    /// <param name="bvId">作品id/Video id</param>
    /// <param name="rpid">回复id/Reply id</param>
    /// <param name="pn">页码/Page number (optional, default to 0)</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchCollectFoldersApiV1BilibiliWebFetchCommentReplyGet(
        utility::string_t bvId,
        utility::string_t rpid,
        boost::optional<int32_t> pn
    ) const;
    /// <summary>
    /// 获取视频下指定评论的回复/Get reply to the specified comment
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取视频下指定评论的回复 ### 参数: - bv_id: 作品id - pn: 页码 - rpid: 回复id ### 返回: - 指定评论的回复数据  # [English] ### Purpose: - Get reply to the specified comment ### Parameters: - bv_id: Video id - pn: Page number - rpid: Reply id ### Return: - Reply of the specified comment  # [示例/Example] bv_id &#x3D; \&quot;BV1M1421t7hT\&quot; pn &#x3D; 1 rpid &#x3D; \&quot;237109455120\&quot;
    /// </remarks>
    /// <param name="bvId">作品id/Video id</param>
    /// <param name="rpid">回复id/Reply id</param>
    /// <param name="pn">页码/Page number (optional, default to 0)</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchCollectFoldersApiV1BilibiliWebFetchCommentReplyGet_0(
        utility::string_t bvId,
        utility::string_t rpid,
        boost::optional<int32_t> pn
    ) const;
    /// <summary>
    /// 获取指定直播间信息/Get information of specified live room
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取指定直播间信息 ### 参数: - room_id: 直播间ID ### 返回: - 指定直播间信息  # [English] ### Purpose: - Get information of specified live room ### Parameters: - room_id: Live room ID ### Return: - information of specified live room  # [示例/Example] room_id &#x3D; \&quot;22816111\&quot;
    /// </remarks>
    /// <param name="roomId">直播间ID/Live room ID</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchCollectFoldersApiV1BilibiliWebFetchLiveRoomDetailGet(
        utility::string_t roomId
    ) const;
    /// <summary>
    /// 获取指定直播间信息/Get information of specified live room
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取指定直播间信息 ### 参数: - room_id: 直播间ID ### 返回: - 指定直播间信息  # [English] ### Purpose: - Get information of specified live room ### Parameters: - room_id: Live room ID ### Return: - information of specified live room  # [示例/Example] room_id &#x3D; \&quot;22816111\&quot;
    /// </remarks>
    /// <param name="roomId">直播间ID/Live room ID</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchCollectFoldersApiV1BilibiliWebFetchLiveRoomDetailGet_0(
        utility::string_t roomId
    ) const;
    /// <summary>
    /// 获取指定分区正在直播的主播/Get live streamers of specified live area
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取指定分区正在直播的主播 ### 参数: - area_id: 直播分区id - pn: 页码 ### 返回: - 指定分区正在直播的主播  # [English] ### Purpose: - Get live streamers of specified live area ### Parameters: - area_id: Live area ID - pn: Page number ### Return: - live streamers of specified live area  # [示例/Example] area_id &#x3D; \&quot;9\&quot; pn &#x3D; 1
    /// </remarks>
    /// <param name="areaId">直播分区id/Live area ID</param>
    /// <param name="pn">页码/Page number (optional, default to 0)</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchCollectFoldersApiV1BilibiliWebFetchLiveStreamersGet(
        utility::string_t areaId,
        boost::optional<int32_t> pn
    ) const;
    /// <summary>
    /// 获取指定分区正在直播的主播/Get live streamers of specified live area
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取指定分区正在直播的主播 ### 参数: - area_id: 直播分区id - pn: 页码 ### 返回: - 指定分区正在直播的主播  # [English] ### Purpose: - Get live streamers of specified live area ### Parameters: - area_id: Live area ID - pn: Page number ### Return: - live streamers of specified live area  # [示例/Example] area_id &#x3D; \&quot;9\&quot; pn &#x3D; 1
    /// </remarks>
    /// <param name="areaId">直播分区id/Live area ID</param>
    /// <param name="pn">页码/Page number (optional, default to 0)</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchCollectFoldersApiV1BilibiliWebFetchLiveStreamersGet_0(
        utility::string_t areaId,
        boost::optional<int32_t> pn
    ) const;
    /// <summary>
    /// 获取直播间视频流/Get live video data of specified room
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取指定直播间视频流 ### 参数: - room_id: 直播间ID ### 返回: - 指定直播间视频流  # [English] ### Purpose: - Get live video data of specified room ### Parameters: - room_id: Live room ID ### Return: - live video data of specified room  # [示例/Example] room_id &#x3D; \&quot;1815229528\&quot;
    /// </remarks>
    /// <param name="roomId">直播间ID/Live room ID</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchCollectFoldersApiV1BilibiliWebFetchLiveVideosGet(
        utility::string_t roomId
    ) const;
    /// <summary>
    /// 获取直播间视频流/Get live video data of specified room
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取指定直播间视频流 ### 参数: - room_id: 直播间ID ### 返回: - 指定直播间视频流  # [English] ### Purpose: - Get live video data of specified room ### Parameters: - room_id: Live room ID ### Return: - live video data of specified room  # [示例/Example] room_id &#x3D; \&quot;1815229528\&quot;
    /// </remarks>
    /// <param name="roomId">直播间ID/Live room ID</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchCollectFoldersApiV1BilibiliWebFetchLiveVideosGet_0(
        utility::string_t roomId
    ) const;
    /// <summary>
    /// 获取指定用户动态/Get dynamic information of specified user
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取指定用户动态 ### 参数: - uid: 用户UID - offset: 开始索引 ### 返回: - 指定用户动态数据  # [English] ### Purpose: - Get dynamic information of specified user ### Parameters: - uid: User UID - offset: offset ### Return: - dynamic information of specified user  # [示例/Example] uid &#x3D; \&quot;178360345\&quot; offset &#x3D; \&quot;953154282154098691\&quot;
    /// </remarks>
    /// <param name="uid">用户UID</param>
    /// <param name="offset">开始索引/offset (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchCollectFoldersApiV1BilibiliWebFetchUserDynamicGet(
        utility::string_t uid,
        boost::optional<utility::string_t> offset
    ) const;
    /// <summary>
    /// 获取指定用户动态/Get dynamic information of specified user
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取指定用户动态 ### 参数: - uid: 用户UID - offset: 开始索引 ### 返回: - 指定用户动态数据  # [English] ### Purpose: - Get dynamic information of specified user ### Parameters: - uid: User UID - offset: offset ### Return: - dynamic information of specified user  # [示例/Example] uid &#x3D; \&quot;178360345\&quot; offset &#x3D; \&quot;953154282154098691\&quot;
    /// </remarks>
    /// <param name="uid">用户UID</param>
    /// <param name="offset">开始索引/offset (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchCollectFoldersApiV1BilibiliWebFetchUserDynamicGet_0(
        utility::string_t uid,
        boost::optional<utility::string_t> offset
    ) const;
    /// <summary>
    /// 获取指定用户的信息/Get information of specified user
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - uid: 用户UID ### 返回: - 指定用户的个人信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - uid: User UID ### Return: - information of specified user  # [示例/Example] uid &#x3D; \&quot;178360345\&quot;
    /// </remarks>
    /// <param name="uid">用户UID</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchCollectFoldersApiV1BilibiliWebFetchUserProfileGet(
        utility::string_t uid
    ) const;
    /// <summary>
    /// 获取指定用户的信息/Get information of specified user
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - uid: 用户UID ### 返回: - 指定用户的个人信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - uid: User UID ### Return: - information of specified user  # [示例/Example] uid &#x3D; \&quot;178360345\&quot;
    /// </remarks>
    /// <param name="uid">用户UID</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchCollectFoldersApiV1BilibiliWebFetchUserProfileGet_0(
        utility::string_t uid
    ) const;
    /// <summary>
    /// 获取指定视频的评论/Get comments on the specified video
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取指定视频的评论 ### 参数: - bv_id: 作品id - pn: 页码 ### 返回: - 指定视频的评论数据  # [English] ### Purpose: - Get comments on the specified video ### Parameters: - bv_id: Video id - pn: Page number ### Return: - comments of the specified video  # [示例/Example] bv_id &#x3D; \&quot;BV1M1421t7hT\&quot; pn &#x3D; 1
    /// </remarks>
    /// <param name="bvId">作品id/Video id</param>
    /// <param name="pn">页码/Page number (optional, default to 0)</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchCollectFoldersApiV1BilibiliWebFetchVideoCommentsGet(
        utility::string_t bvId,
        boost::optional<int32_t> pn
    ) const;
    /// <summary>
    /// 获取指定视频的评论/Get comments on the specified video
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取指定视频的评论 ### 参数: - bv_id: 作品id - pn: 页码 ### 返回: - 指定视频的评论数据  # [English] ### Purpose: - Get comments on the specified video ### Parameters: - bv_id: Video id - pn: Page number ### Return: - comments of the specified video  # [示例/Example] bv_id &#x3D; \&quot;BV1M1421t7hT\&quot; pn &#x3D; 1
    /// </remarks>
    /// <param name="bvId">作品id/Video id</param>
    /// <param name="pn">页码/Page number (optional, default to 0)</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchCollectFoldersApiV1BilibiliWebFetchVideoCommentsGet_0(
        utility::string_t bvId,
        boost::optional<int32_t> pn
    ) const;
    /// <summary>
    /// 获取综合搜索信息/Get general search data
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取综合搜索信息 ### 参数: - keyword: 搜索关键词 - order: 排序方式     - totalrank 综合排序     - click 最多播放     - pubdate 最新发布     - dm 最多弹幕     - stow 最多收藏 - page: 页码 - page_size: 每页数量 ### 返回: - 综合搜索信息  # [English] ### Purpose: - Get general search data ### Parameters: - keyword: Search keyword - order: Order method     - totalrank Comprehensive sorting     - click Most played     - pubdate Latest release     - dm Most barrage     - stow Most collection - page: Page number - page_size: Number per page ### Return: - General search data  # [示例/Example] keyword &#x3D; \&quot;火影忍者\&quot; order &#x3D; \&quot;totalrank\&quot; page &#x3D; 1 page_size &#x3D; 42
    /// </remarks>
    /// <param name="keyword">搜索关键词/Search keyword</param>
    /// <param name="order">排序方式/Order method</param>
    /// <param name="page">页码/Page number</param>
    /// <param name="pageSize">每页数量/Number per page</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchGeneralSearchApiV1BilibiliWebFetchGeneralSearchGet(
        utility::string_t keyword,
        utility::string_t order,
        int32_t page,
        int32_t pageSize
    ) const;
    /// <summary>
    /// 获取综合搜索信息/Get general search data
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取综合搜索信息 ### 参数: - keyword: 搜索关键词 - order: 排序方式     - totalrank 综合排序     - click 最多播放     - pubdate 最新发布     - dm 最多弹幕     - stow 最多收藏 - page: 页码 - page_size: 每页数量 ### 返回: - 综合搜索信息  # [English] ### Purpose: - Get general search data ### Parameters: - keyword: Search keyword - order: Order method     - totalrank Comprehensive sorting     - click Most played     - pubdate Latest release     - dm Most barrage     - stow Most collection - page: Page number - page_size: Number per page ### Return: - General search data  # [示例/Example] keyword &#x3D; \&quot;火影忍者\&quot; order &#x3D; \&quot;totalrank\&quot; page &#x3D; 1 page_size &#x3D; 42
    /// </remarks>
    /// <param name="keyword">搜索关键词/Search keyword</param>
    /// <param name="order">排序方式/Order method</param>
    /// <param name="page">页码/Page number</param>
    /// <param name="pageSize">每页数量/Number per page</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchGeneralSearchApiV1BilibiliWebFetchGeneralSearchGet_0(
        utility::string_t keyword,
        utility::string_t order,
        int32_t page,
        int32_t pageSize
    ) const;
    /// <summary>
    /// 获取热门搜索信息/Get hot search data
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取热门搜索信息 ### 参数: - limit: 返回数量 ### 返回: - 热门搜索信息 ### 说明: - limit默认为10，上限为50  # [English] ### Purpose: - Get hot search data ### Parameters: - limit: Return number ### Return: - Hot search data ### Note: - limit default is 10, maximum is 50  # [示例/Example] limit &#x3D; 10
    /// </remarks>
    /// <param name="limit">返回数量/Return number</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchHotSearchApiV1BilibiliWebFetchHotSearchGet(
        utility::string_t limit
    ) const;
    /// <summary>
    /// 获取热门搜索信息/Get hot search data
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取热门搜索信息 ### 参数: - limit: 返回数量 ### 返回: - 热门搜索信息 ### 说明: - limit默认为10，上限为50  # [English] ### Purpose: - Get hot search data ### Parameters: - limit: Return number ### Return: - Hot search data ### Note: - limit default is 10, maximum is 50  # [示例/Example] limit &#x3D; 10
    /// </remarks>
    /// <param name="limit">返回数量/Return number</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchHotSearchApiV1BilibiliWebFetchHotSearchGet_0(
        utility::string_t limit
    ) const;
    /// <summary>
    /// 通过bv号获得视频aid号/Generate aid by bvid
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 通过bv号获得视频aid号 ### 参数: - bv_id: 作品id ### 返回: - 视频aid号  # [English] ### Purpose: - Generate aid by bvid ### Parameters: - bv_id: Video id ### Return: - Video aid  # [示例/Example] bv_id &#x3D; \&quot;BV1M1421t7hT\&quot;
    /// </remarks>
    /// <param name="bvId">作品id/Video id</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchOneVideoApiV1BilibiliWebBvToAidGet(
        utility::string_t bvId
    ) const;
    /// <summary>
    /// 通过bv号获得视频aid号/Generate aid by bvid
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 通过bv号获得视频aid号 ### 参数: - bv_id: 作品id ### 返回: - 视频aid号  # [English] ### Purpose: - Generate aid by bvid ### Parameters: - bv_id: Video id ### Return: - Video aid  # [示例/Example] bv_id &#x3D; \&quot;BV1M1421t7hT\&quot;
    /// </remarks>
    /// <param name="bvId">作品id/Video id</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchOneVideoApiV1BilibiliWebBvToAidGet_0(
        utility::string_t bvId
    ) const;
    /// <summary>
    /// 获取单个视频详情信息/Get single video data
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取单个视频详情信息 ### 参数: - bv_id: 作品id ### 返回: - 视频详情信息  # [English] ### Purpose: - Get single video data ### Parameters: - bv_id: Video id ### Return: - Video data  # [示例/Example] bv_id &#x3D; \&quot;BV1M1421t7hT\&quot;
    /// </remarks>
    /// <param name="bvId">作品id/Video id</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchOneVideoApiV1BilibiliWebFetchOneVideoGet(
        utility::string_t bvId
    ) const;
    /// <summary>
    /// 获取单个视频详情信息/Get single video data
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取单个视频详情信息 ### 参数: - bv_id: 作品id ### 返回: - 视频详情信息  # [English] ### Purpose: - Get single video data ### Parameters: - bv_id: Video id ### Return: - Video data  # [示例/Example] bv_id &#x3D; \&quot;BV1M1421t7hT\&quot;
    /// </remarks>
    /// <param name="bvId">作品id/Video id</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchOneVideoApiV1BilibiliWebFetchOneVideoGet_0(
        utility::string_t bvId
    ) const;
    /// <summary>
    /// 获取视频实时弹幕/Get Video Danmaku
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取视频实时弹幕 ### 参数: - cid: 作品cid ### 返回: - 视频实时弹幕  # [English] ### Purpose: - Get Video Danmaku ### Parameters: - cid: Video cid ### Return: - Video Danmaku  # [示例/Example] cid &#x3D; \&quot;1639235405\&quot;
    /// </remarks>
    /// <param name="cid">作品cid/Video cid</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchOneVideoApiV1BilibiliWebFetchVideoDanmakuGet(
        utility::string_t cid
    ) const;
    /// <summary>
    /// 获取视频实时弹幕/Get Video Danmaku
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取视频实时弹幕 ### 参数: - cid: 作品cid ### 返回: - 视频实时弹幕  # [English] ### Purpose: - Get Video Danmaku ### Parameters: - cid: Video cid ### Return: - Video Danmaku  # [示例/Example] cid &#x3D; \&quot;1639235405\&quot;
    /// </remarks>
    /// <param name="cid">作品cid/Video cid</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchOneVideoApiV1BilibiliWebFetchVideoDanmakuGet_0(
        utility::string_t cid
    ) const;
    /// <summary>
    /// 通过bv号获得视频分p信息/Get Video Parts By bvid
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 通过bv号获得视频分p信息 ### 参数: - bv_id: 作品id ### 返回: - 视频分p信息  # [English] ### Purpose: - Get Video Parts By bvid ### Parameters: - bv_id: Video id ### Return: - Video Parts  # [示例/Example] bv_id &#x3D; \&quot;BV1vf421i7hV\&quot;
    /// </remarks>
    /// <param name="bvId">作品id/Video id</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchOneVideoApiV1BilibiliWebFetchVideoPartsGet(
        utility::string_t bvId
    ) const;
    /// <summary>
    /// 通过bv号获得视频分p信息/Get Video Parts By bvid
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 通过bv号获得视频分p信息 ### 参数: - bv_id: 作品id ### 返回: - 视频分p信息  # [English] ### Purpose: - Get Video Parts By bvid ### Parameters: - bv_id: Video id ### Return: - Video Parts  # [示例/Example] bv_id &#x3D; \&quot;BV1vf421i7hV\&quot;
    /// </remarks>
    /// <param name="bvId">作品id/Video id</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchOneVideoApiV1BilibiliWebFetchVideoPartsGet_0(
        utility::string_t bvId
    ) const;
    /// <summary>
    /// 获取视频流地址/Get video playurl
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取视频流地址 ### 参数: - bv_id: 作品id - cid: 作品cid ### 返回: - 视频流地址  # [English] ### Purpose: - Get video playurl ### Parameters: - bv_id: Video id - cid: Video cid ### Return: - Video playurl  # [示例/Example] bv_id &#x3D; \&quot;BV1y7411Q7Eq\&quot; cid &#x3D; \&quot;171776208\&quot;
    /// </remarks>
    /// <param name="bvId">作品id/Video id</param>
    /// <param name="cid">作品cid/Video cid</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchOneVideoApiV1BilibiliWebFetchVideoPlayurlGet(
        utility::string_t bvId,
        utility::string_t cid
    ) const;
    /// <summary>
    /// 获取视频流地址/Get video playurl
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取视频流地址 ### 参数: - bv_id: 作品id - cid: 作品cid ### 返回: - 视频流地址  # [English] ### Purpose: - Get video playurl ### Parameters: - bv_id: Video id - cid: Video cid ### Return: - Video playurl  # [示例/Example] bv_id &#x3D; \&quot;BV1y7411Q7Eq\&quot; cid &#x3D; \&quot;171776208\&quot;
    /// </remarks>
    /// <param name="bvId">作品id/Video id</param>
    /// <param name="cid">作品cid/Video cid</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchOneVideoApiV1BilibiliWebFetchVideoPlayurlGet_0(
        utility::string_t bvId,
        utility::string_t cid
    ) const;
    /// <summary>
    /// 获取单个视频详情信息V2/Get single video data V2
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取单个视频详情信息V2 ### 参数: - a_id: 作品id - c_id: 作品cid ### 返回: - 视频详情信息V2  # [English] ### Purpose: - Get single video data V2 ### Parameters: - a_id: Video id - c_id: Video cid ### Return: - Video data V2  # [示例/Example] a_id &#x3D; \&quot;114006081739452\&quot; c_id &#x3D; \&quot;28400484458\&quot;
    /// </remarks>
    /// <param name="aId">作品id/Video id</param>
    /// <param name="cId">作品cid/Video cid</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchOneVideoV2ApiV1BilibiliWebFetchOneVideoV2Get(
        utility::string_t aId,
        utility::string_t cId
    ) const;
    /// <summary>
    /// 获取单个视频详情信息V2/Get single video data V2
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取单个视频详情信息V2 ### 参数: - a_id: 作品id - c_id: 作品cid ### 返回: - 视频详情信息V2  # [English] ### Purpose: - Get single video data V2 ### Parameters: - a_id: Video id - c_id: Video cid ### Return: - Video data V2  # [示例/Example] a_id &#x3D; \&quot;114006081739452\&quot; c_id &#x3D; \&quot;28400484458\&quot;
    /// </remarks>
    /// <param name="aId">作品id/Video id</param>
    /// <param name="cId">作品cid/Video cid</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchOneVideoV2ApiV1BilibiliWebFetchOneVideoV2Get_0(
        utility::string_t aId,
        utility::string_t cId
    ) const;
    /// <summary>
    /// 获取指定收藏夹内视频数据/Gets video data from a collection folder
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取指定收藏夹内视频数据 ### 参数: - folder_id: 用户UID - pn: 页码 ### 返回: - 指定收藏夹内视频数据  # [English] ### Purpose: - Gets video data from a collection folder ### Parameters: - folder_id: collection folder id - pn: Page number ### Return: - video data from collection folder  # [示例/Example] folder_id &#x3D; \&quot;1756059545\&quot; pn &#x3D; 1
    /// </remarks>
    /// <param name="folderId">收藏夹id/collection folder id</param>
    /// <param name="pn">页码/Page number (optional, default to 0)</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchUserCollectionVideosApiV1BilibiliWebFetchUserCollectionVideosGet(
        utility::string_t folderId,
        boost::optional<int32_t> pn
    ) const;
    /// <summary>
    /// 获取指定收藏夹内视频数据/Gets video data from a collection folder
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取指定收藏夹内视频数据 ### 参数: - folder_id: 用户UID - pn: 页码 ### 返回: - 指定收藏夹内视频数据  # [English] ### Purpose: - Gets video data from a collection folder ### Parameters: - folder_id: collection folder id - pn: Page number ### Return: - video data from collection folder  # [示例/Example] folder_id &#x3D; \&quot;1756059545\&quot; pn &#x3D; 1
    /// </remarks>
    /// <param name="folderId">收藏夹id/collection folder id</param>
    /// <param name="pn">页码/Page number (optional, default to 0)</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchUserCollectionVideosApiV1BilibiliWebFetchUserCollectionVideosGet_0(
        utility::string_t folderId,
        boost::optional<int32_t> pn
    ) const;
    /// <summary>
    /// 获取用户主页作品数据/Get user homepage video data
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取用户发布的视频数据 ### 参数: - uid: 用户UID - pn: 页码 ### 返回: - 用户发布的视频数据  # [English] ### Purpose: - Get user post video data ### Parameters: - uid: User UID - pn: Page number ### Return: - User posted video data  # [示例/Example] uid &#x3D; \&quot;178360345\&quot; pn &#x3D; 1
    /// </remarks>
    /// <param name="uid">用户UID</param>
    /// <param name="pn">页码/Page number (optional, default to 0)</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchUserPostVideosApiV1BilibiliWebFetchUserPostVideosGet(
        utility::string_t uid,
        boost::optional<int32_t> pn
    ) const;
    /// <summary>
    /// 获取用户主页作品数据/Get user homepage video data
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取用户发布的视频数据 ### 参数: - uid: 用户UID - pn: 页码 ### 返回: - 用户发布的视频数据  # [English] ### Purpose: - Get user post video data ### Parameters: - uid: User UID - pn: Page number ### Return: - User posted video data  # [示例/Example] uid &#x3D; \&quot;178360345\&quot; pn &#x3D; 1
    /// </remarks>
    /// <param name="uid">用户UID</param>
    /// <param name="pn">页码/Page number (optional, default to 0)</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchUserPostVideosApiV1BilibiliWebFetchUserPostVideosGet_0(
        utility::string_t uid,
        boost::optional<int32_t> pn
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* IO_TIKHUB_CLIENT_API_BilibiliWebAPIApi_H_ */

