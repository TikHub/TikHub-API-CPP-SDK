/**
 * TikHub.io - Your Ultimate Social Media Data & API Marketplace
 * High-performance asynchronous Douyin(抖音) TikTok Xiaohongshu(小红书) Kuaishou(快手) Weibo(微博) Instagram YouTube(油管) Twitter(X) Captcha Solver(验证码解决器) Temp Mail(临时邮箱) API(接口).
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CaptchaSolverApi.h
 *
 * 
 */

#ifndef IO_TIKHUB_CLIENT_API_CaptchaSolverApi_H_
#define IO_TIKHUB_CLIENT_API_CaptchaSolverApi_H_


#include "../ApiClient.h"

#include "BodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost.h"
#include "BodyCloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost.h"
#include "BodyHcaptchaApiV1CaptchaHcaptchaPost.h"
#include "BodyRecaptchaV2ApiV1CaptchaRecaptchaV2Post.h"
#include "BodyRecaptchaV3ApiV1CaptchaRecaptchaV3Post.h"
#include "BodyTencentCaptchaApiV1CaptchaTencentCaptchaPost.h"
#include "HttpValidationError.h"
#include "ResponseModel.h"


#include <boost/optional.hpp>

namespace io {
namespace tikhub {
namespace client {
namespace api {

using namespace org::openapitools::client::model;



class  CaptchaSolverApi 
{
public:

    explicit CaptchaSolverApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~CaptchaSolverApi();

    /// <summary>
    /// Amazon Captcha Solver/Amazon验证码解决器
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - Amazon Captcha验证码解决器 ### 参数: - app_id: 在HTML中可以找到网站对应的app_id - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - Amazon Captcha solver ### Parameters: - app_id: The app_id corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] app_id &#x3D; \&quot;10000000\&quot; url &#x3D; \&quot;https://www.amazon.com/\&quot; proxy &#x3D; None
    /// </remarks>
    /// <param name="bodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost"> (optional)</param>
    pplx::task<std::shared_ptr<ResponseModel>> amazonCaptchaApiV1CaptchaAmazonCaptchaPost(
        boost::optional<std::shared_ptr<BodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost>> bodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost
    ) const;
    /// <summary>
    /// Amazon Captcha Solver/Amazon验证码解决器
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - Amazon Captcha验证码解决器 ### 参数: - app_id: 在HTML中可以找到网站对应的app_id - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - Amazon Captcha solver ### Parameters: - app_id: The app_id corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] app_id &#x3D; \&quot;10000000\&quot; url &#x3D; \&quot;https://www.amazon.com/\&quot; proxy &#x3D; None
    /// </remarks>
    /// <param name="bodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost"> (optional)</param>
    pplx::task<std::shared_ptr<ResponseModel>> amazonCaptchaApiV1CaptchaAmazonCaptchaPost_0(
        boost::optional<std::shared_ptr<BodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost>> bodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost
    ) const;
    /// <summary>
    /// Cloudflare Turnstile Solver/Cloudflare Turnstile解决器
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - Cloudflare Turnstile验证码解决器 ### 参数: - sitekey: 在HTML中可以找到网站对应的sitekey - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - Cloudflare Turnstile captcha solver ### Parameters: - sitekey: The sitekey corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - action: Default is None - data: Default is None - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] sitekey &#x3D; \&quot;1x00000000000000000000AA\&quot; url &#x3D; \&quot;https://demo.turnstile.workers.dev\&quot; proxy &#x3D; None
    /// </remarks>
    /// <param name="bodyCloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost"> (optional)</param>
    pplx::task<std::shared_ptr<ResponseModel>> cloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost(
        boost::optional<std::shared_ptr<BodyCloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost>> bodyCloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost
    ) const;
    /// <summary>
    /// Cloudflare Turnstile Solver/Cloudflare Turnstile解决器
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - Cloudflare Turnstile验证码解决器 ### 参数: - sitekey: 在HTML中可以找到网站对应的sitekey - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - Cloudflare Turnstile captcha solver ### Parameters: - sitekey: The sitekey corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - action: Default is None - data: Default is None - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] sitekey &#x3D; \&quot;1x00000000000000000000AA\&quot; url &#x3D; \&quot;https://demo.turnstile.workers.dev\&quot; proxy &#x3D; None
    /// </remarks>
    /// <param name="bodyCloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost"> (optional)</param>
    pplx::task<std::shared_ptr<ResponseModel>> cloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost_0(
        boost::optional<std::shared_ptr<BodyCloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost>> bodyCloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost
    ) const;
    /// <summary>
    /// hCaptcha Solver/hCaptcha解决器
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - hCaptcha验证码解决器 ### 参数: - sitekey: 在HTML中可以找到网站对应的sitekey - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - hCaptcha captcha solver ### Parameters: - sitekey: The sitekey corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] sitekey &#x3D; \&quot;10000000-ffff-ffff-ffff-000000000001\&quot; url &#x3D; \&quot;https://www.hcaptcha.com/\&quot; proxy &#x3D; None
    /// </remarks>
    /// <param name="bodyHcaptchaApiV1CaptchaHcaptchaPost"> (optional)</param>
    pplx::task<std::shared_ptr<ResponseModel>> hcaptchaApiV1CaptchaHcaptchaPost(
        boost::optional<std::shared_ptr<BodyHcaptchaApiV1CaptchaHcaptchaPost>> bodyHcaptchaApiV1CaptchaHcaptchaPost
    ) const;
    /// <summary>
    /// hCaptcha Solver/hCaptcha解决器
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - hCaptcha验证码解决器 ### 参数: - sitekey: 在HTML中可以找到网站对应的sitekey - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - hCaptcha captcha solver ### Parameters: - sitekey: The sitekey corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] sitekey &#x3D; \&quot;10000000-ffff-ffff-ffff-000000000001\&quot; url &#x3D; \&quot;https://www.hcaptcha.com/\&quot; proxy &#x3D; None
    /// </remarks>
    /// <param name="bodyHcaptchaApiV1CaptchaHcaptchaPost"> (optional)</param>
    pplx::task<std::shared_ptr<ResponseModel>> hcaptchaApiV1CaptchaHcaptchaPost_0(
        boost::optional<std::shared_ptr<BodyHcaptchaApiV1CaptchaHcaptchaPost>> bodyHcaptchaApiV1CaptchaHcaptchaPost
    ) const;
    /// <summary>
    /// Recaptcha V2 Solver/Recaptcha V2解决器
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - Recaptcha V2验证码解决器 ### 参数: - sitekey: 在HTML中可以找到网站对应的sitekey - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - Recaptcha V2 captcha solver ### Parameters: - sitekey: The sitekey corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] sitekey &#x3D; \&quot;6Le-wvkSAAAAAPBMRTvw0Q4Muexq9bi0DJwx_mJ-\&quot; url &#x3D; \&quot;https://www.google.com/recaptcha/api2/demo\&quot; proxy &#x3D; None
    /// </remarks>
    /// <param name="bodyRecaptchaV2ApiV1CaptchaRecaptchaV2Post"> (optional)</param>
    pplx::task<std::shared_ptr<ResponseModel>> recaptchaV2ApiV1CaptchaRecaptchaV2Post(
        boost::optional<std::shared_ptr<BodyRecaptchaV2ApiV1CaptchaRecaptchaV2Post>> bodyRecaptchaV2ApiV1CaptchaRecaptchaV2Post
    ) const;
    /// <summary>
    /// Recaptcha V2 Solver/Recaptcha V2解决器
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - Recaptcha V2验证码解决器 ### 参数: - sitekey: 在HTML中可以找到网站对应的sitekey - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - Recaptcha V2 captcha solver ### Parameters: - sitekey: The sitekey corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] sitekey &#x3D; \&quot;6Le-wvkSAAAAAPBMRTvw0Q4Muexq9bi0DJwx_mJ-\&quot; url &#x3D; \&quot;https://www.google.com/recaptcha/api2/demo\&quot; proxy &#x3D; None
    /// </remarks>
    /// <param name="bodyRecaptchaV2ApiV1CaptchaRecaptchaV2Post"> (optional)</param>
    pplx::task<std::shared_ptr<ResponseModel>> recaptchaV2ApiV1CaptchaRecaptchaV2Post_0(
        boost::optional<std::shared_ptr<BodyRecaptchaV2ApiV1CaptchaRecaptchaV2Post>> bodyRecaptchaV2ApiV1CaptchaRecaptchaV2Post
    ) const;
    /// <summary>
    /// Recaptcha V3 Solver/Recaptcha V3解决器
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - Recaptcha V3验证码解决器 ### 参数: - sitekey: 在HTML中可以找到网站对应的sitekey - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - Recaptcha V3 captcha solver ### Parameters: - sitekey: The sitekey corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] sitekey &#x3D; \&quot;6Le-wvkSAAAAAPBMRTvw0Q4Muexq9bi0DJwx_mJ-\&quot; url &#x3D; \&quot;https://www.google.com/recaptcha/api2/demo\&quot; proxy &#x3D; None
    /// </remarks>
    /// <param name="bodyRecaptchaV3ApiV1CaptchaRecaptchaV3Post"> (optional)</param>
    pplx::task<std::shared_ptr<ResponseModel>> recaptchaV3ApiV1CaptchaRecaptchaV3Post(
        boost::optional<std::shared_ptr<BodyRecaptchaV3ApiV1CaptchaRecaptchaV3Post>> bodyRecaptchaV3ApiV1CaptchaRecaptchaV3Post
    ) const;
    /// <summary>
    /// Recaptcha V3 Solver/Recaptcha V3解决器
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - Recaptcha V3验证码解决器 ### 参数: - sitekey: 在HTML中可以找到网站对应的sitekey - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - Recaptcha V3 captcha solver ### Parameters: - sitekey: The sitekey corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] sitekey &#x3D; \&quot;6Le-wvkSAAAAAPBMRTvw0Q4Muexq9bi0DJwx_mJ-\&quot; url &#x3D; \&quot;https://www.google.com/recaptcha/api2/demo\&quot; proxy &#x3D; None
    /// </remarks>
    /// <param name="bodyRecaptchaV3ApiV1CaptchaRecaptchaV3Post"> (optional)</param>
    pplx::task<std::shared_ptr<ResponseModel>> recaptchaV3ApiV1CaptchaRecaptchaV3Post_0(
        boost::optional<std::shared_ptr<BodyRecaptchaV3ApiV1CaptchaRecaptchaV3Post>> bodyRecaptchaV3ApiV1CaptchaRecaptchaV3Post
    ) const;
    /// <summary>
    /// Tencent Captcha Solver/Tencent验证码解决器
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - Tencent Captcha验证码解决器 ### 参数: - app_id: 在HTML中可以找到网站对应的app_id - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - Tencent Captcha solver ### Parameters: - app_id: The app_id corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] app_id &#x3D; \&quot;10000000\&quot; url &#x3D; \&quot;https://www.tencent.com/\&quot; proxy &#x3D; None
    /// </remarks>
    /// <param name="bodyTencentCaptchaApiV1CaptchaTencentCaptchaPost"> (optional)</param>
    pplx::task<std::shared_ptr<ResponseModel>> tencentCaptchaApiV1CaptchaTencentCaptchaPost(
        boost::optional<std::shared_ptr<BodyTencentCaptchaApiV1CaptchaTencentCaptchaPost>> bodyTencentCaptchaApiV1CaptchaTencentCaptchaPost
    ) const;
    /// <summary>
    /// Tencent Captcha Solver/Tencent验证码解决器
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - Tencent Captcha验证码解决器 ### 参数: - app_id: 在HTML中可以找到网站对应的app_id - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - Tencent Captcha solver ### Parameters: - app_id: The app_id corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] app_id &#x3D; \&quot;10000000\&quot; url &#x3D; \&quot;https://www.tencent.com/\&quot; proxy &#x3D; None
    /// </remarks>
    /// <param name="bodyTencentCaptchaApiV1CaptchaTencentCaptchaPost"> (optional)</param>
    pplx::task<std::shared_ptr<ResponseModel>> tencentCaptchaApiV1CaptchaTencentCaptchaPost_0(
        boost::optional<std::shared_ptr<BodyTencentCaptchaApiV1CaptchaTencentCaptchaPost>> bodyTencentCaptchaApiV1CaptchaTencentCaptchaPost
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* IO_TIKHUB_CLIENT_API_CaptchaSolverApi_H_ */

