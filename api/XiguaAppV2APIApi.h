/**
 * TikHub.io - Your Ultimate Social Media Data & API Marketplace
 * High-performance asynchronous Douyin(抖音) TikTok Xiaohongshu(小红书) Kuaishou(快手) Weibo(微博) Instagram YouTube(油管) Twitter(X) Captcha Solver(验证码解决器) Temp Mail(临时邮箱) API(接口).
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * XiguaAppV2APIApi.h
 *
 * 
 */

#ifndef IO_TIKHUB_CLIENT_API_XiguaAppV2APIApi_H_
#define IO_TIKHUB_CLIENT_API_XiguaAppV2APIApi_H_


#include "../ApiClient.h"

#include "HttpValidationError.h"
#include "ResponseModel.h"
#include <cpprest/details/basic_types.h>


#include <boost/optional.hpp>

namespace io {
namespace tikhub {
namespace client {
namespace api {

using namespace org::openapitools::client::model;



class  XiguaAppV2APIApi 
{
public:

    explicit XiguaAppV2APIApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~XiguaAppV2APIApi();

    /// <summary>
    /// 获取单个作品数据/Get single video data
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取单个作品数据（信息较少，不包含标题等信息，但是包含相关视频的信息） ### 参数: - item_id: 作品id ### 返回: - 作品数据，其中包含视频链接的Base64编码播放地址，需要前端解码后使用，或者使用 /fetch_one_video_play_url 获取播放链接。  # [English] ### Purpose: - Get single video data (less information, does not include title and other information, but includes information about related videos) ### Parameters: - item_id: Video id ### Return: - Video data, which contains the Base64 encoded playback address of the video link, which needs to be decoded and used by the front end, or use /fetch_one_video_play_url to get the playback link.  # [示例/Example] item_id: \&quot;7354954305222377999\&quot;
    /// </remarks>
    /// <param name="itemId">作品id/Video id</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchOneVideoApiV1XiguaAppV2FetchOneVideoGet(
        utility::string_t itemId
    ) const;
    /// <summary>
    /// 获取单个作品数据/Get single video data
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取单个作品数据（信息较少，不包含标题等信息，但是包含相关视频的信息） ### 参数: - item_id: 作品id ### 返回: - 作品数据，其中包含视频链接的Base64编码播放地址，需要前端解码后使用，或者使用 /fetch_one_video_play_url 获取播放链接。  # [English] ### Purpose: - Get single video data (less information, does not include title and other information, but includes information about related videos) ### Parameters: - item_id: Video id ### Return: - Video data, which contains the Base64 encoded playback address of the video link, which needs to be decoded and used by the front end, or use /fetch_one_video_play_url to get the playback link.  # [示例/Example] item_id: \&quot;7354954305222377999\&quot;
    /// </remarks>
    /// <param name="itemId">作品id/Video id</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchOneVideoApiV1XiguaAppV2FetchOneVideoGet_0(
        utility::string_t itemId
    ) const;
    /// <summary>
    /// 获取单个作品的播放链接/Get single video play URL
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取单个作品的播放链接，此接口返回的是已经解码后的播放链接，可以直接使用。 ### 参数: - item_id: 作品id ### 返回: - 作品的播放链接的明文链接。  # [English] ### Purpose: - Get single video play URL, the interface returns the decoded play URL, which can be used directly. ### Parameters: - item_id: Video id ### Return: - Play URL of the video, plaintext link.  # [示例/Example] item_id: \&quot;7354954305222377999\&quot;
    /// </remarks>
    /// <param name="itemId">作品id/Video id</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchOneVideoPlayUrlApiV1XiguaAppV2FetchOneVideoPlayUrlGet(
        utility::string_t itemId
    ) const;
    /// <summary>
    /// 获取单个作品的播放链接/Get single video play URL
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取单个作品的播放链接，此接口返回的是已经解码后的播放链接，可以直接使用。 ### 参数: - item_id: 作品id ### 返回: - 作品的播放链接的明文链接。  # [English] ### Purpose: - Get single video play URL, the interface returns the decoded play URL, which can be used directly. ### Parameters: - item_id: Video id ### Return: - Play URL of the video, plaintext link.  # [示例/Example] item_id: \&quot;7354954305222377999\&quot;
    /// </remarks>
    /// <param name="itemId">作品id/Video id</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchOneVideoPlayUrlApiV1XiguaAppV2FetchOneVideoPlayUrlGet_0(
        utility::string_t itemId
    ) const;
    /// <summary>
    /// 获取单个作品数据 V2/Get single video data V2
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取单个作品数据（信息全面，包含标题等信息，但是不包含相关视频推荐信息） ### 参数: - item_id: 作品id ### 返回: - 作品数据，其中包含视频链接的Base64编码播放地址，需要前端解码后使用，或者使用 /fetch_one_video_play_url 获取播放链接。  # [English] ### Purpose: - Get single video data (more comprehensive information, including title and other information, but not including information about related video recommendations) ### Parameters: - item_id: Video id ### Return: - Video data, which contains the Base64 encoded playback address of the video link, which needs to be decoded and used by the front end, or use /fetch_one_video_play_url to get the playback link.  # [示例/Example] item_id: \&quot;7354954305222377999\&quot;
    /// </remarks>
    /// <param name="itemId">作品id/Video id</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchOneVideoV2ApiV1XiguaAppV2FetchOneVideoV2Get(
        utility::string_t itemId
    ) const;
    /// <summary>
    /// 获取单个作品数据 V2/Get single video data V2
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取单个作品数据（信息全面，包含标题等信息，但是不包含相关视频推荐信息） ### 参数: - item_id: 作品id ### 返回: - 作品数据，其中包含视频链接的Base64编码播放地址，需要前端解码后使用，或者使用 /fetch_one_video_play_url 获取播放链接。  # [English] ### Purpose: - Get single video data (more comprehensive information, including title and other information, but not including information about related video recommendations) ### Parameters: - item_id: Video id ### Return: - Video data, which contains the Base64 encoded playback address of the video link, which needs to be decoded and used by the front end, or use /fetch_one_video_play_url to get the playback link.  # [示例/Example] item_id: \&quot;7354954305222377999\&quot;
    /// </remarks>
    /// <param name="itemId">作品id/Video id</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchOneVideoV2ApiV1XiguaAppV2FetchOneVideoV2Get_0(
        utility::string_t itemId
    ) const;
    /// <summary>
    /// 个人信息/Personal information
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 个人信息 ### 参数: - user_id: 用户id ### 返回: - 个人信息  # [English] ### Purpose: - Personal information ### Parameters: - user_id: User id ### Return: - Personal information  # [示例/Example] user_id: \&quot;52712347586\&quot;
    /// </remarks>
    /// <param name="userId">用户id/User id</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchUserInfoApiV1XiguaAppV2FetchUserInfoGet(
        utility::string_t userId
    ) const;
    /// <summary>
    /// 个人信息/Personal information
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 个人信息 ### 参数: - user_id: 用户id ### 返回: - 个人信息  # [English] ### Purpose: - Personal information ### Parameters: - user_id: User id ### Return: - Personal information  # [示例/Example] user_id: \&quot;52712347586\&quot;
    /// </remarks>
    /// <param name="userId">用户id/User id</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchUserInfoApiV1XiguaAppV2FetchUserInfoGet_0(
        utility::string_t userId
    ) const;
    /// <summary>
    /// 获取个人作品列表/Get user post list
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取个人作品列表 ### 参数: - user_id: 用户id - max_behot_time: 最大行为时间，默认空，第一次请求传空，后续请求传上一次请求返回数据中的JSON中的值。 - max_behot_time的值可以是JSON路径为：$.data.data.[-1].behot_time - 也就是data中的最后一个元素的cursor值 ### 返回: - 作品列表  # [English] ### Purpose: - Get user post list ### Parameters: - user_id: User id - max_behot_time: Maximum behavior time, default empty, pass empty for the first request, pass the max_behot_time returned by the previous request for subsequent requests - The value of max_behot_time can be the JSON path: $.data.data.[-1].behot_time - That is, the cursor value of the last element in data ### Return: - Post list  # [示例/Example] user_id &#x3D; \&quot;1922379661976311\&quot; max_behot_time &#x3D; \&quot;\&quot;
    /// </remarks>
    /// <param name="userId">用户id/User id</param>
    /// <param name="maxBehotTime">最大行为时间/Maximum behavior time (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchUserPostListApiV1XiguaAppV2FetchUserPostListGet(
        utility::string_t userId,
        boost::optional<utility::string_t> maxBehotTime
    ) const;
    /// <summary>
    /// 获取个人作品列表/Get user post list
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 获取个人作品列表 ### 参数: - user_id: 用户id - max_behot_time: 最大行为时间，默认空，第一次请求传空，后续请求传上一次请求返回数据中的JSON中的值。 - max_behot_time的值可以是JSON路径为：$.data.data.[-1].behot_time - 也就是data中的最后一个元素的cursor值 ### 返回: - 作品列表  # [English] ### Purpose: - Get user post list ### Parameters: - user_id: User id - max_behot_time: Maximum behavior time, default empty, pass empty for the first request, pass the max_behot_time returned by the previous request for subsequent requests - The value of max_behot_time can be the JSON path: $.data.data.[-1].behot_time - That is, the cursor value of the last element in data ### Return: - Post list  # [示例/Example] user_id &#x3D; \&quot;1922379661976311\&quot; max_behot_time &#x3D; \&quot;\&quot;
    /// </remarks>
    /// <param name="userId">用户id/User id</param>
    /// <param name="maxBehotTime">最大行为时间/Maximum behavior time (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchUserPostListApiV1XiguaAppV2FetchUserPostListGet_0(
        utility::string_t userId,
        boost::optional<utility::string_t> maxBehotTime
    ) const;
    /// <summary>
    /// 视频评论列表/Video comment list
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 视频评论列表 ### 参数: - item_id: 作品id - offset: 偏移量，第一次请求传0，后续请求传上一次请求返回的offset - count: 数量，默认20，建议保持默认。 ### 返回: - 评论列表  # [English] ### Purpose: - Video comment list ### Parameters: - item_id: Video id - offset: Offset, pass 0 for the first request, pass the offset returned by the previous request for subsequent requests - count: Quantity, default 20, it is recommended to keep the default. ### Return: - Comment list  # [示例/Example] item_id: \&quot;7354954305222377999\&quot;
    /// </remarks>
    /// <param name="itemId">作品id/Video id</param>
    /// <param name="offset">偏移量/Offset (optional, default to 0)</param>
    /// <param name="count">数量/Count (optional, default to 0)</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchVideoCommentListApiV1XiguaAppV2FetchVideoCommentListGet(
        utility::string_t itemId,
        boost::optional<int32_t> offset,
        boost::optional<int32_t> count
    ) const;
    /// <summary>
    /// 视频评论列表/Video comment list
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 视频评论列表 ### 参数: - item_id: 作品id - offset: 偏移量，第一次请求传0，后续请求传上一次请求返回的offset - count: 数量，默认20，建议保持默认。 ### 返回: - 评论列表  # [English] ### Purpose: - Video comment list ### Parameters: - item_id: Video id - offset: Offset, pass 0 for the first request, pass the offset returned by the previous request for subsequent requests - count: Quantity, default 20, it is recommended to keep the default. ### Return: - Comment list  # [示例/Example] item_id: \&quot;7354954305222377999\&quot;
    /// </remarks>
    /// <param name="itemId">作品id/Video id</param>
    /// <param name="offset">偏移量/Offset (optional, default to 0)</param>
    /// <param name="count">数量/Count (optional, default to 0)</param>
    pplx::task<std::shared_ptr<ResponseModel>> fetchVideoCommentListApiV1XiguaAppV2FetchVideoCommentListGet_0(
        utility::string_t itemId,
        boost::optional<int32_t> offset,
        boost::optional<int32_t> count
    ) const;
    /// <summary>
    /// 搜索视频/Search video
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 搜索视频 ### 参数: - keyword: 关键词 - offset: 偏移量，第一次请求传0，后续请求传上一次请求返回的offset - order_type: 排序方式，为空时按照默认排序，以下为可选排序方式。     - 最新: publish_time     - 最热: play_count - min_duration: 最小时长，默认空，单位秒。 - max_duration: 最大时长，默认空，单位秒。 ### 返回: - 视频列表  # [English] ### Purpose: - Search video ### Parameters: - keyword: Keyword - offset: Offset, pass 0 for the first request, pass the offset returned by the previous request for subsequent requests - order_type: Order type, empty for default sorting, the following are optional sorting methods.     - Newest: publish_time     - Hottest: play_count - min_duration: Minimum duration, default empty, in seconds. - max_duration: Maximum duration, default empty, in seconds. ### Return: - Video list  # [示例/Example] &gt; 搜索关键字为“抖音”的视频，按照播放量排序，时长1-180秒(1-3分钟) &gt; Search for videos with the keyword \&quot;抖音\&quot;, sorted by play count, duration 1-180 seconds (1-3 minutes) keyword: \&quot;抖音\&quot; order_type: \&quot;play_count\&quot; min_duration: 1 max_duration: 180
    /// </remarks>
    /// <param name="keyword">关键词/Keyword</param>
    /// <param name="offset">偏移量/Offset (optional, default to 0)</param>
    /// <param name="orderType">排序方式/Order type (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="minDuration">最小时长/Minimum duration (optional, default to 0)</param>
    /// <param name="maxDuration">最大时长/Maximum duration (optional, default to 0)</param>
    pplx::task<std::shared_ptr<ResponseModel>> searchVideoApiV1XiguaAppV2SearchVideoGet(
        utility::string_t keyword,
        boost::optional<int32_t> offset,
        boost::optional<utility::string_t> orderType,
        boost::optional<int32_t> minDuration,
        boost::optional<int32_t> maxDuration
    ) const;
    /// <summary>
    /// 搜索视频/Search video
    /// </summary>
    /// <remarks>
    /// # [中文] ### 用途: - 搜索视频 ### 参数: - keyword: 关键词 - offset: 偏移量，第一次请求传0，后续请求传上一次请求返回的offset - order_type: 排序方式，为空时按照默认排序，以下为可选排序方式。     - 最新: publish_time     - 最热: play_count - min_duration: 最小时长，默认空，单位秒。 - max_duration: 最大时长，默认空，单位秒。 ### 返回: - 视频列表  # [English] ### Purpose: - Search video ### Parameters: - keyword: Keyword - offset: Offset, pass 0 for the first request, pass the offset returned by the previous request for subsequent requests - order_type: Order type, empty for default sorting, the following are optional sorting methods.     - Newest: publish_time     - Hottest: play_count - min_duration: Minimum duration, default empty, in seconds. - max_duration: Maximum duration, default empty, in seconds. ### Return: - Video list  # [示例/Example] &gt; 搜索关键字为“抖音”的视频，按照播放量排序，时长1-180秒(1-3分钟) &gt; Search for videos with the keyword \&quot;抖音\&quot;, sorted by play count, duration 1-180 seconds (1-3 minutes) keyword: \&quot;抖音\&quot; order_type: \&quot;play_count\&quot; min_duration: 1 max_duration: 180
    /// </remarks>
    /// <param name="keyword">关键词/Keyword</param>
    /// <param name="offset">偏移量/Offset (optional, default to 0)</param>
    /// <param name="orderType">排序方式/Order type (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="minDuration">最小时长/Minimum duration (optional, default to 0)</param>
    /// <param name="maxDuration">最大时长/Maximum duration (optional, default to 0)</param>
    pplx::task<std::shared_ptr<ResponseModel>> searchVideoApiV1XiguaAppV2SearchVideoGet_0(
        utility::string_t keyword,
        boost::optional<int32_t> offset,
        boost::optional<utility::string_t> orderType,
        boost::optional<int32_t> minDuration,
        boost::optional<int32_t> maxDuration
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* IO_TIKHUB_CLIENT_API_XiguaAppV2APIApi_H_ */

